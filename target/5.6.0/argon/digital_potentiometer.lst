
c:/Users/timwh/Projects/digital_potentiometer/target/5.6.0/argon/digital_potentiometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001ba4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5bc0  000b5bc0  00005bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000070  2003e640  000b5be4  0000e640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000140  2003e6b0  2003e6b0  0001e6b0  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b5c54  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b5c58  000b5c58  00015c58  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b5c5e  000b5c5e  00015c5e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b5c82  000b5c82  00015c82  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0012fa54  00000000  00000000  00015c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00012fa2  00000000  00000000  001456da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003de2c  00000000  00000000  0015867c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002c38  00000000  00000000  001964a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b118  00000000  00000000  001990e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000379eb  00000000  00000000  001a41f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003df6b  00000000  00000000  001dbbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00143a28  00000000  00000000  00219b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007de4  00000000  00000000  0035d578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f001 fbaa 	bl	b5796 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f001 fbb2 	bl	b57b2 <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003e640 	.word	0x2003e640
   b4058:	000b5be4 	.word	0x000b5be4
   b405c:	2003e6b0 	.word	0x2003e6b0
   b4060:	2003e6b0 	.word	0x2003e6b0
   b4064:	2003e7f0 	.word	0x2003e7f0

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f000 fd09 	bl	b4a84 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b5b9c 	.word	0x000b5b9c
   b408c:	000b5bc0 	.word	0x000b5bc0

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b848 	b.w	b4124 <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f86f 	bl	b4178 <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f000 bca9 	b.w	b49f4 <_post_loop>

000b40a2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40a2:	f000 bab9 	b.w	b4618 <malloc>

000b40a6 <_Znaj>:
   b40a6:	f000 bab7 	b.w	b4618 <malloc>

000b40aa <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40aa:	f000 babd 	b.w	b4628 <free>

000b40ae <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40ae:	7800      	ldrb	r0, [r0, #0]
   b40b0:	fab0 f080 	clz	r0, r0
   b40b4:	0940      	lsrs	r0, r0, #5
   b40b6:	4770      	bx	lr

000b40b8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b8:	2301      	movs	r3, #1
   b40ba:	7003      	strb	r3, [r0, #0]
   b40bc:	4770      	bx	lr

000b40be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b40be:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b40c0:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b40c2:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b40c4:	b17c      	cbz	r4, b40e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b40c6:	6863      	ldr	r3, [r4, #4]
   b40c8:	3b01      	subs	r3, #1
   b40ca:	6063      	str	r3, [r4, #4]
   b40cc:	b95b      	cbnz	r3, b40e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b40ce:	6823      	ldr	r3, [r4, #0]
   b40d0:	4620      	mov	r0, r4
   b40d2:	689b      	ldr	r3, [r3, #8]
   b40d4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b40d6:	68a3      	ldr	r3, [r4, #8]
   b40d8:	3b01      	subs	r3, #1
   b40da:	60a3      	str	r3, [r4, #8]
   b40dc:	b91b      	cbnz	r3, b40e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b40de:	6823      	ldr	r3, [r4, #0]
   b40e0:	4620      	mov	r0, r4
   b40e2:	68db      	ldr	r3, [r3, #12]
   b40e4:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b40e6:	4628      	mov	r0, r5
   b40e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b40ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b40ec:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b40ee:	4c0b      	ldr	r4, [pc, #44]	; (b411c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b40f0:	7821      	ldrb	r1, [r4, #0]
   b40f2:	f3bf 8f5b 	dmb	ish
   b40f6:	f011 0101 	ands.w	r1, r1, #1
   b40fa:	d10b      	bne.n	b4114 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b40fc:	4620      	mov	r0, r4
   b40fe:	9101      	str	r1, [sp, #4]
   b4100:	f7ff ffd5 	bl	b40ae <__cxa_guard_acquire>
   b4104:	9901      	ldr	r1, [sp, #4]
   b4106:	b128      	cbz	r0, b4114 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4108:	4805      	ldr	r0, [pc, #20]	; (b4120 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b410a:	f000 fb09 	bl	b4720 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b410e:	4620      	mov	r0, r4
   b4110:	f7ff ffd2 	bl	b40b8 <__cxa_guard_release>
        return instance;
    }
   b4114:	4802      	ldr	r0, [pc, #8]	; (b4120 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4116:	b002      	add	sp, #8
   b4118:	bd10      	pop	{r4, pc}
   b411a:	bf00      	nop
   b411c:	2003e6b0 	.word	0x2003e6b0
   b4120:	2003e6b4 	.word	0x2003e6b4

000b4124 <setup>:
//void DigitalPotTransfer(int cmd, int value);     //send the command and the wiper value through SPI
int val = 0;


void setup()
{
   b4124:	b508      	push	{r3, lr}
  Serial.begin(115200);
   b4126:	f001 f84d 	bl	b51c4 <_Z16_fetch_usbserialv>
   b412a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b412e:	f001 f83d 	bl	b51ac <_ZN9USBSerial5beginEl>
  pinMode(CS_PIN, OUTPUT);   // set the CS_PIN as an output:
   b4132:	2101      	movs	r1, #1
   b4134:	200e      	movs	r0, #14
   b4136:	f001 fa63 	bl	b5600 <pinMode>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b413a:	f7ff ffd7 	bl	b40ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
  SPI.begin();     // initialize SPI:
}
   b413e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4142:	f000 baf7 	b.w	b4734 <_ZN8SPIClass5beginEv>

000b4146 <_Z15DigitalPotWriteii>:
    val = analogRead(A0);
	Particle.publish("POT0_res2", String::format("%d", val));
}

void DigitalPotWrite(int cmd, int val)
{
   b4146:	b538      	push	{r3, r4, r5, lr}
   b4148:	4605      	mov	r5, r0
   b414a:	460c      	mov	r4, r1
  // constrain input value within 0 - 255
  val = constrain(val, 0, 255);
  // set the CS pin to low to select the chip:
  digitalWrite(CS_PIN, LOW);
   b414c:	200e      	movs	r0, #14
   b414e:	2100      	movs	r1, #0
   b4150:	f001 fa67 	bl	b5622 <digitalWrite>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4154:	f7ff ffca 	bl	b40ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4158:	b2e9      	uxtb	r1, r5
   b415a:	f000 faff 	bl	b475c <_ZN8SPIClass8transferEh>
   b415e:	f7ff ffc5 	bl	b40ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
  // send the command and value via SPI:
  SPI.transfer(cmd);
  SPI.transfer(val);
   b4162:	f384 0108 	usat	r1, #8, r4
   b4166:	b2c9      	uxtb	r1, r1
   b4168:	f000 faf8 	bl	b475c <_ZN8SPIClass8transferEh>
  // Set the CS pin high to execute the command:
  digitalWrite(CS_PIN, HIGH);
}
   b416c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(CS_PIN, HIGH);
   b4170:	2101      	movs	r1, #1
   b4172:	200e      	movs	r0, #14
   b4174:	f001 ba55 	b.w	b5622 <digitalWrite>

000b4178 <loop>:
{
   b4178:	b5f0      	push	{r4, r5, r6, r7, lr}
    POT0_Dn = 151;
   b417a:	4f24      	ldr	r7, [pc, #144]	; (b420c <loop+0x94>)
    val = analogRead(A0);
   b417c:	4e24      	ldr	r6, [pc, #144]	; (b4210 <loop+0x98>)
	Particle.publish("POT0_res1", String::format("%d", val));
   b417e:	4d25      	ldr	r5, [pc, #148]	; (b4214 <loop+0x9c>)
   b4180:	4c25      	ldr	r4, [pc, #148]	; (b4218 <loop+0xa0>)
{
   b4182:	b089      	sub	sp, #36	; 0x24
    POT0_Dn = 151;
   b4184:	2197      	movs	r1, #151	; 0x97
    DigitalPotWrite(POT0_SEL, POT0_Dn);
   b4186:	2011      	movs	r0, #17
    POT0_Dn = 151;
   b4188:	6039      	str	r1, [r7, #0]
    DigitalPotWrite(POT0_SEL, POT0_Dn);
   b418a:	f7ff ffdc 	bl	b4146 <_Z15DigitalPotWriteii>
    delay(2000);
   b418e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4192:	f000 fc03 	bl	b499c <delay>
    val = analogRead(A0);
   b4196:	2013      	movs	r0, #19
   b4198:	f001 fa5c 	bl	b5654 <analogRead>
	Particle.publish("POT0_res1", String::format("%d", val));
   b419c:	4629      	mov	r1, r5
    val = analogRead(A0);
   b419e:	4602      	mov	r2, r0
   b41a0:	6030      	str	r0, [r6, #0]
	Particle.publish("POT0_res1", String::format("%d", val));
   b41a2:	a804      	add	r0, sp, #16
   b41a4:	f000 fb5c 	bl	b4860 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b41a8:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b41aa:	9a04      	ldr	r2, [sp, #16]
   b41ac:	491b      	ldr	r1, [pc, #108]	; (b421c <loop+0xa4>)
   b41ae:	f88d 3000 	strb.w	r3, [sp]
   b41b2:	a802      	add	r0, sp, #8
   b41b4:	233c      	movs	r3, #60	; 0x3c
   b41b6:	f000 fdc3 	bl	b4d40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b41ba:	a803      	add	r0, sp, #12
   b41bc:	f7ff ff7f 	bl	b40be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b41c0:	a804      	add	r0, sp, #16
   b41c2:	f000 faed 	bl	b47a0 <_ZN6StringD1Ev>
    POT0_Dn = 31;
   b41c6:	211f      	movs	r1, #31
    DigitalPotWrite(POT0_SEL , POT0_Dn);
   b41c8:	2011      	movs	r0, #17
    POT0_Dn = 31;
   b41ca:	6039      	str	r1, [r7, #0]
    DigitalPotWrite(POT0_SEL , POT0_Dn);
   b41cc:	f7ff ffbb 	bl	b4146 <_Z15DigitalPotWriteii>
    delay(2000);
   b41d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b41d4:	f000 fbe2 	bl	b499c <delay>
    val = analogRead(A0);
   b41d8:	2013      	movs	r0, #19
   b41da:	f001 fa3b 	bl	b5654 <analogRead>
	Particle.publish("POT0_res2", String::format("%d", val));
   b41de:	4629      	mov	r1, r5
    val = analogRead(A0);
   b41e0:	4602      	mov	r2, r0
   b41e2:	6030      	str	r0, [r6, #0]
	Particle.publish("POT0_res2", String::format("%d", val));
   b41e4:	a804      	add	r0, sp, #16
   b41e6:	f000 fb3b 	bl	b4860 <_ZN6String6formatEPKcz>
   b41ea:	7823      	ldrb	r3, [r4, #0]
   b41ec:	9a04      	ldr	r2, [sp, #16]
   b41ee:	490c      	ldr	r1, [pc, #48]	; (b4220 <loop+0xa8>)
   b41f0:	f88d 3000 	strb.w	r3, [sp]
   b41f4:	a802      	add	r0, sp, #8
   b41f6:	233c      	movs	r3, #60	; 0x3c
   b41f8:	f000 fda2 	bl	b4d40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b41fc:	a803      	add	r0, sp, #12
   b41fe:	f7ff ff5e 	bl	b40be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4202:	a804      	add	r0, sp, #16
   b4204:	f000 facc 	bl	b47a0 <_ZN6StringD1Ev>
}
   b4208:	b009      	add	sp, #36	; 0x24
   b420a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b420c:	2003e640 	.word	0x2003e640
   b4210:	2003e6c0 	.word	0x2003e6c0
   b4214:	000b593c 	.word	0x000b593c
   b4218:	2003e6bc 	.word	0x2003e6bc
   b421c:	000b593f 	.word	0x000b593f
   b4220:	000b5949 	.word	0x000b5949

000b4224 <_GLOBAL__sub_I_POT0_Dn>:
        val_(val) {
   b4224:	4b01      	ldr	r3, [pc, #4]	; (b422c <_GLOBAL__sub_I_POT0_Dn+0x8>)
   b4226:	2200      	movs	r2, #0
   b4228:	701a      	strb	r2, [r3, #0]
}
   b422a:	4770      	bx	lr
   b422c:	2003e6bc 	.word	0x2003e6bc

000b4230 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4230:	b508      	push	{r3, lr}
   b4232:	4b02      	ldr	r3, [pc, #8]	; (b423c <netdb_freeaddrinfo+0xc>)
   b4234:	681b      	ldr	r3, [r3, #0]
   b4236:	689b      	ldr	r3, [r3, #8]
   b4238:	9301      	str	r3, [sp, #4]
   b423a:	bd08      	pop	{r3, pc}
   b423c:	00030268 	.word	0x00030268

000b4240 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4240:	b508      	push	{r3, lr}
   b4242:	4b02      	ldr	r3, [pc, #8]	; (b424c <netdb_getaddrinfo+0xc>)
   b4244:	681b      	ldr	r3, [r3, #0]
   b4246:	68db      	ldr	r3, [r3, #12]
   b4248:	9301      	str	r3, [sp, #4]
   b424a:	bd08      	pop	{r3, pc}
   b424c:	00030268 	.word	0x00030268

000b4250 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b4250:	b508      	push	{r3, lr}
   b4252:	4b02      	ldr	r3, [pc, #8]	; (b425c <hal_pin_validate_function+0xc>)
   b4254:	681b      	ldr	r3, [r3, #0]
   b4256:	685b      	ldr	r3, [r3, #4]
   b4258:	9301      	str	r3, [sp, #4]
   b425a:	bd08      	pop	{r3, pc}
   b425c:	0003022c 	.word	0x0003022c

000b4260 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b4260:	b508      	push	{r3, lr}
   b4262:	4b02      	ldr	r3, [pc, #8]	; (b426c <hal_gpio_mode+0xc>)
   b4264:	681b      	ldr	r3, [r3, #0]
   b4266:	689b      	ldr	r3, [r3, #8]
   b4268:	9301      	str	r3, [sp, #4]
   b426a:	bd08      	pop	{r3, pc}
   b426c:	0003022c 	.word	0x0003022c

000b4270 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b4270:	b508      	push	{r3, lr}
   b4272:	4b02      	ldr	r3, [pc, #8]	; (b427c <hal_gpio_get_mode+0xc>)
   b4274:	681b      	ldr	r3, [r3, #0]
   b4276:	68db      	ldr	r3, [r3, #12]
   b4278:	9301      	str	r3, [sp, #4]
   b427a:	bd08      	pop	{r3, pc}
   b427c:	0003022c 	.word	0x0003022c

000b4280 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b4280:	b508      	push	{r3, lr}
   b4282:	4b02      	ldr	r3, [pc, #8]	; (b428c <hal_gpio_write+0xc>)
   b4284:	681b      	ldr	r3, [r3, #0]
   b4286:	691b      	ldr	r3, [r3, #16]
   b4288:	9301      	str	r3, [sp, #4]
   b428a:	bd08      	pop	{r3, pc}
   b428c:	0003022c 	.word	0x0003022c

000b4290 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4290:	b508      	push	{r3, lr}
   b4292:	4b02      	ldr	r3, [pc, #8]	; (b429c <hal_adc_read+0xc>)
   b4294:	681b      	ldr	r3, [r3, #0]
   b4296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4298:	9301      	str	r3, [sp, #4]
   b429a:	bd08      	pop	{r3, pc}
   b429c:	0003022c 	.word	0x0003022c

000b42a0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b42a0:	b508      	push	{r3, lr}
   b42a2:	4b02      	ldr	r3, [pc, #8]	; (b42ac <HAL_RNG_GetRandomNumber+0xc>)
   b42a4:	681b      	ldr	r3, [r3, #0]
   b42a6:	685b      	ldr	r3, [r3, #4]
   b42a8:	9301      	str	r3, [sp, #4]
   b42aa:	bd08      	pop	{r3, pc}
   b42ac:	00030218 	.word	0x00030218

000b42b0 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b42b0:	b508      	push	{r3, lr}
   b42b2:	4b02      	ldr	r3, [pc, #8]	; (b42bc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b42b4:	681b      	ldr	r3, [r3, #0]
   b42b6:	695b      	ldr	r3, [r3, #20]
   b42b8:	9301      	str	r3, [sp, #4]
   b42ba:	bd08      	pop	{r3, pc}
   b42bc:	00030218 	.word	0x00030218

000b42c0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b42c0:	b508      	push	{r3, lr}
   b42c2:	4b02      	ldr	r3, [pc, #8]	; (b42cc <os_mutex_recursive_create+0xc>)
   b42c4:	681b      	ldr	r3, [r3, #0]
   b42c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b42c8:	9301      	str	r3, [sp, #4]
   b42ca:	bd08      	pop	{r3, pc}
   b42cc:	00030248 	.word	0x00030248

000b42d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b42d0:	b508      	push	{r3, lr}
   b42d2:	4b02      	ldr	r3, [pc, #8]	; (b42dc <inet_inet_ntop+0xc>)
   b42d4:	681b      	ldr	r3, [r3, #0]
   b42d6:	695b      	ldr	r3, [r3, #20]
   b42d8:	9301      	str	r3, [sp, #4]
   b42da:	bd08      	pop	{r3, pc}
   b42dc:	00030264 	.word	0x00030264

000b42e0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b42e0:	b508      	push	{r3, lr}
   b42e2:	4b02      	ldr	r3, [pc, #8]	; (b42ec <hal_usart_write+0xc>)
   b42e4:	681b      	ldr	r3, [r3, #0]
   b42e6:	68db      	ldr	r3, [r3, #12]
   b42e8:	9301      	str	r3, [sp, #4]
   b42ea:	bd08      	pop	{r3, pc}
   b42ec:	0003023c 	.word	0x0003023c

000b42f0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b42f0:	b508      	push	{r3, lr}
   b42f2:	4b02      	ldr	r3, [pc, #8]	; (b42fc <hal_usart_available+0xc>)
   b42f4:	681b      	ldr	r3, [r3, #0]
   b42f6:	691b      	ldr	r3, [r3, #16]
   b42f8:	9301      	str	r3, [sp, #4]
   b42fa:	bd08      	pop	{r3, pc}
   b42fc:	0003023c 	.word	0x0003023c

000b4300 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4300:	b508      	push	{r3, lr}
   b4302:	4b02      	ldr	r3, [pc, #8]	; (b430c <hal_usart_read+0xc>)
   b4304:	681b      	ldr	r3, [r3, #0]
   b4306:	695b      	ldr	r3, [r3, #20]
   b4308:	9301      	str	r3, [sp, #4]
   b430a:	bd08      	pop	{r3, pc}
   b430c:	0003023c 	.word	0x0003023c

000b4310 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4310:	b508      	push	{r3, lr}
   b4312:	4b02      	ldr	r3, [pc, #8]	; (b431c <hal_usart_peek+0xc>)
   b4314:	681b      	ldr	r3, [r3, #0]
   b4316:	699b      	ldr	r3, [r3, #24]
   b4318:	9301      	str	r3, [sp, #4]
   b431a:	bd08      	pop	{r3, pc}
   b431c:	0003023c 	.word	0x0003023c

000b4320 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4320:	b508      	push	{r3, lr}
   b4322:	4b02      	ldr	r3, [pc, #8]	; (b432c <hal_usart_flush+0xc>)
   b4324:	681b      	ldr	r3, [r3, #0]
   b4326:	69db      	ldr	r3, [r3, #28]
   b4328:	9301      	str	r3, [sp, #4]
   b432a:	bd08      	pop	{r3, pc}
   b432c:	0003023c 	.word	0x0003023c

000b4330 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4330:	b508      	push	{r3, lr}
   b4332:	4b02      	ldr	r3, [pc, #8]	; (b433c <hal_usart_is_enabled+0xc>)
   b4334:	681b      	ldr	r3, [r3, #0]
   b4336:	6a1b      	ldr	r3, [r3, #32]
   b4338:	9301      	str	r3, [sp, #4]
   b433a:	bd08      	pop	{r3, pc}
   b433c:	0003023c 	.word	0x0003023c

000b4340 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4340:	b508      	push	{r3, lr}
   b4342:	4b02      	ldr	r3, [pc, #8]	; (b434c <hal_usart_available_data_for_write+0xc>)
   b4344:	681b      	ldr	r3, [r3, #0]
   b4346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4348:	9301      	str	r3, [sp, #4]
   b434a:	bd08      	pop	{r3, pc}
   b434c:	0003023c 	.word	0x0003023c

000b4350 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4350:	b508      	push	{r3, lr}
   b4352:	4b02      	ldr	r3, [pc, #8]	; (b435c <hal_usart_init_ex+0xc>)
   b4354:	681b      	ldr	r3, [r3, #0]
   b4356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4358:	9301      	str	r3, [sp, #4]
   b435a:	bd08      	pop	{r3, pc}
   b435c:	0003023c 	.word	0x0003023c

000b4360 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4360:	b508      	push	{r3, lr}
   b4362:	4b02      	ldr	r3, [pc, #8]	; (b436c <hal_i2c_write+0xc>)
   b4364:	681b      	ldr	r3, [r3, #0]
   b4366:	6a1b      	ldr	r3, [r3, #32]
   b4368:	9301      	str	r3, [sp, #4]
   b436a:	bd08      	pop	{r3, pc}
   b436c:	00030228 	.word	0x00030228

000b4370 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4370:	b508      	push	{r3, lr}
   b4372:	4b02      	ldr	r3, [pc, #8]	; (b437c <hal_i2c_available+0xc>)
   b4374:	681b      	ldr	r3, [r3, #0]
   b4376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4378:	9301      	str	r3, [sp, #4]
   b437a:	bd08      	pop	{r3, pc}
   b437c:	00030228 	.word	0x00030228

000b4380 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4380:	b508      	push	{r3, lr}
   b4382:	4b02      	ldr	r3, [pc, #8]	; (b438c <hal_i2c_read+0xc>)
   b4384:	681b      	ldr	r3, [r3, #0]
   b4386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4388:	9301      	str	r3, [sp, #4]
   b438a:	bd08      	pop	{r3, pc}
   b438c:	00030228 	.word	0x00030228

000b4390 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4390:	b508      	push	{r3, lr}
   b4392:	4b02      	ldr	r3, [pc, #8]	; (b439c <hal_i2c_peek+0xc>)
   b4394:	681b      	ldr	r3, [r3, #0]
   b4396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4398:	9301      	str	r3, [sp, #4]
   b439a:	bd08      	pop	{r3, pc}
   b439c:	00030228 	.word	0x00030228

000b43a0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b43a0:	b508      	push	{r3, lr}
   b43a2:	4b02      	ldr	r3, [pc, #8]	; (b43ac <hal_i2c_flush+0xc>)
   b43a4:	681b      	ldr	r3, [r3, #0]
   b43a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b43a8:	9301      	str	r3, [sp, #4]
   b43aa:	bd08      	pop	{r3, pc}
   b43ac:	00030228 	.word	0x00030228

000b43b0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b43b0:	b508      	push	{r3, lr}
   b43b2:	4b02      	ldr	r3, [pc, #8]	; (b43bc <hal_i2c_is_enabled+0xc>)
   b43b4:	681b      	ldr	r3, [r3, #0]
   b43b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b43b8:	9301      	str	r3, [sp, #4]
   b43ba:	bd08      	pop	{r3, pc}
   b43bc:	00030228 	.word	0x00030228

000b43c0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b43c0:	b508      	push	{r3, lr}
   b43c2:	4b02      	ldr	r3, [pc, #8]	; (b43cc <hal_i2c_init+0xc>)
   b43c4:	681b      	ldr	r3, [r3, #0]
   b43c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b43c8:	9301      	str	r3, [sp, #4]
   b43ca:	bd08      	pop	{r3, pc}
   b43cc:	00030228 	.word	0x00030228

000b43d0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b43d0:	b508      	push	{r3, lr}
   b43d2:	4b02      	ldr	r3, [pc, #8]	; (b43dc <hal_spi_begin+0xc>)
   b43d4:	681b      	ldr	r3, [r3, #0]
   b43d6:	681b      	ldr	r3, [r3, #0]
   b43d8:	9301      	str	r3, [sp, #4]
   b43da:	bd08      	pop	{r3, pc}
   b43dc:	00030230 	.word	0x00030230

000b43e0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b43e0:	b508      	push	{r3, lr}
   b43e2:	4b02      	ldr	r3, [pc, #8]	; (b43ec <hal_spi_transfer+0xc>)
   b43e4:	681b      	ldr	r3, [r3, #0]
   b43e6:	695b      	ldr	r3, [r3, #20]
   b43e8:	9301      	str	r3, [sp, #4]
   b43ea:	bd08      	pop	{r3, pc}
   b43ec:	00030230 	.word	0x00030230

000b43f0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b43f0:	b508      	push	{r3, lr}
   b43f2:	4b02      	ldr	r3, [pc, #8]	; (b43fc <hal_spi_init+0xc>)
   b43f4:	681b      	ldr	r3, [r3, #0]
   b43f6:	69db      	ldr	r3, [r3, #28]
   b43f8:	9301      	str	r3, [sp, #4]
   b43fa:	bd08      	pop	{r3, pc}
   b43fc:	00030230 	.word	0x00030230

000b4400 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4400:	b508      	push	{r3, lr}
   b4402:	4b02      	ldr	r3, [pc, #8]	; (b440c <hal_spi_is_enabled+0xc>)
   b4404:	681b      	ldr	r3, [r3, #0]
   b4406:	6a1b      	ldr	r3, [r3, #32]
   b4408:	9301      	str	r3, [sp, #4]
   b440a:	bd08      	pop	{r3, pc}
   b440c:	00030230 	.word	0x00030230

000b4410 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b4410:	b508      	push	{r3, lr}
   b4412:	4b02      	ldr	r3, [pc, #8]	; (b441c <hal_spi_acquire+0xc>)
   b4414:	681b      	ldr	r3, [r3, #0]
   b4416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4418:	9301      	str	r3, [sp, #4]
   b441a:	bd08      	pop	{r3, pc}
   b441c:	00030230 	.word	0x00030230

000b4420 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b4420:	b508      	push	{r3, lr}
   b4422:	4b02      	ldr	r3, [pc, #8]	; (b442c <hal_spi_release+0xc>)
   b4424:	681b      	ldr	r3, [r3, #0]
   b4426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4428:	9301      	str	r3, [sp, #4]
   b442a:	bd08      	pop	{r3, pc}
   b442c:	00030230 	.word	0x00030230

000b4430 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4430:	b508      	push	{r3, lr}
   b4432:	4b02      	ldr	r3, [pc, #8]	; (b443c <HAL_USB_USART_Init+0xc>)
   b4434:	681b      	ldr	r3, [r3, #0]
   b4436:	681b      	ldr	r3, [r3, #0]
   b4438:	9301      	str	r3, [sp, #4]
   b443a:	bd08      	pop	{r3, pc}
   b443c:	0003024c 	.word	0x0003024c

000b4440 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4440:	b508      	push	{r3, lr}
   b4442:	4b02      	ldr	r3, [pc, #8]	; (b444c <HAL_USB_USART_Begin+0xc>)
   b4444:	681b      	ldr	r3, [r3, #0]
   b4446:	685b      	ldr	r3, [r3, #4]
   b4448:	9301      	str	r3, [sp, #4]
   b444a:	bd08      	pop	{r3, pc}
   b444c:	0003024c 	.word	0x0003024c

000b4450 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4450:	b508      	push	{r3, lr}
   b4452:	4b02      	ldr	r3, [pc, #8]	; (b445c <HAL_USB_USART_Available_Data+0xc>)
   b4454:	681b      	ldr	r3, [r3, #0]
   b4456:	691b      	ldr	r3, [r3, #16]
   b4458:	9301      	str	r3, [sp, #4]
   b445a:	bd08      	pop	{r3, pc}
   b445c:	0003024c 	.word	0x0003024c

000b4460 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4460:	b508      	push	{r3, lr}
   b4462:	4b02      	ldr	r3, [pc, #8]	; (b446c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4464:	681b      	ldr	r3, [r3, #0]
   b4466:	695b      	ldr	r3, [r3, #20]
   b4468:	9301      	str	r3, [sp, #4]
   b446a:	bd08      	pop	{r3, pc}
   b446c:	0003024c 	.word	0x0003024c

000b4470 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4470:	b508      	push	{r3, lr}
   b4472:	4b02      	ldr	r3, [pc, #8]	; (b447c <HAL_USB_USART_Receive_Data+0xc>)
   b4474:	681b      	ldr	r3, [r3, #0]
   b4476:	699b      	ldr	r3, [r3, #24]
   b4478:	9301      	str	r3, [sp, #4]
   b447a:	bd08      	pop	{r3, pc}
   b447c:	0003024c 	.word	0x0003024c

000b4480 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4480:	b508      	push	{r3, lr}
   b4482:	4b02      	ldr	r3, [pc, #8]	; (b448c <HAL_USB_USART_Send_Data+0xc>)
   b4484:	681b      	ldr	r3, [r3, #0]
   b4486:	69db      	ldr	r3, [r3, #28]
   b4488:	9301      	str	r3, [sp, #4]
   b448a:	bd08      	pop	{r3, pc}
   b448c:	0003024c 	.word	0x0003024c

000b4490 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4490:	b508      	push	{r3, lr}
   b4492:	4b02      	ldr	r3, [pc, #8]	; (b449c <HAL_USB_USART_Flush_Data+0xc>)
   b4494:	681b      	ldr	r3, [r3, #0]
   b4496:	6a1b      	ldr	r3, [r3, #32]
   b4498:	9301      	str	r3, [sp, #4]
   b449a:	bd08      	pop	{r3, pc}
   b449c:	0003024c 	.word	0x0003024c

000b44a0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b44a0:	b508      	push	{r3, lr}
   b44a2:	4b02      	ldr	r3, [pc, #8]	; (b44ac <set_system_mode+0xc>)
   b44a4:	681b      	ldr	r3, [r3, #0]
   b44a6:	685b      	ldr	r3, [r3, #4]
   b44a8:	9301      	str	r3, [sp, #4]
   b44aa:	bd08      	pop	{r3, pc}
   b44ac:	00030220 	.word	0x00030220

000b44b0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b44b0:	b508      	push	{r3, lr}
   b44b2:	4b02      	ldr	r3, [pc, #8]	; (b44bc <system_delay_ms+0xc>)
   b44b4:	681b      	ldr	r3, [r3, #0]
   b44b6:	695b      	ldr	r3, [r3, #20]
   b44b8:	9301      	str	r3, [sp, #4]
   b44ba:	bd08      	pop	{r3, pc}
   b44bc:	00030220 	.word	0x00030220

000b44c0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b44c0:	b508      	push	{r3, lr}
   b44c2:	4b02      	ldr	r3, [pc, #8]	; (b44cc <application_thread_current+0xc>)
   b44c4:	681b      	ldr	r3, [r3, #0]
   b44c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b44c8:	9301      	str	r3, [sp, #4]
   b44ca:	bd08      	pop	{r3, pc}
   b44cc:	00030220 	.word	0x00030220

000b44d0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b44d0:	b508      	push	{r3, lr}
   b44d2:	4b02      	ldr	r3, [pc, #8]	; (b44dc <application_thread_invoke+0xc>)
   b44d4:	681b      	ldr	r3, [r3, #0]
   b44d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b44d8:	9301      	str	r3, [sp, #4]
   b44da:	bd08      	pop	{r3, pc}
   b44dc:	00030220 	.word	0x00030220

000b44e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b44e0:	b508      	push	{r3, lr}
   b44e2:	4b03      	ldr	r3, [pc, #12]	; (b44f0 <system_ctrl_set_app_request_handler+0x10>)
   b44e4:	681b      	ldr	r3, [r3, #0]
   b44e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b44ea:	9301      	str	r3, [sp, #4]
   b44ec:	bd08      	pop	{r3, pc}
   b44ee:	0000      	.short	0x0000
   b44f0:	00030220 	.word	0x00030220

000b44f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b44f4:	b508      	push	{r3, lr}
   b44f6:	4b03      	ldr	r3, [pc, #12]	; (b4504 <system_ctrl_set_result+0x10>)
   b44f8:	681b      	ldr	r3, [r3, #0]
   b44fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b44fe:	9301      	str	r3, [sp, #4]
   b4500:	bd08      	pop	{r3, pc}
   b4502:	0000      	.short	0x0000
   b4504:	00030220 	.word	0x00030220

000b4508 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4508:	b508      	push	{r3, lr}
   b450a:	4b02      	ldr	r3, [pc, #8]	; (b4514 <network_connect+0xc>)
   b450c:	681b      	ldr	r3, [r3, #0]
   b450e:	685b      	ldr	r3, [r3, #4]
   b4510:	9301      	str	r3, [sp, #4]
   b4512:	bd08      	pop	{r3, pc}
   b4514:	00030240 	.word	0x00030240

000b4518 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4518:	b508      	push	{r3, lr}
   b451a:	4b02      	ldr	r3, [pc, #8]	; (b4524 <network_connecting+0xc>)
   b451c:	681b      	ldr	r3, [r3, #0]
   b451e:	689b      	ldr	r3, [r3, #8]
   b4520:	9301      	str	r3, [sp, #4]
   b4522:	bd08      	pop	{r3, pc}
   b4524:	00030240 	.word	0x00030240

000b4528 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4528:	b508      	push	{r3, lr}
   b452a:	4b02      	ldr	r3, [pc, #8]	; (b4534 <network_disconnect+0xc>)
   b452c:	681b      	ldr	r3, [r3, #0]
   b452e:	68db      	ldr	r3, [r3, #12]
   b4530:	9301      	str	r3, [sp, #4]
   b4532:	bd08      	pop	{r3, pc}
   b4534:	00030240 	.word	0x00030240

000b4538 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4538:	b508      	push	{r3, lr}
   b453a:	4b02      	ldr	r3, [pc, #8]	; (b4544 <network_ready+0xc>)
   b453c:	681b      	ldr	r3, [r3, #0]
   b453e:	691b      	ldr	r3, [r3, #16]
   b4540:	9301      	str	r3, [sp, #4]
   b4542:	bd08      	pop	{r3, pc}
   b4544:	00030240 	.word	0x00030240

000b4548 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4548:	b508      	push	{r3, lr}
   b454a:	4b02      	ldr	r3, [pc, #8]	; (b4554 <network_on+0xc>)
   b454c:	681b      	ldr	r3, [r3, #0]
   b454e:	695b      	ldr	r3, [r3, #20]
   b4550:	9301      	str	r3, [sp, #4]
   b4552:	bd08      	pop	{r3, pc}
   b4554:	00030240 	.word	0x00030240

000b4558 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4558:	b508      	push	{r3, lr}
   b455a:	4b02      	ldr	r3, [pc, #8]	; (b4564 <network_off+0xc>)
   b455c:	681b      	ldr	r3, [r3, #0]
   b455e:	699b      	ldr	r3, [r3, #24]
   b4560:	9301      	str	r3, [sp, #4]
   b4562:	bd08      	pop	{r3, pc}
   b4564:	00030240 	.word	0x00030240

000b4568 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4568:	b508      	push	{r3, lr}
   b456a:	4b02      	ldr	r3, [pc, #8]	; (b4574 <network_listen+0xc>)
   b456c:	681b      	ldr	r3, [r3, #0]
   b456e:	69db      	ldr	r3, [r3, #28]
   b4570:	9301      	str	r3, [sp, #4]
   b4572:	bd08      	pop	{r3, pc}
   b4574:	00030240 	.word	0x00030240

000b4578 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4578:	b508      	push	{r3, lr}
   b457a:	4b02      	ldr	r3, [pc, #8]	; (b4584 <network_listening+0xc>)
   b457c:	681b      	ldr	r3, [r3, #0]
   b457e:	6a1b      	ldr	r3, [r3, #32]
   b4580:	9301      	str	r3, [sp, #4]
   b4582:	bd08      	pop	{r3, pc}
   b4584:	00030240 	.word	0x00030240

000b4588 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4588:	b508      	push	{r3, lr}
   b458a:	4b02      	ldr	r3, [pc, #8]	; (b4594 <network_set_listen_timeout+0xc>)
   b458c:	681b      	ldr	r3, [r3, #0]
   b458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4590:	9301      	str	r3, [sp, #4]
   b4592:	bd08      	pop	{r3, pc}
   b4594:	00030240 	.word	0x00030240

000b4598 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4598:	b508      	push	{r3, lr}
   b459a:	4b02      	ldr	r3, [pc, #8]	; (b45a4 <network_get_listen_timeout+0xc>)
   b459c:	681b      	ldr	r3, [r3, #0]
   b459e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b45a0:	9301      	str	r3, [sp, #4]
   b45a2:	bd08      	pop	{r3, pc}
   b45a4:	00030240 	.word	0x00030240

000b45a8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b45a8:	b508      	push	{r3, lr}
   b45aa:	4b02      	ldr	r3, [pc, #8]	; (b45b4 <network_is_on+0xc>)
   b45ac:	681b      	ldr	r3, [r3, #0]
   b45ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b45b0:	9301      	str	r3, [sp, #4]
   b45b2:	bd08      	pop	{r3, pc}
   b45b4:	00030240 	.word	0x00030240

000b45b8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b45b8:	b508      	push	{r3, lr}
   b45ba:	4b02      	ldr	r3, [pc, #8]	; (b45c4 <network_is_off+0xc>)
   b45bc:	681b      	ldr	r3, [r3, #0]
   b45be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45c0:	9301      	str	r3, [sp, #4]
   b45c2:	bd08      	pop	{r3, pc}
   b45c4:	00030240 	.word	0x00030240

000b45c8 <network_preferred>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_preferred, network_handle_t(network_handle_t, bool, void*))
   b45c8:	b508      	push	{r3, lr}
   b45ca:	4b02      	ldr	r3, [pc, #8]	; (b45d4 <network_preferred+0xc>)
   b45cc:	681b      	ldr	r3, [r3, #0]
   b45ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b45d0:	9301      	str	r3, [sp, #4]
   b45d2:	bd08      	pop	{r3, pc}
   b45d4:	00030240 	.word	0x00030240

000b45d8 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b45d8:	b508      	push	{r3, lr}
   b45da:	4b02      	ldr	r3, [pc, #8]	; (b45e4 <network_is_preferred+0xc>)
   b45dc:	681b      	ldr	r3, [r3, #0]
   b45de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b45e0:	9301      	str	r3, [sp, #4]
   b45e2:	bd08      	pop	{r3, pc}
   b45e4:	00030240 	.word	0x00030240

000b45e8 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b45e8:	b508      	push	{r3, lr}
   b45ea:	4b02      	ldr	r3, [pc, #8]	; (b45f4 <spark_cloud_flag_connected+0xc>)
   b45ec:	681b      	ldr	r3, [r3, #0]
   b45ee:	695b      	ldr	r3, [r3, #20]
   b45f0:	9301      	str	r3, [sp, #4]
   b45f2:	bd08      	pop	{r3, pc}
   b45f4:	00030244 	.word	0x00030244

000b45f8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b45f8:	b508      	push	{r3, lr}
   b45fa:	4b02      	ldr	r3, [pc, #8]	; (b4604 <spark_send_event+0xc>)
   b45fc:	681b      	ldr	r3, [r3, #0]
   b45fe:	6a1b      	ldr	r3, [r3, #32]
   b4600:	9301      	str	r3, [sp, #4]
   b4602:	bd08      	pop	{r3, pc}
   b4604:	00030244 	.word	0x00030244

000b4608 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4608:	b508      	push	{r3, lr}
   b460a:	4b02      	ldr	r3, [pc, #8]	; (b4614 <spark_set_random_seed_from_cloud_handler+0xc>)
   b460c:	681b      	ldr	r3, [r3, #0]
   b460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4610:	9301      	str	r3, [sp, #4]
   b4612:	bd08      	pop	{r3, pc}
   b4614:	00030244 	.word	0x00030244

000b4618 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4618:	b508      	push	{r3, lr}
   b461a:	4b02      	ldr	r3, [pc, #8]	; (b4624 <malloc+0xc>)
   b461c:	681b      	ldr	r3, [r3, #0]
   b461e:	681b      	ldr	r3, [r3, #0]
   b4620:	9301      	str	r3, [sp, #4]
   b4622:	bd08      	pop	{r3, pc}
   b4624:	0003021c 	.word	0x0003021c

000b4628 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4628:	b508      	push	{r3, lr}
   b462a:	4b02      	ldr	r3, [pc, #8]	; (b4634 <free+0xc>)
   b462c:	681b      	ldr	r3, [r3, #0]
   b462e:	685b      	ldr	r3, [r3, #4]
   b4630:	9301      	str	r3, [sp, #4]
   b4632:	bd08      	pop	{r3, pc}
   b4634:	0003021c 	.word	0x0003021c

000b4638 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4638:	b508      	push	{r3, lr}
   b463a:	4b02      	ldr	r3, [pc, #8]	; (b4644 <realloc+0xc>)
   b463c:	681b      	ldr	r3, [r3, #0]
   b463e:	689b      	ldr	r3, [r3, #8]
   b4640:	9301      	str	r3, [sp, #4]
   b4642:	bd08      	pop	{r3, pc}
   b4644:	0003021c 	.word	0x0003021c

000b4648 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4648:	b508      	push	{r3, lr}
   b464a:	4b02      	ldr	r3, [pc, #8]	; (b4654 <vsnprintf+0xc>)
   b464c:	681b      	ldr	r3, [r3, #0]
   b464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4650:	9301      	str	r3, [sp, #4]
   b4652:	bd08      	pop	{r3, pc}
   b4654:	0003021c 	.word	0x0003021c

000b4658 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4658:	b508      	push	{r3, lr}
   b465a:	4b02      	ldr	r3, [pc, #8]	; (b4664 <abort+0xc>)
   b465c:	681b      	ldr	r3, [r3, #0]
   b465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4660:	9301      	str	r3, [sp, #4]
   b4662:	bd08      	pop	{r3, pc}
   b4664:	0003021c 	.word	0x0003021c

000b4668 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4668:	b508      	push	{r3, lr}
   b466a:	4b02      	ldr	r3, [pc, #8]	; (b4674 <_malloc_r+0xc>)
   b466c:	681b      	ldr	r3, [r3, #0]
   b466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4670:	9301      	str	r3, [sp, #4]
   b4672:	bd08      	pop	{r3, pc}
   b4674:	0003021c 	.word	0x0003021c

000b4678 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4678:	b508      	push	{r3, lr}
   b467a:	4b02      	ldr	r3, [pc, #8]	; (b4684 <__assert_func+0xc>)
   b467c:	681b      	ldr	r3, [r3, #0]
   b467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4680:	9301      	str	r3, [sp, #4]
   b4682:	bd08      	pop	{r3, pc}
   b4684:	0003021c 	.word	0x0003021c

000b4688 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4688:	b508      	push	{r3, lr}
   b468a:	4b02      	ldr	r3, [pc, #8]	; (b4694 <newlib_impure_ptr_callback+0xc>)
   b468c:	681b      	ldr	r3, [r3, #0]
   b468e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4690:	9301      	str	r3, [sp, #4]
   b4692:	bd08      	pop	{r3, pc}
   b4694:	0003021c 	.word	0x0003021c

000b4698 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4698:	2200      	movs	r2, #0
   b469a:	6840      	ldr	r0, [r0, #4]
   b469c:	4611      	mov	r1, r2
   b469e:	f7ff bf6b 	b.w	b4578 <network_listening>

000b46a2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b46a2:	2200      	movs	r2, #0
   b46a4:	6840      	ldr	r0, [r0, #4]
   b46a6:	4611      	mov	r1, r2
   b46a8:	f7ff bf76 	b.w	b4598 <network_get_listen_timeout>

000b46ac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b46ac:	6840      	ldr	r0, [r0, #4]
   b46ae:	2200      	movs	r2, #0
   b46b0:	f7ff bf6a 	b.w	b4588 <network_set_listen_timeout>

000b46b4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b46b4:	6840      	ldr	r0, [r0, #4]
   b46b6:	2200      	movs	r2, #0
   b46b8:	f081 0101 	eor.w	r1, r1, #1
   b46bc:	f7ff bf54 	b.w	b4568 <network_listen>

000b46c0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b46c0:	2300      	movs	r3, #0
   b46c2:	6840      	ldr	r0, [r0, #4]
   b46c4:	461a      	mov	r2, r3
   b46c6:	4619      	mov	r1, r3
   b46c8:	f7ff bf46 	b.w	b4558 <network_off>

000b46cc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b46cc:	2300      	movs	r3, #0
   b46ce:	6840      	ldr	r0, [r0, #4]
   b46d0:	461a      	mov	r2, r3
   b46d2:	4619      	mov	r1, r3
   b46d4:	f7ff bf38 	b.w	b4548 <network_on>

000b46d8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b46d8:	2200      	movs	r2, #0
   b46da:	6840      	ldr	r0, [r0, #4]
   b46dc:	4611      	mov	r1, r2
   b46de:	f7ff bf2b 	b.w	b4538 <network_ready>

000b46e2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b46e2:	2200      	movs	r2, #0
   b46e4:	6840      	ldr	r0, [r0, #4]
   b46e6:	4611      	mov	r1, r2
   b46e8:	f7ff bf16 	b.w	b4518 <network_connecting>

000b46ec <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b46ec:	6840      	ldr	r0, [r0, #4]
   b46ee:	2200      	movs	r2, #0
   b46f0:	2102      	movs	r1, #2
   b46f2:	f7ff bf19 	b.w	b4528 <network_disconnect>

000b46f6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b46f6:	2300      	movs	r3, #0
   b46f8:	6840      	ldr	r0, [r0, #4]
   b46fa:	461a      	mov	r2, r3
   b46fc:	f7ff bf04 	b.w	b4508 <network_connect>

000b4700 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4700:	4b02      	ldr	r3, [pc, #8]	; (b470c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4702:	2203      	movs	r2, #3
   b4704:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4706:	4a02      	ldr	r2, [pc, #8]	; (b4710 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4708:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b470a:	4770      	bx	lr
   b470c:	2003e6c4 	.word	0x2003e6c4
   b4710:	000b595c 	.word	0x000b595c

000b4714 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b4714:	2100      	movs	r1, #0
   b4716:	f7ff be83 	b.w	b4420 <hal_spi_release>

000b471a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b471a:	2100      	movs	r1, #0
   b471c:	f7ff be78 	b.w	b4410 <hal_spi_acquire>

000b4720 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4720:	b510      	push	{r4, lr}
   b4722:	4604      	mov	r4, r0
   b4724:	4608      	mov	r0, r1
{
    _spi = spi;
   b4726:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4728:	f7ff fe62 	bl	b43f0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b472c:	2300      	movs	r3, #0
   b472e:	6063      	str	r3, [r4, #4]
}
   b4730:	4620      	mov	r0, r4
   b4732:	bd10      	pop	{r4, pc}

000b4734 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b4734:	b513      	push	{r0, r1, r4, lr}
   b4736:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b4738:	7800      	ldrb	r0, [r0, #0]
   b473a:	f7ff ffee 	bl	b471a <_ZN8SPIClass4lockEv.isra.0>
   b473e:	b958      	cbnz	r0, b4758 <_ZN8SPIClass5beginEv+0x24>
   b4740:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b4742:	9001      	str	r0, [sp, #4]
   b4744:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b4748:	f7ff fe42 	bl	b43d0 <hal_spi_begin>
        unlock();
   b474c:	9801      	ldr	r0, [sp, #4]
    }
}
   b474e:	b002      	add	sp, #8
   b4750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4754:	f7ff bfde 	b.w	b4714 <_ZN8SPIClass6unlockEv.isra.0>
   b4758:	b002      	add	sp, #8
   b475a:	bd10      	pop	{r4, pc}

000b475c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b475c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b475e:	7800      	ldrb	r0, [r0, #0]
   b4760:	f7ff fe3e 	bl	b43e0 <hal_spi_transfer>
}
   b4764:	b2c0      	uxtb	r0, r0
   b4766:	bd08      	pop	{r3, pc}

000b4768 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b4768:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b476a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b476c:	4604      	mov	r4, r0
      if (_M_manager)
   b476e:	b113      	cbz	r3, b4776 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4770:	2203      	movs	r2, #3
   b4772:	4601      	mov	r1, r0
   b4774:	4798      	blx	r3
    }
   b4776:	4620      	mov	r0, r4
   b4778:	bd10      	pop	{r4, pc}
	...

000b477c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b477c:	4b05      	ldr	r3, [pc, #20]	; (b4794 <_GLOBAL__sub_I_System+0x18>)
   b477e:	2202      	movs	r2, #2
   b4780:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4782:	4b05      	ldr	r3, [pc, #20]	; (b4798 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4784:	4a05      	ldr	r2, [pc, #20]	; (b479c <_GLOBAL__sub_I_System+0x20>)
   b4786:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4788:	2000      	movs	r0, #0
   b478a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b478e:	f7ff be87 	b.w	b44a0 <set_system_mode>
   b4792:	bf00      	nop
   b4794:	2003e6d8 	.word	0x2003e6d8
   b4798:	2003e6cc 	.word	0x2003e6cc
   b479c:	ffff0000 	.word	0xffff0000

000b47a0 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b47a0:	b510      	push	{r4, lr}
   b47a2:	4604      	mov	r4, r0
{
    free(buffer);
   b47a4:	6800      	ldr	r0, [r0, #0]
   b47a6:	f7ff ff3f 	bl	b4628 <free>
}
   b47aa:	4620      	mov	r0, r4
   b47ac:	bd10      	pop	{r4, pc}

000b47ae <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b47ae:	b510      	push	{r4, lr}
   b47b0:	4604      	mov	r4, r0
    if (buffer) {
   b47b2:	6800      	ldr	r0, [r0, #0]
   b47b4:	b108      	cbz	r0, b47ba <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b47b6:	f7ff ff37 	bl	b4628 <free>
    }
    buffer = nullptr;
   b47ba:	2300      	movs	r3, #0
    capacity = len = 0;
   b47bc:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b47c0:	6023      	str	r3, [r4, #0]
}
   b47c2:	bd10      	pop	{r4, pc}

000b47c4 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b47c4:	b538      	push	{r3, r4, r5, lr}
   b47c6:	4604      	mov	r4, r0
   b47c8:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b47ca:	6800      	ldr	r0, [r0, #0]
   b47cc:	3101      	adds	r1, #1
   b47ce:	f7ff ff33 	bl	b4638 <realloc>
    if (newbuffer) {
   b47d2:	b110      	cbz	r0, b47da <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
   b47d4:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b47d8:	2001      	movs	r0, #1
    }
    return 0;
}
   b47da:	bd38      	pop	{r3, r4, r5, pc}

000b47dc <_ZN6String7reserveEj>:
{
   b47dc:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
   b47de:	6803      	ldr	r3, [r0, #0]
{
   b47e0:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
   b47e2:	b123      	cbz	r3, b47ee <_ZN6String7reserveEj+0x12>
   b47e4:	6843      	ldr	r3, [r0, #4]
   b47e6:	428b      	cmp	r3, r1
   b47e8:	d301      	bcc.n	b47ee <_ZN6String7reserveEj+0x12>
   b47ea:	2001      	movs	r0, #1
}
   b47ec:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b47ee:	4620      	mov	r0, r4
   b47f0:	f7ff ffe8 	bl	b47c4 <_ZN6String12changeBufferEj>
   b47f4:	2800      	cmp	r0, #0
   b47f6:	d0f9      	beq.n	b47ec <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b47f8:	68a3      	ldr	r3, [r4, #8]
   b47fa:	2b00      	cmp	r3, #0
   b47fc:	d1f5      	bne.n	b47ea <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b47fe:	6822      	ldr	r2, [r4, #0]
   b4800:	7013      	strb	r3, [r2, #0]
   b4802:	e7f2      	b.n	b47ea <_ZN6String7reserveEj+0xe>

000b4804 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4804:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4806:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b4808:	4611      	mov	r1, r2
   b480a:	9201      	str	r2, [sp, #4]
{
   b480c:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b480e:	f7ff ffe5 	bl	b47dc <_ZN6String7reserveEj>
   b4812:	9a01      	ldr	r2, [sp, #4]
   b4814:	b928      	cbnz	r0, b4822 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b4816:	4620      	mov	r0, r4
   b4818:	f7ff ffc9 	bl	b47ae <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b481c:	4620      	mov	r0, r4
   b481e:	b003      	add	sp, #12
   b4820:	bd30      	pop	{r4, r5, pc}
    len = length;
   b4822:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b4824:	4629      	mov	r1, r5
   b4826:	6820      	ldr	r0, [r4, #0]
   b4828:	f000 ffb5 	bl	b5796 <memcpy>
    buffer[len] = 0;
   b482c:	6822      	ldr	r2, [r4, #0]
   b482e:	68a3      	ldr	r3, [r4, #8]
   b4830:	2100      	movs	r1, #0
   b4832:	54d1      	strb	r1, [r2, r3]
    return *this;
   b4834:	e7f2      	b.n	b481c <_ZN6String4copyEPKcj+0x18>

000b4836 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
   b4836:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4838:	b513      	push	{r0, r1, r4, lr}
    capacity = 0;
   b483a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b483e:	4604      	mov	r4, r0
    len = 0;
   b4840:	6083      	str	r3, [r0, #8]
    flags = 0;
   b4842:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   b4844:	b141      	cbz	r1, b4858 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
   b4846:	4608      	mov	r0, r1
   b4848:	9101      	str	r1, [sp, #4]
   b484a:	f7ff fbe7 	bl	b401c <strlen>
   b484e:	9901      	ldr	r1, [sp, #4]
   b4850:	4602      	mov	r2, r0
   b4852:	4620      	mov	r0, r4
   b4854:	f7ff ffd6 	bl	b4804 <_ZN6String4copyEPKcj>
}
   b4858:	4620      	mov	r0, r4
   b485a:	b002      	add	sp, #8
   b485c:	bd10      	pop	{r4, pc}
	...

000b4860 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b4860:	b40e      	push	{r1, r2, r3}
   b4862:	b570      	push	{r4, r5, r6, lr}
   b4864:	b087      	sub	sp, #28
   b4866:	ad0b      	add	r5, sp, #44	; 0x2c
   b4868:	4604      	mov	r4, r0
   b486a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b486e:	9201      	str	r2, [sp, #4]
   b4870:	462b      	mov	r3, r5
   b4872:	2105      	movs	r1, #5
   b4874:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b4876:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b4878:	f7ff fee6 	bl	b4648 <vsnprintf>
    va_end(marker);

    String result;
   b487c:	490b      	ldr	r1, [pc, #44]	; (b48ac <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b487e:	4606      	mov	r6, r0
    String result;
   b4880:	4620      	mov	r0, r4
   b4882:	f7ff ffd8 	bl	b4836 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b4886:	4631      	mov	r1, r6
   b4888:	4620      	mov	r0, r4
   b488a:	f7ff ffa7 	bl	b47dc <_ZN6String7reserveEj>
    if (result.buffer) {
   b488e:	6820      	ldr	r0, [r4, #0]
   b4890:	b130      	cbz	r0, b48a0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b4892:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b4894:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b4896:	462b      	mov	r3, r5
   b4898:	1c71      	adds	r1, r6, #1
   b489a:	f7ff fed5 	bl	b4648 <vsnprintf>
        va_end(marker);
        result.len = n;
   b489e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b48a0:	4620      	mov	r0, r4
   b48a2:	b007      	add	sp, #28
   b48a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b48a8:	b003      	add	sp, #12
   b48aa:	4770      	bx	lr
   b48ac:	000b5948 	.word	0x000b5948

000b48b0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b48b0:	b513      	push	{r0, r1, r4, lr}
   b48b2:	460b      	mov	r3, r1
   b48b4:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b48b6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b48ba:	466c      	mov	r4, sp
   b48bc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b48c0:	e893 0003 	ldmia.w	r3, {r0, r1}
   b48c4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b48c8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b48cc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b48d0:	b002      	add	sp, #8
   b48d2:	bd10      	pop	{r4, pc}

000b48d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b48d4:	4802      	ldr	r0, [pc, #8]	; (b48e0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b48d6:	2300      	movs	r3, #0
   b48d8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b48da:	f7ff bcf1 	b.w	b42c0 <os_mutex_recursive_create>
   b48de:	bf00      	nop
   b48e0:	2003e6dc 	.word	0x2003e6dc

000b48e4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b48e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b48e6:	4606      	mov	r6, r0
   b48e8:	460d      	mov	r5, r1
  size_t n = 0;
   b48ea:	188f      	adds	r7, r1, r2
   b48ec:	2400      	movs	r4, #0
  while (size--) {
   b48ee:	42bd      	cmp	r5, r7
   b48f0:	d00c      	beq.n	b490c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b48f2:	6833      	ldr	r3, [r6, #0]
   b48f4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b48f8:	689b      	ldr	r3, [r3, #8]
   b48fa:	4630      	mov	r0, r6
   b48fc:	4798      	blx	r3
     if (chunk>=0)
   b48fe:	1e03      	subs	r3, r0, #0
   b4900:	db01      	blt.n	b4906 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4902:	441c      	add	r4, r3
  while (size--) {
   b4904:	e7f3      	b.n	b48ee <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4906:	2c00      	cmp	r4, #0
   b4908:	bf08      	it	eq
   b490a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b490c:	4620      	mov	r0, r4
   b490e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4910 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4910:	b513      	push	{r0, r1, r4, lr}
   b4912:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4914:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4916:	b159      	cbz	r1, b4930 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4918:	9101      	str	r1, [sp, #4]
   b491a:	f7ff fb7f 	bl	b401c <strlen>
   b491e:	6823      	ldr	r3, [r4, #0]
   b4920:	9901      	ldr	r1, [sp, #4]
   b4922:	68db      	ldr	r3, [r3, #12]
   b4924:	4602      	mov	r2, r0
   b4926:	4620      	mov	r0, r4
    }
   b4928:	b002      	add	sp, #8
   b492a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b492e:	4718      	bx	r3
    }
   b4930:	b002      	add	sp, #8
   b4932:	bd10      	pop	{r4, pc}

000b4934 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4934:	6803      	ldr	r3, [r0, #0]
   b4936:	689b      	ldr	r3, [r3, #8]
   b4938:	4718      	bx	r3

000b493a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b493a:	b530      	push	{r4, r5, lr}
   b493c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b493e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4940:	2a01      	cmp	r2, #1
  *str = '\0';
   b4942:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4946:	bf98      	it	ls
   b4948:	220a      	movls	r2, #10
   b494a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b494c:	460d      	mov	r5, r1
   b494e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4952:	fb01 5312 	mls	r3, r1, r2, r5
   b4956:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b495a:	2b09      	cmp	r3, #9
   b495c:	bf94      	ite	ls
   b495e:	3330      	addls	r3, #48	; 0x30
   b4960:	3337      	addhi	r3, #55	; 0x37
   b4962:	b2db      	uxtb	r3, r3
  } while(n);
   b4964:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4966:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b496a:	d9ef      	bls.n	b494c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b496c:	4621      	mov	r1, r4
   b496e:	f7ff ffcf 	bl	b4910 <_ZN5Print5writeEPKc>
}
   b4972:	b00b      	add	sp, #44	; 0x2c
   b4974:	bd30      	pop	{r4, r5, pc}
	...

000b4978 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4978:	4b01      	ldr	r3, [pc, #4]	; (b4980 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b497a:	4a02      	ldr	r2, [pc, #8]	; (b4984 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b497c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b497e:	4770      	bx	lr
   b4980:	2003e6e0 	.word	0x2003e6e0
   b4984:	000b5998 	.word	0x000b5998

000b4988 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4988:	4b02      	ldr	r3, [pc, #8]	; (b4994 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b498a:	681a      	ldr	r2, [r3, #0]
   b498c:	4b02      	ldr	r3, [pc, #8]	; (b4998 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b498e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4990:	4770      	bx	lr
   b4992:	bf00      	nop
   b4994:	2003e644 	.word	0x2003e644
   b4998:	2003e6e4 	.word	0x2003e6e4

000b499c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b499c:	2100      	movs	r1, #0
   b499e:	f7ff bd87 	b.w	b44b0 <system_delay_ms>
	...

000b49a4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b49a4:	4b01      	ldr	r3, [pc, #4]	; (b49ac <_GLOBAL__sub_I_RGB+0x8>)
   b49a6:	2200      	movs	r2, #0
   b49a8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b49aa:	4770      	bx	lr
   b49ac:	2003e6e8 	.word	0x2003e6e8

000b49b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b49b0:	4b01      	ldr	r3, [pc, #4]	; (b49b8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b49b2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b49b4:	4770      	bx	lr
   b49b6:	bf00      	nop
   b49b8:	2003e648 	.word	0x2003e648

000b49bc <serialEventRun>:
{
   b49bc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b49be:	4b0b      	ldr	r3, [pc, #44]	; (b49ec <serialEventRun+0x30>)
   b49c0:	b143      	cbz	r3, b49d4 <serialEventRun+0x18>
   b49c2:	f000 fbff 	bl	b51c4 <_Z16_fetch_usbserialv>
   b49c6:	6803      	ldr	r3, [r0, #0]
   b49c8:	691b      	ldr	r3, [r3, #16]
   b49ca:	4798      	blx	r3
   b49cc:	2800      	cmp	r0, #0
   b49ce:	dd01      	ble.n	b49d4 <serialEventRun+0x18>
        serialEvent();
   b49d0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b49d4:	4b06      	ldr	r3, [pc, #24]	; (b49f0 <serialEventRun+0x34>)
   b49d6:	b143      	cbz	r3, b49ea <serialEventRun+0x2e>
   b49d8:	f000 fe6e 	bl	b56b8 <_Z22__fetch_global_Serial1v>
   b49dc:	6803      	ldr	r3, [r0, #0]
   b49de:	691b      	ldr	r3, [r3, #16]
   b49e0:	4798      	blx	r3
   b49e2:	2800      	cmp	r0, #0
   b49e4:	dd01      	ble.n	b49ea <serialEventRun+0x2e>
        serialEvent1();
   b49e6:	f3af 8000 	nop.w
}
   b49ea:	bd08      	pop	{r3, pc}
	...

000b49f4 <_post_loop>:
{
   b49f4:	b508      	push	{r3, lr}
	serialEventRun();
   b49f6:	f7ff ffe1 	bl	b49bc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b49fa:	f7ff fc59 	bl	b42b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b49fe:	4b01      	ldr	r3, [pc, #4]	; (b4a04 <_post_loop+0x10>)
   b4a00:	6018      	str	r0, [r3, #0]
}
   b4a02:	bd08      	pop	{r3, pc}
   b4a04:	2003e740 	.word	0x2003e740

000b4a08 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4a08:	4805      	ldr	r0, [pc, #20]	; (b4a20 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4a0a:	4a06      	ldr	r2, [pc, #24]	; (b4a24 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4a0c:	4906      	ldr	r1, [pc, #24]	; (b4a28 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4a0e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4a10:	1a12      	subs	r2, r2, r0
   b4a12:	f000 fec0 	bl	b5796 <memcpy>
    __backup_sram_signature = signature;
   b4a16:	4b05      	ldr	r3, [pc, #20]	; (b4a2c <_Z33system_initialize_user_backup_ramv+0x24>)
   b4a18:	4a05      	ldr	r2, [pc, #20]	; (b4a30 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4a1a:	601a      	str	r2, [r3, #0]
}
   b4a1c:	bd08      	pop	{r3, pc}
   b4a1e:	bf00      	nop
   b4a20:	2003f400 	.word	0x2003f400
   b4a24:	2003f404 	.word	0x2003f404
   b4a28:	000b5c54 	.word	0x000b5c54
   b4a2c:	2003f400 	.word	0x2003f400
   b4a30:	9a271c1e 	.word	0x9a271c1e

000b4a34 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4a34:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4a36:	2300      	movs	r3, #0
   b4a38:	9300      	str	r3, [sp, #0]
   b4a3a:	461a      	mov	r2, r3
   b4a3c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4a40:	f7ff fd58 	bl	b44f4 <system_ctrl_set_result>
}
   b4a44:	b003      	add	sp, #12
   b4a46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4a4c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4a4c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4a4e:	8843      	ldrh	r3, [r0, #2]
   b4a50:	2b0a      	cmp	r3, #10
   b4a52:	d008      	beq.n	b4a66 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4a54:	2b50      	cmp	r3, #80	; 0x50
   b4a56:	d10b      	bne.n	b4a70 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4a58:	4b09      	ldr	r3, [pc, #36]	; (b4a80 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4a5a:	681b      	ldr	r3, [r3, #0]
   b4a5c:	b14b      	cbz	r3, b4a72 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4a5e:	b003      	add	sp, #12
   b4a60:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4a64:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4a66:	f7ff ffe5 	bl	b4a34 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4a6a:	b003      	add	sp, #12
   b4a6c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4a70:	2300      	movs	r3, #0
   b4a72:	9300      	str	r3, [sp, #0]
   b4a74:	461a      	mov	r2, r3
   b4a76:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4a7a:	f7ff fd3b 	bl	b44f4 <system_ctrl_set_result>
}
   b4a7e:	e7f4      	b.n	b4a6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4a80:	2003e6fc 	.word	0x2003e6fc

000b4a84 <module_user_init_hook>:
{
   b4a84:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4a86:	4812      	ldr	r0, [pc, #72]	; (b4ad0 <module_user_init_hook+0x4c>)
   b4a88:	2100      	movs	r1, #0
   b4a8a:	f7ff fdfd 	bl	b4688 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4a8e:	4b11      	ldr	r3, [pc, #68]	; (b4ad4 <module_user_init_hook+0x50>)
   b4a90:	681a      	ldr	r2, [r3, #0]
   b4a92:	4b11      	ldr	r3, [pc, #68]	; (b4ad8 <module_user_init_hook+0x54>)
   b4a94:	429a      	cmp	r2, r3
   b4a96:	4b11      	ldr	r3, [pc, #68]	; (b4adc <module_user_init_hook+0x58>)
   b4a98:	bf0c      	ite	eq
   b4a9a:	2201      	moveq	r2, #1
   b4a9c:	2200      	movne	r2, #0
   b4a9e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4aa0:	d001      	beq.n	b4aa6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4aa2:	f7ff ffb1 	bl	b4a08 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4aa6:	f7ff fbfb 	bl	b42a0 <HAL_RNG_GetRandomNumber>
   b4aaa:	4604      	mov	r4, r0
    srand(seed);
   b4aac:	f000 fe8a 	bl	b57c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4ab0:	4b0b      	ldr	r3, [pc, #44]	; (b4ae0 <module_user_init_hook+0x5c>)
   b4ab2:	b113      	cbz	r3, b4aba <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4ab4:	4620      	mov	r0, r4
   b4ab6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4aba:	2100      	movs	r1, #0
   b4abc:	4808      	ldr	r0, [pc, #32]	; (b4ae0 <module_user_init_hook+0x5c>)
   b4abe:	f7ff fda3 	bl	b4608 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4ac6:	4807      	ldr	r0, [pc, #28]	; (b4ae4 <module_user_init_hook+0x60>)
   b4ac8:	2100      	movs	r1, #0
   b4aca:	f7ff bd09 	b.w	b44e0 <system_ctrl_set_app_request_handler>
   b4ace:	bf00      	nop
   b4ad0:	000b49b1 	.word	0x000b49b1
   b4ad4:	2003f400 	.word	0x2003f400
   b4ad8:	9a271c1e 	.word	0x9a271c1e
   b4adc:	2003e6f8 	.word	0x2003e6f8
   b4ae0:	00000000 	.word	0x00000000
   b4ae4:	000b4a4d 	.word	0x000b4a4d

000b4ae8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4ae8:	4770      	bx	lr

000b4aea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b4aea:	2000      	movs	r0, #0
   b4aec:	4770      	bx	lr

000b4aee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4aee:	b510      	push	{r4, lr}
   b4af0:	2110      	movs	r1, #16
   b4af2:	4604      	mov	r4, r0
   b4af4:	f7ff fad9 	bl	b40aa <_ZdlPvj>
   b4af8:	4620      	mov	r0, r4
   b4afa:	bd10      	pop	{r4, pc}

000b4afc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b4afc:	b508      	push	{r3, lr}
      { delete this; }
   b4afe:	f7ff fff6 	bl	b4aee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b4b02:	bd08      	pop	{r3, pc}

000b4b04 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b4b04:	b530      	push	{r4, r5, lr}
        type_(type) {
   b4b06:	2200      	movs	r2, #0
   b4b08:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b4b0c:	6002      	str	r2, [r0, #0]
   b4b0e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4b10:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b4b12:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4b14:	680c      	ldr	r4, [r1, #0]
   b4b16:	8085      	strh	r5, [r0, #4]
   b4b18:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4b1a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b4b1c:	bd30      	pop	{r4, r5, pc}

000b4b1e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b4b1e:	b510      	push	{r4, lr}
   b4b20:	4604      	mov	r4, r0
    free((void*)msg_);
   b4b22:	6800      	ldr	r0, [r0, #0]
   b4b24:	f7ff fd80 	bl	b4628 <free>
}
   b4b28:	4620      	mov	r0, r4
   b4b2a:	bd10      	pop	{r4, pc}

000b4b2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4b2c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b4b2e:	68c4      	ldr	r4, [r0, #12]
   b4b30:	b1f4      	cbz	r4, b4b70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4b32:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b4b34:	2b02      	cmp	r3, #2
   b4b36:	d103      	bne.n	b4b40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4b38:	f104 000c 	add.w	r0, r4, #12
   b4b3c:	f7ff ffef 	bl	b4b1e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4b40:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b4b42:	b135      	cbz	r5, b4b52 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b4b44:	4628      	mov	r0, r5
   b4b46:	f7ff fe0f 	bl	b4768 <_ZNSt14_Function_baseD1Ev>
   b4b4a:	2110      	movs	r1, #16
   b4b4c:	4628      	mov	r0, r5
   b4b4e:	f7ff faac 	bl	b40aa <_ZdlPvj>
   b4b52:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b4b54:	b135      	cbz	r5, b4b64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b4b56:	4628      	mov	r0, r5
   b4b58:	f7ff fe06 	bl	b4768 <_ZNSt14_Function_baseD1Ev>
   b4b5c:	2110      	movs	r1, #16
   b4b5e:	4628      	mov	r0, r5
   b4b60:	f7ff faa3 	bl	b40aa <_ZdlPvj>
   b4b64:	4620      	mov	r0, r4
   b4b66:	2114      	movs	r1, #20
   b4b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4b6c:	f7ff ba9d 	b.w	b40aa <_ZdlPvj>
   b4b70:	bd38      	pop	{r3, r4, r5, pc}

000b4b72 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4b72:	680b      	ldr	r3, [r1, #0]
   b4b74:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4b76:	684b      	ldr	r3, [r1, #4]
   b4b78:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4b7a:	b113      	cbz	r3, b4b82 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b4b7c:	685a      	ldr	r2, [r3, #4]
   b4b7e:	3201      	adds	r2, #1
   b4b80:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4b82:	4770      	bx	lr

000b4b84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b4b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4b86:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4b88:	4668      	mov	r0, sp
   b4b8a:	460d      	mov	r5, r1
   b4b8c:	f7ff fff1 	bl	b4b72 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4b90:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4b92:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4b94:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b4b96:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4b98:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4b9a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b4b9c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b4b9e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4ba0:	f7ff fa8d 	bl	b40be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b4ba4:	b135      	cbz	r5, b4bb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b4ba6:	1d28      	adds	r0, r5, #4
   b4ba8:	f7ff fa89 	bl	b40be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4bac:	2108      	movs	r1, #8
   b4bae:	4628      	mov	r0, r5
   b4bb0:	f7ff fa7b 	bl	b40aa <_ZdlPvj>
        return p;
    }
   b4bb4:	4620      	mov	r0, r4
   b4bb6:	b003      	add	sp, #12
   b4bb8:	bd30      	pop	{r4, r5, pc}

000b4bba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4bba:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4bbc:	b510      	push	{r4, lr}
      if (_M_empty())
   b4bbe:	b90a      	cbnz	r2, b4bc4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b4bc0:	f000 fde0 	bl	b5784 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b4bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4bc8:	68c3      	ldr	r3, [r0, #12]
   b4bca:	4718      	bx	r3

000b4bcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4bcc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4bce:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4bd0:	f100 0110 	add.w	r1, r0, #16
   b4bd4:	f7ff fff1 	bl	b4bba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b4bd8:	bd08      	pop	{r3, pc}

000b4bda <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b4bda:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4bdc:	b510      	push	{r4, lr}
      if (_M_empty())
   b4bde:	b90a      	cbnz	r2, b4be4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b4be0:	f000 fdd0 	bl	b5784 <_ZSt25__throw_bad_function_callv>
    }
   b4be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4be8:	68c3      	ldr	r3, [r0, #12]
   b4bea:	4718      	bx	r3

000b4bec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4bec:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4bee:	6800      	ldr	r0, [r0, #0]
   b4bf0:	f100 0110 	add.w	r1, r0, #16
   b4bf4:	f7ff fff1 	bl	b4bda <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b4bf8:	bd08      	pop	{r3, pc}
	...

000b4bfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b4bfc:	b538      	push	{r3, r4, r5, lr}
   b4bfe:	2300      	movs	r3, #0
   b4c00:	4604      	mov	r4, r0
   b4c02:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4c04:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b4c06:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4c08:	f7ff fa4b 	bl	b40a2 <_Znwj>
   b4c0c:	b128      	cbz	r0, b4c1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b4c0e:	2301      	movs	r3, #1
   b4c10:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b4c14:	4b02      	ldr	r3, [pc, #8]	; (b4c20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b4c16:	6003      	str	r3, [r0, #0]
   b4c18:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4c1a:	6020      	str	r0, [r4, #0]
	}
   b4c1c:	4620      	mov	r0, r4
   b4c1e:	bd38      	pop	{r3, r4, r5, pc}
   b4c20:	000b59c0 	.word	0x000b59c0

000b4c24 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b4c24:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4c26:	2300      	movs	r3, #0
   b4c28:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4c2a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4c2c:	4604      	mov	r4, r0
   b4c2e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4c30:	b12b      	cbz	r3, b4c3e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4c32:	2202      	movs	r2, #2
   b4c34:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4c36:	68eb      	ldr	r3, [r5, #12]
   b4c38:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4c3a:	68ab      	ldr	r3, [r5, #8]
   b4c3c:	60a3      	str	r3, [r4, #8]
    }
   b4c3e:	4620      	mov	r0, r4
   b4c40:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4c44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b4c44:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4c46:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4c48:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b4c4a:	4668      	mov	r0, sp
   b4c4c:	f7ff ff5a 	bl	b4b04 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4c50:	f04f 0302 	mov.w	r3, #2
   b4c54:	e8d4 2f4f 	ldrexb	r2, [r4]
   b4c58:	2a00      	cmp	r2, #0
   b4c5a:	d103      	bne.n	b4c64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b4c5c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b4c60:	2900      	cmp	r1, #0
   b4c62:	d1f7      	bne.n	b4c54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b4c64:	d125      	bne.n	b4cb2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b4c66:	f104 050c 	add.w	r5, r4, #12
   b4c6a:	4669      	mov	r1, sp
   b4c6c:	4628      	mov	r0, r5
   b4c6e:	f7ff ff49 	bl	b4b04 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b4c72:	f3bf 8f5b 	dmb	ish
   b4c76:	2301      	movs	r3, #1
   b4c78:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4c7a:	2000      	movs	r0, #0
   b4c7c:	f104 0308 	add.w	r3, r4, #8
   b4c80:	f3bf 8f5b 	dmb	ish
   b4c84:	e853 6f00 	ldrex	r6, [r3]
   b4c88:	e843 0200 	strex	r2, r0, [r3]
   b4c8c:	2a00      	cmp	r2, #0
   b4c8e:	d1f9      	bne.n	b4c84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b4c90:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4c94:	b16e      	cbz	r6, b4cb2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b4c96:	f7ff fc13 	bl	b44c0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4c9a:	b178      	cbz	r0, b4cbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4c9c:	4629      	mov	r1, r5
   b4c9e:	4630      	mov	r0, r6
   b4ca0:	f7ff ff8b 	bl	b4bba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b4ca4:	4630      	mov	r0, r6
   b4ca6:	f7ff fd5f 	bl	b4768 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4caa:	2110      	movs	r1, #16
   b4cac:	4630      	mov	r0, r6
   b4cae:	f7ff f9fc 	bl	b40aa <_ZdlPvj>
        p_->setError(std::move(error));
   b4cb2:	4668      	mov	r0, sp
   b4cb4:	f7ff ff33 	bl	b4b1e <_ZN8particle5ErrorD1Ev>
    }
   b4cb8:	b009      	add	sp, #36	; 0x24
   b4cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4cbc:	4631      	mov	r1, r6
   b4cbe:	a802      	add	r0, sp, #8
   b4cc0:	f7ff ffb0 	bl	b4c24 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4cc4:	68e0      	ldr	r0, [r4, #12]
   b4cc6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4cca:	b108      	cbz	r0, b4cd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b4ccc:	f000 fda8 	bl	b5820 <strdup>
        type_(type) {
   b4cd0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4cd2:	2010      	movs	r0, #16
   b4cd4:	f8ad 501c 	strh.w	r5, [sp, #28]
   b4cd8:	f7ff f9e3 	bl	b40a2 <_Znwj>
   b4cdc:	4605      	mov	r5, r0
   b4cde:	b1e8      	cbz	r0, b4d1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b4ce0:	2700      	movs	r7, #0
   b4ce2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4ce4:	2018      	movs	r0, #24
   b4ce6:	f7ff f9dc 	bl	b40a2 <_Znwj>
   b4cea:	4604      	mov	r4, r0
   b4cec:	b188      	cbz	r0, b4d12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b4cee:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b4cf0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4cf2:	a802      	add	r0, sp, #8
   b4cf4:	f7ff fddc 	bl	b48b0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4cf8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4cfa:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4cfc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4cfe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4d00:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4d02:	a906      	add	r1, sp, #24
   b4d04:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4d06:	60e3      	str	r3, [r4, #12]
   b4d08:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b4d0c:	9205      	str	r2, [sp, #20]
   b4d0e:	f7ff fef9 	bl	b4b04 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b4d12:	4b08      	ldr	r3, [pc, #32]	; (b4d34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b4d14:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4d16:	4b08      	ldr	r3, [pc, #32]	; (b4d38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4d18:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4d1a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b4d1c:	a806      	add	r0, sp, #24
   b4d1e:	f7ff fefe 	bl	b4b1e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4d22:	a802      	add	r0, sp, #8
   b4d24:	f7ff fd20 	bl	b4768 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4d28:	2200      	movs	r2, #0
   b4d2a:	4629      	mov	r1, r5
   b4d2c:	4803      	ldr	r0, [pc, #12]	; (b4d3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b4d2e:	f7ff fbcf 	bl	b44d0 <application_thread_invoke>
   b4d32:	e7b7      	b.n	b4ca4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b4d34:	000b4bcd 	.word	0x000b4bcd
   b4d38:	000b4e51 	.word	0x000b4e51
   b4d3c:	000b52b5 	.word	0x000b52b5

000b4d40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b4d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d44:	b08b      	sub	sp, #44	; 0x2c
   b4d46:	4605      	mov	r5, r0
   b4d48:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4d4c:	460f      	mov	r7, r1
   b4d4e:	4690      	mov	r8, r2
   b4d50:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4d52:	f7ff fc49 	bl	b45e8 <spark_cloud_flag_connected>
   b4d56:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b4d58:	4683      	mov	fp, r0
   b4d5a:	bb38      	cbnz	r0, b4dac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b4d5c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b4d60:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4d62:	a905      	add	r1, sp, #20
   b4d64:	4630      	mov	r0, r6
   b4d66:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4d6a:	f7ff fecb 	bl	b4b04 <_ZN8particle5ErrorC1EOS0_>
   b4d6e:	2014      	movs	r0, #20
   b4d70:	f7ff f997 	bl	b40a2 <_Znwj>
   b4d74:	4604      	mov	r4, r0
   b4d76:	b148      	cbz	r0, b4d8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b4d78:	2302      	movs	r3, #2
   b4d7a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4d7c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4d7e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4d82:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b4d84:	4631      	mov	r1, r6
   b4d86:	300c      	adds	r0, #12
   b4d88:	f7ff febc 	bl	b4b04 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4d8c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b4d8e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4d90:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b4d94:	f7ff ff32 	bl	b4bfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4d98:	4630      	mov	r0, r6
   b4d9a:	f7ff fec0 	bl	b4b1e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b4d9e:	a805      	add	r0, sp, #20
   b4da0:	f7ff febd 	bl	b4b1e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b4da4:	4628      	mov	r0, r5
   b4da6:	b00b      	add	sp, #44	; 0x2c
   b4da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b4dac:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b4dae:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b4db0:	2014      	movs	r0, #20
   b4db2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b4db6:	9307      	str	r3, [sp, #28]
   b4db8:	f7ff f973 	bl	b40a2 <_Znwj>
   b4dbc:	4601      	mov	r1, r0
   b4dbe:	b118      	cbz	r0, b4dc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4dc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b4dc4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4dc6:	7044      	strb	r4, [r0, #1]
   b4dc8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4dca:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b4dcc:	f7ff ff16 	bl	b4bfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b4dd0:	4b1e      	ldr	r3, [pc, #120]	; (b4e4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b4dd2:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b4dd4:	2008      	movs	r0, #8
   b4dd6:	f7ff f964 	bl	b40a2 <_Znwj>
   b4dda:	4604      	mov	r4, r0
   b4ddc:	b110      	cbz	r0, b4de4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b4dde:	a903      	add	r1, sp, #12
   b4de0:	f7ff fec7 	bl	b4b72 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4de4:	9600      	str	r6, [sp, #0]
   b4de6:	fa5f f38a 	uxtb.w	r3, sl
   b4dea:	464a      	mov	r2, r9
   b4dec:	4641      	mov	r1, r8
   b4dee:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b4df0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4df2:	f7ff fc01 	bl	b45f8 <spark_send_event>
   b4df6:	b9b8      	cbnz	r0, b4e28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b4df8:	9b03      	ldr	r3, [sp, #12]
   b4dfa:	785b      	ldrb	r3, [r3, #1]
   b4dfc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b4e00:	b993      	cbnz	r3, b4e28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b4e02:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b4e06:	a905      	add	r1, sp, #20
   b4e08:	a803      	add	r0, sp, #12
   b4e0a:	9205      	str	r2, [sp, #20]
   b4e0c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4e10:	f7ff ff18 	bl	b4c44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4e14:	a805      	add	r0, sp, #20
   b4e16:	f7ff fe82 	bl	b4b1e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b4e1a:	a805      	add	r0, sp, #20
   b4e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b4e1e:	f7ff feb1 	bl	b4b84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b4e22:	a806      	add	r0, sp, #24
   b4e24:	f7ff f94b 	bl	b40be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4e28:	a903      	add	r1, sp, #12
   b4e2a:	a805      	add	r0, sp, #20
   b4e2c:	f7ff fea1 	bl	b4b72 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4e30:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4e32:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4e34:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b4e36:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b4e38:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4e3a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b4e3c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b4e3e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b4e40:	f7ff f93d 	bl	b40be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4e44:	a804      	add	r0, sp, #16
   b4e46:	f7ff f93a 	bl	b40be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b4e4a:	e7ab      	b.n	b4da4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b4e4c:	000b4ecd 	.word	0x000b4ecd

000b4e50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b4e50:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e54:	4605      	mov	r5, r0
	switch (__op)
   b4e56:	d103      	bne.n	b4e60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4e58:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4e5a:	6003      	str	r3, [r0, #0]
      }
   b4e5c:	2000      	movs	r0, #0
   b4e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b4e60:	2a02      	cmp	r2, #2
   b4e62:	d010      	beq.n	b4e86 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b4e64:	2a03      	cmp	r2, #3
   b4e66:	d1f9      	bne.n	b4e5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4e68:	6804      	ldr	r4, [r0, #0]
   b4e6a:	2c00      	cmp	r4, #0
   b4e6c:	d0f6      	beq.n	b4e5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b4e6e:	f104 0010 	add.w	r0, r4, #16
   b4e72:	f7ff fe54 	bl	b4b1e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4e76:	4620      	mov	r0, r4
   b4e78:	f7ff fc76 	bl	b4768 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4e7c:	2118      	movs	r1, #24
   b4e7e:	4620      	mov	r0, r4
   b4e80:	f7ff f913 	bl	b40aa <_ZdlPvj>
   b4e84:	e7ea      	b.n	b4e5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4e86:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b4e88:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4e8a:	f7ff f90a 	bl	b40a2 <_Znwj>
   b4e8e:	4604      	mov	r4, r0
   b4e90:	b150      	cbz	r0, b4ea8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b4e92:	4631      	mov	r1, r6
   b4e94:	f7ff fec6 	bl	b4c24 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4e98:	6930      	ldr	r0, [r6, #16]
   b4e9a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4e9e:	b108      	cbz	r0, b4ea4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b4ea0:	f000 fcbe 	bl	b5820 <strdup>
        type_(type) {
   b4ea4:	6120      	str	r0, [r4, #16]
   b4ea6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b4ea8:	602c      	str	r4, [r5, #0]
	}
   b4eaa:	e7d7      	b.n	b4e5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b4eac <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b4eac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4eae:	2300      	movs	r3, #0
   b4eb0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4eb2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4eb4:	4604      	mov	r4, r0
   b4eb6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4eb8:	b12b      	cbz	r3, b4ec6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4eba:	2202      	movs	r2, #2
   b4ebc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4ebe:	68eb      	ldr	r3, [r5, #12]
   b4ec0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4ec2:	68ab      	ldr	r3, [r5, #8]
   b4ec4:	60a3      	str	r3, [r4, #8]
    }
   b4ec6:	4620      	mov	r0, r4
   b4ec8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4ecc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b4ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4ece:	b089      	sub	sp, #36	; 0x24
   b4ed0:	4604      	mov	r4, r0
   b4ed2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b4ed4:	a801      	add	r0, sp, #4
   b4ed6:	4611      	mov	r1, r2
   b4ed8:	f7ff fe54 	bl	b4b84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b4edc:	b1a4      	cbz	r4, b4f08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b4ede:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4ee0:	b11d      	cbz	r5, b4eea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b4ee2:	4628      	mov	r0, r5
   b4ee4:	f000 fc9c 	bl	b5820 <strdup>
   b4ee8:	4605      	mov	r5, r0
   b4eea:	a801      	add	r0, sp, #4
   b4eec:	a903      	add	r1, sp, #12
        type_(type) {
   b4eee:	9503      	str	r5, [sp, #12]
   b4ef0:	f8ad 4010 	strh.w	r4, [sp, #16]
   b4ef4:	f7ff fea6 	bl	b4c44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4ef8:	a803      	add	r0, sp, #12
   b4efa:	f7ff fe10 	bl	b4b1e <_ZN8particle5ErrorD1Ev>
   b4efe:	a802      	add	r0, sp, #8
   b4f00:	f7ff f8dd 	bl	b40be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4f04:	b009      	add	sp, #36	; 0x24
   b4f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b4f08:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4f0a:	2301      	movs	r3, #1
   b4f0c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b4f10:	2a00      	cmp	r2, #0
   b4f12:	d103      	bne.n	b4f1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b4f14:	e8c5 3f41 	strexb	r1, r3, [r5]
   b4f18:	2900      	cmp	r1, #0
   b4f1a:	d1f7      	bne.n	b4f0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b4f1c:	d1ef      	bne.n	b4efe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b4f1e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b4f20:	f3bf 8f5b 	dmb	ish
   b4f24:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4f26:	1d2b      	adds	r3, r5, #4
   b4f28:	f3bf 8f5b 	dmb	ish
   b4f2c:	e853 6f00 	ldrex	r6, [r3]
   b4f30:	e843 4200 	strex	r2, r4, [r3]
   b4f34:	2a00      	cmp	r2, #0
   b4f36:	d1f9      	bne.n	b4f2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b4f38:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4f3c:	2e00      	cmp	r6, #0
   b4f3e:	d0de      	beq.n	b4efe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b4f40:	4620      	mov	r0, r4
   b4f42:	f7ff fabd 	bl	b44c0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4f46:	4607      	mov	r7, r0
   b4f48:	b160      	cbz	r0, b4f64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4f4a:	f105 010c 	add.w	r1, r5, #12
   b4f4e:	4630      	mov	r0, r6
   b4f50:	f7ff fe43 	bl	b4bda <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b4f54:	4630      	mov	r0, r6
   b4f56:	f7ff fc07 	bl	b4768 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4f5a:	2110      	movs	r1, #16
   b4f5c:	4630      	mov	r0, r6
   b4f5e:	f7ff f8a4 	bl	b40aa <_ZdlPvj>
   b4f62:	e7cc      	b.n	b4efe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4f64:	4631      	mov	r1, r6
   b4f66:	a803      	add	r0, sp, #12
   b4f68:	f7ff ffa0 	bl	b4eac <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4f6c:	7b2b      	ldrb	r3, [r5, #12]
   b4f6e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4f72:	2010      	movs	r0, #16
   b4f74:	f7ff f895 	bl	b40a2 <_Znwj>
   b4f78:	4605      	mov	r5, r0
   b4f7a:	b1d0      	cbz	r0, b4fb2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b4f7c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4f7e:	2014      	movs	r0, #20
   b4f80:	f7ff f88f 	bl	b40a2 <_Znwj>
   b4f84:	4604      	mov	r4, r0
   b4f86:	b178      	cbz	r0, b4fa8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b4f88:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4f8a:	4601      	mov	r1, r0
   b4f8c:	a803      	add	r0, sp, #12
   b4f8e:	f7ff fc8f 	bl	b48b0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4f92:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4f94:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4f96:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4f98:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b4f9a:	9205      	str	r2, [sp, #20]
   b4f9c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4f9e:	60e3      	str	r3, [r4, #12]
   b4fa0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b4fa4:	9206      	str	r2, [sp, #24]
   b4fa6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b4fa8:	4b06      	ldr	r3, [pc, #24]	; (b4fc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b4faa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4fac:	4b06      	ldr	r3, [pc, #24]	; (b4fc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4fae:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4fb0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b4fb2:	a803      	add	r0, sp, #12
   b4fb4:	f7ff fbd8 	bl	b4768 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4fb8:	2200      	movs	r2, #0
   b4fba:	4629      	mov	r1, r5
   b4fbc:	4803      	ldr	r0, [pc, #12]	; (b4fcc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b4fbe:	f7ff fa87 	bl	b44d0 <application_thread_invoke>
   b4fc2:	e7c7      	b.n	b4f54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b4fc4:	000b4bed 	.word	0x000b4bed
   b4fc8:	000b4fd1 	.word	0x000b4fd1
   b4fcc:	000b52b5 	.word	0x000b52b5

000b4fd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b4fd0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4fd2:	b570      	push	{r4, r5, r6, lr}
   b4fd4:	4604      	mov	r4, r0
	switch (__op)
   b4fd6:	d103      	bne.n	b4fe0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4fd8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4fda:	6003      	str	r3, [r0, #0]
      }
   b4fdc:	2000      	movs	r0, #0
   b4fde:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b4fe0:	2a02      	cmp	r2, #2
   b4fe2:	d00c      	beq.n	b4ffe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b4fe4:	2a03      	cmp	r2, #3
   b4fe6:	d1f9      	bne.n	b4fdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4fe8:	6804      	ldr	r4, [r0, #0]
   b4fea:	2c00      	cmp	r4, #0
   b4fec:	d0f6      	beq.n	b4fdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4fee:	4620      	mov	r0, r4
   b4ff0:	f7ff fbba 	bl	b4768 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4ff4:	2114      	movs	r1, #20
   b4ff6:	4620      	mov	r0, r4
   b4ff8:	f7ff f857 	bl	b40aa <_ZdlPvj>
   b4ffc:	e7ee      	b.n	b4fdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4ffe:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5000:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5002:	f7ff f84e 	bl	b40a2 <_Znwj>
   b5006:	4605      	mov	r5, r0
   b5008:	b120      	cbz	r0, b5014 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b500a:	4631      	mov	r1, r6
   b500c:	f7ff ff4e 	bl	b4eac <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5010:	7c33      	ldrb	r3, [r6, #16]
   b5012:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5014:	6025      	str	r5, [r4, #0]
	}
   b5016:	e7e1      	b.n	b4fdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5018 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5018:	4770      	bx	lr

000b501a <_ZN9IPAddressD0Ev>:
   b501a:	b510      	push	{r4, lr}
   b501c:	2118      	movs	r1, #24
   b501e:	4604      	mov	r4, r0
   b5020:	f7ff f843 	bl	b40aa <_ZdlPvj>
   b5024:	4620      	mov	r0, r4
   b5026:	bd10      	pop	{r4, pc}

000b5028 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5028:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b502a:	7d03      	ldrb	r3, [r0, #20]
   b502c:	2b06      	cmp	r3, #6
{
   b502e:	b08d      	sub	sp, #52	; 0x34
   b5030:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5032:	f100 0704 	add.w	r7, r0, #4
   b5036:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b503a:	d012      	beq.n	b5062 <_ZNK9IPAddress7printToER5Print+0x3a>
   b503c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5040:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5044:	220a      	movs	r2, #10
   b5046:	4630      	mov	r0, r6
   b5048:	f7ff fc77 	bl	b493a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b504c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b504e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5050:	d019      	beq.n	b5086 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5052:	2c00      	cmp	r4, #0
   b5054:	d0f4      	beq.n	b5040 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5056:	212e      	movs	r1, #46	; 0x2e
   b5058:	4630      	mov	r0, r6
   b505a:	f7ff fc6b 	bl	b4934 <_ZN5Print5printEc>
   b505e:	4404      	add	r4, r0
   b5060:	e7ee      	b.n	b5040 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5062:	232f      	movs	r3, #47	; 0x2f
   b5064:	466a      	mov	r2, sp
   b5066:	4639      	mov	r1, r7
   b5068:	200a      	movs	r0, #10
		buf[0] = 0;
   b506a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b506e:	f7ff f92f 	bl	b42d0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5072:	4668      	mov	r0, sp
   b5074:	f7fe ffd2 	bl	b401c <strlen>
   b5078:	6833      	ldr	r3, [r6, #0]
   b507a:	4602      	mov	r2, r0
   b507c:	68db      	ldr	r3, [r3, #12]
   b507e:	4669      	mov	r1, sp
   b5080:	4630      	mov	r0, r6
   b5082:	4798      	blx	r3
   b5084:	4604      	mov	r4, r0
    }
    return n;
}
   b5086:	4620      	mov	r0, r4
   b5088:	b00d      	add	sp, #52	; 0x34
   b508a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b508c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b508c:	b510      	push	{r4, lr}
   b508e:	4b05      	ldr	r3, [pc, #20]	; (b50a4 <_ZN9IPAddressC1Ev+0x18>)
   b5090:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5092:	2211      	movs	r2, #17
   b5094:	f840 3b04 	str.w	r3, [r0], #4
   b5098:	2100      	movs	r1, #0
   b509a:	f000 fb8a 	bl	b57b2 <memset>
}
   b509e:	4620      	mov	r0, r4
   b50a0:	bd10      	pop	{r4, pc}
   b50a2:	bf00      	nop
   b50a4:	000b59dc 	.word	0x000b59dc

000b50a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b50a8:	4603      	mov	r3, r0
   b50aa:	4a07      	ldr	r2, [pc, #28]	; (b50c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b50ac:	b510      	push	{r4, lr}
   b50ae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b50b2:	f101 0210 	add.w	r2, r1, #16
   b50b6:	f851 4b04 	ldr.w	r4, [r1], #4
   b50ba:	f843 4b04 	str.w	r4, [r3], #4
   b50be:	4291      	cmp	r1, r2
   b50c0:	d1f9      	bne.n	b50b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b50c2:	780a      	ldrb	r2, [r1, #0]
   b50c4:	701a      	strb	r2, [r3, #0]
}
   b50c6:	bd10      	pop	{r4, pc}
   b50c8:	000b59dc 	.word	0x000b59dc

000b50cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b50cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b50ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b50d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b50d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b50da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b50de:	2304      	movs	r3, #4
   b50e0:	6041      	str	r1, [r0, #4]
   b50e2:	7503      	strb	r3, [r0, #20]
}
   b50e4:	bd10      	pop	{r4, pc}
	...

000b50e8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b50e8:	b507      	push	{r0, r1, r2, lr}
   b50ea:	4b06      	ldr	r3, [pc, #24]	; (b5104 <_ZN9IPAddressC1EPKh+0x1c>)
   b50ec:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b50ee:	78cb      	ldrb	r3, [r1, #3]
   b50f0:	9300      	str	r3, [sp, #0]
   b50f2:	788b      	ldrb	r3, [r1, #2]
   b50f4:	784a      	ldrb	r2, [r1, #1]
   b50f6:	7809      	ldrb	r1, [r1, #0]
   b50f8:	f7ff ffe8 	bl	b50cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b50fc:	b003      	add	sp, #12
   b50fe:	f85d fb04 	ldr.w	pc, [sp], #4
   b5102:	bf00      	nop
   b5104:	000b59dc 	.word	0x000b59dc

000b5108 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5108:	7441      	strb	r1, [r0, #17]
}
   b510a:	4770      	bx	lr

000b510c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b510c:	4770      	bx	lr

000b510e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b510e:	4770      	bx	lr

000b5110 <_ZN9USBSerial4readEv>:
{
   b5110:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5112:	2100      	movs	r1, #0
   b5114:	7c00      	ldrb	r0, [r0, #16]
   b5116:	f7ff f9ab 	bl	b4470 <HAL_USB_USART_Receive_Data>
}
   b511a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b511e:	bd08      	pop	{r3, pc}

000b5120 <_ZN9USBSerial4peekEv>:
{
   b5120:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5122:	2101      	movs	r1, #1
   b5124:	7c00      	ldrb	r0, [r0, #16]
   b5126:	f7ff f9a3 	bl	b4470 <HAL_USB_USART_Receive_Data>
}
   b512a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b512e:	bd08      	pop	{r3, pc}

000b5130 <_ZN9USBSerial17availableForWriteEv>:
{
   b5130:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5132:	7c00      	ldrb	r0, [r0, #16]
   b5134:	f7ff f994 	bl	b4460 <HAL_USB_USART_Available_Data_For_Write>
}
   b5138:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b513c:	bd08      	pop	{r3, pc}

000b513e <_ZN9USBSerial9availableEv>:
{
   b513e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5140:	7c00      	ldrb	r0, [r0, #16]
   b5142:	f7ff f985 	bl	b4450 <HAL_USB_USART_Available_Data>
}
   b5146:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b514a:	bd08      	pop	{r3, pc}

000b514c <_ZN9USBSerial5writeEh>:
{
   b514c:	b513      	push	{r0, r1, r4, lr}
   b514e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5150:	7c00      	ldrb	r0, [r0, #16]
{
   b5152:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5154:	f7ff f984 	bl	b4460 <HAL_USB_USART_Available_Data_For_Write>
   b5158:	2800      	cmp	r0, #0
   b515a:	9901      	ldr	r1, [sp, #4]
   b515c:	dc01      	bgt.n	b5162 <_ZN9USBSerial5writeEh+0x16>
   b515e:	7c60      	ldrb	r0, [r4, #17]
   b5160:	b120      	cbz	r0, b516c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5162:	7c20      	ldrb	r0, [r4, #16]
   b5164:	f7ff f98c 	bl	b4480 <HAL_USB_USART_Send_Data>
   b5168:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b516c:	b002      	add	sp, #8
   b516e:	bd10      	pop	{r4, pc}

000b5170 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5170:	7c00      	ldrb	r0, [r0, #16]
   b5172:	f7ff b98d 	b.w	b4490 <HAL_USB_USART_Flush_Data>

000b5176 <_ZN9USBSerialD0Ev>:
   b5176:	b510      	push	{r4, lr}
   b5178:	2114      	movs	r1, #20
   b517a:	4604      	mov	r4, r0
   b517c:	f7fe ff95 	bl	b40aa <_ZdlPvj>
   b5180:	4620      	mov	r0, r4
   b5182:	bd10      	pop	{r4, pc}

000b5184 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5184:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b518a:	4604      	mov	r4, r0
   b518c:	4608      	mov	r0, r1
   b518e:	2100      	movs	r1, #0
   b5190:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5194:	4b04      	ldr	r3, [pc, #16]	; (b51a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5196:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5198:	2301      	movs	r3, #1
  _serial = serial;
   b519a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b519c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b519e:	4611      	mov	r1, r2
   b51a0:	f7ff f946 	bl	b4430 <HAL_USB_USART_Init>
}
   b51a4:	4620      	mov	r0, r4
   b51a6:	bd10      	pop	{r4, pc}
   b51a8:	000b59f0 	.word	0x000b59f0

000b51ac <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b51ac:	7c00      	ldrb	r0, [r0, #16]
   b51ae:	2200      	movs	r2, #0
   b51b0:	f7ff b946 	b.w	b4440 <HAL_USB_USART_Begin>

000b51b4 <_Z19acquireSerialBufferv>:
{
   b51b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b51b6:	2214      	movs	r2, #20
{
   b51b8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b51ba:	2100      	movs	r1, #0
   b51bc:	f000 faf9 	bl	b57b2 <memset>
}
   b51c0:	4620      	mov	r0, r4
   b51c2:	bd10      	pop	{r4, pc}

000b51c4 <_Z16_fetch_usbserialv>:
{
   b51c4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b51c6:	4c0f      	ldr	r4, [pc, #60]	; (b5204 <_Z16_fetch_usbserialv+0x40>)
{
   b51c8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b51ca:	a803      	add	r0, sp, #12
   b51cc:	f7ff fff2 	bl	b51b4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b51d0:	7821      	ldrb	r1, [r4, #0]
   b51d2:	f3bf 8f5b 	dmb	ish
   b51d6:	f011 0101 	ands.w	r1, r1, #1
   b51da:	d10f      	bne.n	b51fc <_Z16_fetch_usbserialv+0x38>
   b51dc:	4620      	mov	r0, r4
   b51de:	9101      	str	r1, [sp, #4]
   b51e0:	f7fe ff65 	bl	b40ae <__cxa_guard_acquire>
   b51e4:	9901      	ldr	r1, [sp, #4]
   b51e6:	b148      	cbz	r0, b51fc <_Z16_fetch_usbserialv+0x38>
   b51e8:	aa03      	add	r2, sp, #12
   b51ea:	4807      	ldr	r0, [pc, #28]	; (b5208 <_Z16_fetch_usbserialv+0x44>)
   b51ec:	f7ff ffca 	bl	b5184 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b51f0:	4620      	mov	r0, r4
   b51f2:	f7fe ff61 	bl	b40b8 <__cxa_guard_release>
   b51f6:	4805      	ldr	r0, [pc, #20]	; (b520c <_Z16_fetch_usbserialv+0x48>)
   b51f8:	f000 fac7 	bl	b578a <atexit>
	return _usbserial;
}
   b51fc:	4802      	ldr	r0, [pc, #8]	; (b5208 <_Z16_fetch_usbserialv+0x44>)
   b51fe:	b008      	add	sp, #32
   b5200:	bd10      	pop	{r4, pc}
   b5202:	bf00      	nop
   b5204:	2003e700 	.word	0x2003e700
   b5208:	2003e704 	.word	0x2003e704
   b520c:	000b510d 	.word	0x000b510d

000b5210 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5210:	4770      	bx	lr

000b5212 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5212:	7441      	strb	r1, [r0, #17]
}
   b5214:	4770      	bx	lr

000b5216 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5216:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5218:	7c00      	ldrb	r0, [r0, #16]
   b521a:	f7ff f891 	bl	b4340 <hal_usart_available_data_for_write>
}
   b521e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5222:	bd08      	pop	{r3, pc}

000b5224 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5224:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5226:	7c00      	ldrb	r0, [r0, #16]
   b5228:	f7ff f862 	bl	b42f0 <hal_usart_available>
}
   b522c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5230:	bd08      	pop	{r3, pc}

000b5232 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5232:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5234:	7c00      	ldrb	r0, [r0, #16]
   b5236:	f7ff f86b 	bl	b4310 <hal_usart_peek>
}
   b523a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b523e:	bd08      	pop	{r3, pc}

000b5240 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5240:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5242:	7c00      	ldrb	r0, [r0, #16]
   b5244:	f7ff f85c 	bl	b4300 <hal_usart_read>
}
   b5248:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b524c:	bd08      	pop	{r3, pc}

000b524e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b524e:	7c00      	ldrb	r0, [r0, #16]
   b5250:	f7ff b866 	b.w	b4320 <hal_usart_flush>

000b5254 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5254:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5256:	7c45      	ldrb	r5, [r0, #17]
{
   b5258:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b525a:	b12d      	cbz	r5, b5268 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b525c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b525e:	b003      	add	sp, #12
   b5260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5264:	f7ff b83c 	b.w	b42e0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5268:	7c00      	ldrb	r0, [r0, #16]
   b526a:	9101      	str	r1, [sp, #4]
   b526c:	f7ff f868 	bl	b4340 <hal_usart_available_data_for_write>
   b5270:	2800      	cmp	r0, #0
   b5272:	9901      	ldr	r1, [sp, #4]
   b5274:	dcf2      	bgt.n	b525c <_ZN11USARTSerial5writeEh+0x8>
}
   b5276:	4628      	mov	r0, r5
   b5278:	b003      	add	sp, #12
   b527a:	bd30      	pop	{r4, r5, pc}

000b527c <_ZN11USARTSerialD0Ev>:
   b527c:	b510      	push	{r4, lr}
   b527e:	2114      	movs	r1, #20
   b5280:	4604      	mov	r4, r0
   b5282:	f7fe ff12 	bl	b40aa <_ZdlPvj>
   b5286:	4620      	mov	r0, r4
   b5288:	bd10      	pop	{r4, pc}
	...

000b528c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b528c:	b510      	push	{r4, lr}
   b528e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5292:	4604      	mov	r4, r0
   b5294:	4608      	mov	r0, r1
   b5296:	4611      	mov	r1, r2
   b5298:	2200      	movs	r2, #0
   b529a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b529e:	4b04      	ldr	r3, [pc, #16]	; (b52b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b52a0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b52a2:	2301      	movs	r3, #1
  _serial = serial;
   b52a4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b52a6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b52a8:	f7ff f852 	bl	b4350 <hal_usart_init_ex>
}
   b52ac:	4620      	mov	r0, r4
   b52ae:	bd10      	pop	{r4, pc}
   b52b0:	000b5a20 	.word	0x000b5a20

000b52b4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b52b4:	b510      	push	{r4, lr}
      if (_M_empty())
   b52b6:	6883      	ldr	r3, [r0, #8]
   b52b8:	4604      	mov	r4, r0
   b52ba:	b90b      	cbnz	r3, b52c0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b52bc:	f000 fa62 	bl	b5784 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b52c0:	68c3      	ldr	r3, [r0, #12]
   b52c2:	4798      	blx	r3
      if (_M_manager)
   b52c4:	68a3      	ldr	r3, [r4, #8]
   b52c6:	b11b      	cbz	r3, b52d0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b52c8:	2203      	movs	r2, #3
   b52ca:	4621      	mov	r1, r4
   b52cc:	4620      	mov	r0, r4
   b52ce:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b52d0:	4620      	mov	r0, r4
   b52d2:	2110      	movs	r1, #16
}
   b52d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b52d8:	f7fe bee7 	b.w	b40aa <_ZdlPvj>

000b52dc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b52dc:	4770      	bx	lr

000b52de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b52de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b52e0:	4606      	mov	r6, r0
   b52e2:	4615      	mov	r5, r2
   b52e4:	460c      	mov	r4, r1
   b52e6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b52e8:	42bc      	cmp	r4, r7
   b52ea:	d006      	beq.n	b52fa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b52ec:	6833      	ldr	r3, [r6, #0]
   b52ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   b52f2:	689b      	ldr	r3, [r3, #8]
   b52f4:	4630      	mov	r0, r6
   b52f6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b52f8:	e7f6      	b.n	b52e8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b52fa:	4628      	mov	r0, r5
   b52fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b52fe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b52fe:	7c00      	ldrb	r0, [r0, #16]
   b5300:	2200      	movs	r2, #0
   b5302:	f7ff b82d 	b.w	b4360 <hal_i2c_write>

000b5306 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5306:	7c00      	ldrb	r0, [r0, #16]
   b5308:	2100      	movs	r1, #0
   b530a:	f7ff b831 	b.w	b4370 <hal_i2c_available>

000b530e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b530e:	7c00      	ldrb	r0, [r0, #16]
   b5310:	2100      	movs	r1, #0
   b5312:	f7ff b835 	b.w	b4380 <hal_i2c_read>

000b5316 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5316:	7c00      	ldrb	r0, [r0, #16]
   b5318:	2100      	movs	r1, #0
   b531a:	f7ff b839 	b.w	b4390 <hal_i2c_peek>

000b531e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b531e:	7c00      	ldrb	r0, [r0, #16]
   b5320:	2100      	movs	r1, #0
   b5322:	f7ff b83d 	b.w	b43a0 <hal_i2c_flush>

000b5326 <_ZN7TwoWireD0Ev>:
   b5326:	b510      	push	{r4, lr}
   b5328:	2114      	movs	r1, #20
   b532a:	4604      	mov	r4, r0
   b532c:	f7fe febd 	bl	b40aa <_ZdlPvj>
   b5330:	4620      	mov	r0, r4
   b5332:	bd10      	pop	{r4, pc}

000b5334 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5334:	b538      	push	{r3, r4, r5, lr}
   b5336:	4604      	mov	r4, r0
   b5338:	4615      	mov	r5, r2
   b533a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b533e:	2200      	movs	r2, #0
   b5340:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5344:	4b09      	ldr	r3, [pc, #36]	; (b536c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5346:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5348:	4608      	mov	r0, r1
   b534a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b534c:	4629      	mov	r1, r5
   b534e:	f7ff f837 	bl	b43c0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5352:	30bf      	adds	r0, #191	; 0xbf
   b5354:	d108      	bne.n	b5368 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5356:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5358:	07db      	lsls	r3, r3, #31
   b535a:	d505      	bpl.n	b5368 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b535c:	6868      	ldr	r0, [r5, #4]
   b535e:	f7ff f963 	bl	b4628 <free>
    free(conf.tx_buffer);
   b5362:	68e8      	ldr	r0, [r5, #12]
   b5364:	f7ff f960 	bl	b4628 <free>
}
   b5368:	4620      	mov	r0, r4
   b536a:	bd38      	pop	{r3, r4, r5, pc}
   b536c:	000b5a50 	.word	0x000b5a50

000b5370 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5370:	2200      	movs	r2, #0
   b5372:	6840      	ldr	r0, [r0, #4]
   b5374:	4611      	mov	r1, r2
   b5376:	f7ff b8df 	b.w	b4538 <network_ready>

000b537a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b537a:	2200      	movs	r2, #0
   b537c:	6840      	ldr	r0, [r0, #4]
   b537e:	4611      	mov	r1, r2
   b5380:	f7ff b8fa 	b.w	b4578 <network_listening>

000b5384 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5384:	2200      	movs	r2, #0
   b5386:	6840      	ldr	r0, [r0, #4]
   b5388:	4611      	mov	r1, r2
   b538a:	f7ff b905 	b.w	b4598 <network_get_listen_timeout>

000b538e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b538e:	6840      	ldr	r0, [r0, #4]
   b5390:	2200      	movs	r2, #0
   b5392:	f7ff b8f9 	b.w	b4588 <network_set_listen_timeout>

000b5396 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5396:	6840      	ldr	r0, [r0, #4]
   b5398:	2200      	movs	r2, #0
   b539a:	f081 0101 	eor.w	r1, r1, #1
   b539e:	f7ff b8e3 	b.w	b4568 <network_listen>

000b53a2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b53a2:	2300      	movs	r3, #0
   b53a4:	6840      	ldr	r0, [r0, #4]
   b53a6:	461a      	mov	r2, r3
   b53a8:	4619      	mov	r1, r3
   b53aa:	f7ff b8d5 	b.w	b4558 <network_off>

000b53ae <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b53ae:	2300      	movs	r3, #0
   b53b0:	6840      	ldr	r0, [r0, #4]
   b53b2:	461a      	mov	r2, r3
   b53b4:	4619      	mov	r1, r3
   b53b6:	f7ff b8c7 	b.w	b4548 <network_on>

000b53ba <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b53ba:	2200      	movs	r2, #0
   b53bc:	6840      	ldr	r0, [r0, #4]
   b53be:	4611      	mov	r1, r2
   b53c0:	f7ff b8aa 	b.w	b4518 <network_connecting>

000b53c4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b53c4:	6840      	ldr	r0, [r0, #4]
   b53c6:	2200      	movs	r2, #0
   b53c8:	2102      	movs	r1, #2
   b53ca:	f7ff b8ad 	b.w	b4528 <network_disconnect>

000b53ce <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b53ce:	2300      	movs	r3, #0
   b53d0:	6840      	ldr	r0, [r0, #4]
   b53d2:	461a      	mov	r2, r3
   b53d4:	f7ff b898 	b.w	b4508 <network_connect>

000b53d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b53d8:	4b02      	ldr	r3, [pc, #8]	; (b53e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b53da:	2204      	movs	r2, #4
   b53dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b53de:	4a02      	ldr	r2, [pc, #8]	; (b53e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b53e0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b53e2:	4770      	bx	lr
   b53e4:	2003e718 	.word	0x2003e718
   b53e8:	000b5a78 	.word	0x000b5a78

000b53ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b53ec:	2300      	movs	r3, #0
   b53ee:	6840      	ldr	r0, [r0, #4]
   b53f0:	461a      	mov	r2, r3
   b53f2:	f7ff b889 	b.w	b4508 <network_connect>

000b53f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b53f6:	6840      	ldr	r0, [r0, #4]
   b53f8:	2200      	movs	r2, #0
   b53fa:	2102      	movs	r1, #2
   b53fc:	f7ff b894 	b.w	b4528 <network_disconnect>

000b5400 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5400:	2200      	movs	r2, #0
   b5402:	6840      	ldr	r0, [r0, #4]
   b5404:	4611      	mov	r1, r2
   b5406:	f7ff b887 	b.w	b4518 <network_connecting>

000b540a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b540a:	2200      	movs	r2, #0
   b540c:	6840      	ldr	r0, [r0, #4]
   b540e:	4611      	mov	r1, r2
   b5410:	f7ff b892 	b.w	b4538 <network_ready>

000b5414 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5414:	2300      	movs	r3, #0
   b5416:	6840      	ldr	r0, [r0, #4]
   b5418:	461a      	mov	r2, r3
   b541a:	4619      	mov	r1, r3
   b541c:	f7ff b894 	b.w	b4548 <network_on>

000b5420 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5420:	2300      	movs	r3, #0
   b5422:	6840      	ldr	r0, [r0, #4]
   b5424:	461a      	mov	r2, r3
   b5426:	4619      	mov	r1, r3
   b5428:	f7ff b896 	b.w	b4558 <network_off>

000b542c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b542c:	6840      	ldr	r0, [r0, #4]
   b542e:	2100      	movs	r1, #0
   b5430:	f7ff b8ba 	b.w	b45a8 <network_is_on>

000b5434 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5434:	6840      	ldr	r0, [r0, #4]
   b5436:	2100      	movs	r1, #0
   b5438:	f7ff b8be 	b.w	b45b8 <network_is_off>

000b543c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b543c:	6840      	ldr	r0, [r0, #4]
   b543e:	2200      	movs	r2, #0
   b5440:	f081 0101 	eor.w	r1, r1, #1
   b5444:	f7ff b890 	b.w	b4568 <network_listen>

000b5448 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5448:	6840      	ldr	r0, [r0, #4]
   b544a:	2200      	movs	r2, #0
   b544c:	f7ff b89c 	b.w	b4588 <network_set_listen_timeout>

000b5450 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5450:	2200      	movs	r2, #0
   b5452:	6840      	ldr	r0, [r0, #4]
   b5454:	4611      	mov	r1, r2
   b5456:	f7ff b89f 	b.w	b4598 <network_get_listen_timeout>

000b545a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b545a:	2200      	movs	r2, #0
   b545c:	6840      	ldr	r0, [r0, #4]
   b545e:	4611      	mov	r1, r2
   b5460:	f7ff b88a 	b.w	b4578 <network_listening>

000b5464 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_preferred(*this, preferred, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b5464:	6840      	ldr	r0, [r0, #4]
   b5466:	2100      	movs	r1, #0
   b5468:	f7ff b8b6 	b.w	b45d8 <network_is_preferred>

000b546c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b546c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5470:	b095      	sub	sp, #84	; 0x54
   b5472:	4614      	mov	r4, r2
   b5474:	460d      	mov	r5, r1
   b5476:	4607      	mov	r7, r0
    IPAddress addr;
   b5478:	f7ff fe08 	bl	b508c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b547c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b547e:	221c      	movs	r2, #28
   b5480:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5482:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5484:	f000 f995 	bl	b57b2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5488:	2340      	movs	r3, #64	; 0x40
   b548a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b548c:	4620      	mov	r0, r4
   b548e:	466b      	mov	r3, sp
   b5490:	aa0c      	add	r2, sp, #48	; 0x30
   b5492:	2100      	movs	r1, #0
   b5494:	f7fe fed4 	bl	b4240 <netdb_getaddrinfo>
    if (!r) {
   b5498:	4604      	mov	r4, r0
   b549a:	2800      	cmp	r0, #0
   b549c:	d14b      	bne.n	b5536 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b549e:	4602      	mov	r2, r0
   b54a0:	2101      	movs	r1, #1
   b54a2:	6868      	ldr	r0, [r5, #4]
   b54a4:	f7ff f848 	bl	b4538 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b54a8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b54aa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b54ac:	4622      	mov	r2, r4
   b54ae:	6868      	ldr	r0, [r5, #4]
   b54b0:	f7ff f842 	bl	b4538 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b54b4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b54b6:	4681      	mov	r9, r0
        bool ok = false;
   b54b8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b54ba:	2e00      	cmp	r6, #0
   b54bc:	d03b      	beq.n	b5536 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b54be:	2900      	cmp	r1, #0
   b54c0:	d139      	bne.n	b5536 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b54c2:	6873      	ldr	r3, [r6, #4]
   b54c4:	2b02      	cmp	r3, #2
   b54c6:	d003      	beq.n	b54d0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b54c8:	2b0a      	cmp	r3, #10
   b54ca:	d011      	beq.n	b54f0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b54cc:	69f6      	ldr	r6, [r6, #28]
   b54ce:	e7f4      	b.n	b54ba <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b54d0:	f1b8 0f00 	cmp.w	r8, #0
   b54d4:	d0fa      	beq.n	b54cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b54d6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b54d8:	a806      	add	r0, sp, #24
   b54da:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b54dc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b54de:	f7ff fe03 	bl	b50e8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b54e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b54e4:	1d3c      	adds	r4, r7, #4
   b54e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b54e8:	682b      	ldr	r3, [r5, #0]
   b54ea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b54ec:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b54ee:	e7ed      	b.n	b54cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b54f0:	f1b9 0f00 	cmp.w	r9, #0
   b54f4:	d0ea      	beq.n	b54cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b54f6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b54f8:	2210      	movs	r2, #16
   b54fa:	a801      	add	r0, sp, #4
   b54fc:	f000 f959 	bl	b57b2 <memset>
                    a.v = 6;
   b5500:	2306      	movs	r3, #6
   b5502:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5506:	ad01      	add	r5, sp, #4
   b5508:	f104 0308 	add.w	r3, r4, #8
   b550c:	3418      	adds	r4, #24
   b550e:	6818      	ldr	r0, [r3, #0]
   b5510:	6859      	ldr	r1, [r3, #4]
   b5512:	462a      	mov	r2, r5
   b5514:	c203      	stmia	r2!, {r0, r1}
   b5516:	3308      	adds	r3, #8
   b5518:	42a3      	cmp	r3, r4
   b551a:	4615      	mov	r5, r2
   b551c:	d1f7      	bne.n	b550e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b551e:	a901      	add	r1, sp, #4
   b5520:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5522:	ad07      	add	r5, sp, #28
   b5524:	f7ff fdc0 	bl	b50a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b552a:	1d3c      	adds	r4, r7, #4
   b552c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b552e:	682b      	ldr	r3, [r5, #0]
   b5530:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5532:	4649      	mov	r1, r9
   b5534:	e7ca      	b.n	b54cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5536:	9800      	ldr	r0, [sp, #0]
   b5538:	f7fe fe7a 	bl	b4230 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b553c:	4638      	mov	r0, r7
   b553e:	b015      	add	sp, #84	; 0x54
   b5540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5544 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b5544:	3803      	subs	r0, #3
   b5546:	2802      	cmp	r0, #2
   b5548:	bf9a      	itte	ls
   b554a:	4b02      	ldrls	r3, [pc, #8]	; (b5554 <_ZN5spark12NetworkClass4fromEm+0x10>)
   b554c:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b5550:	4801      	ldrhi	r0, [pc, #4]	; (b5558 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   b5552:	4770      	bx	lr
   b5554:	000b5ab4 	.word	0x000b5ab4
   b5558:	2003e720 	.word	0x2003e720

000b555c <_ZN5spark12NetworkClass9preferredEb>:
NetworkClass& NetworkClass::preferred(bool preferred) {
   b555c:	b508      	push	{r3, lr}
    network_handle_t network = network_preferred(*this, preferred, nullptr);
   b555e:	2200      	movs	r2, #0
   b5560:	6840      	ldr	r0, [r0, #4]
   b5562:	f7ff f831 	bl	b45c8 <network_preferred>
}
   b5566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b556a:	f7ff bfeb 	b.w	b5544 <_ZN5spark12NetworkClass4fromEm>
	...

000b5570 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5570:	4b02      	ldr	r3, [pc, #8]	; (b557c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5572:	4a03      	ldr	r2, [pc, #12]	; (b5580 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5574:	601a      	str	r2, [r3, #0]
   b5576:	2200      	movs	r2, #0
   b5578:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b557a:	4770      	bx	lr
   b557c:	2003e720 	.word	0x2003e720
   b5580:	000b5ac8 	.word	0x000b5ac8

000b5584 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5584:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5586:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5588:	d902      	bls.n	b5590 <pinAvailable+0xc>
    return false;
   b558a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b558c:	b002      	add	sp, #8
   b558e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5590:	f1a0 030b 	sub.w	r3, r0, #11
   b5594:	2b02      	cmp	r3, #2
   b5596:	d81a      	bhi.n	b55ce <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5598:	4c17      	ldr	r4, [pc, #92]	; (b55f8 <pinAvailable+0x74>)
   b559a:	7821      	ldrb	r1, [r4, #0]
   b559c:	f3bf 8f5b 	dmb	ish
   b55a0:	f011 0101 	ands.w	r1, r1, #1
   b55a4:	d10b      	bne.n	b55be <pinAvailable+0x3a>
   b55a6:	4620      	mov	r0, r4
   b55a8:	9101      	str	r1, [sp, #4]
   b55aa:	f7fe fd80 	bl	b40ae <__cxa_guard_acquire>
   b55ae:	9901      	ldr	r1, [sp, #4]
   b55b0:	b128      	cbz	r0, b55be <pinAvailable+0x3a>
   b55b2:	4812      	ldr	r0, [pc, #72]	; (b55fc <pinAvailable+0x78>)
   b55b4:	f7ff f8b4 	bl	b4720 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b55b8:	4620      	mov	r0, r4
   b55ba:	f7fe fd7d 	bl	b40b8 <__cxa_guard_release>
   b55be:	4b0f      	ldr	r3, [pc, #60]	; (b55fc <pinAvailable+0x78>)
   b55c0:	7818      	ldrb	r0, [r3, #0]
   b55c2:	f7fe ff1d 	bl	b4400 <hal_spi_is_enabled>
   b55c6:	2800      	cmp	r0, #0
   b55c8:	d1df      	bne.n	b558a <pinAvailable+0x6>
  return true; // 'pin' is available
   b55ca:	2001      	movs	r0, #1
   b55cc:	e7de      	b.n	b558c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b55ce:	2801      	cmp	r0, #1
   b55d0:	d809      	bhi.n	b55e6 <pinAvailable+0x62>
   b55d2:	f000 f8b1 	bl	b5738 <_Z19__fetch_global_Wirev>
   b55d6:	2100      	movs	r1, #0
   b55d8:	7c00      	ldrb	r0, [r0, #16]
   b55da:	f7fe fee9 	bl	b43b0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b55de:	f080 0001 	eor.w	r0, r0, #1
   b55e2:	b2c0      	uxtb	r0, r0
   b55e4:	e7d2      	b.n	b558c <pinAvailable+0x8>
   b55e6:	3809      	subs	r0, #9
   b55e8:	2801      	cmp	r0, #1
   b55ea:	d8ee      	bhi.n	b55ca <pinAvailable+0x46>
   b55ec:	f000 f864 	bl	b56b8 <_Z22__fetch_global_Serial1v>
   b55f0:	7c00      	ldrb	r0, [r0, #16]
   b55f2:	f7fe fe9d 	bl	b4330 <hal_usart_is_enabled>
   b55f6:	e7f2      	b.n	b55de <pinAvailable+0x5a>
   b55f8:	2003e6b0 	.word	0x2003e6b0
   b55fc:	2003e6b4 	.word	0x2003e6b4

000b5600 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5600:	2823      	cmp	r0, #35	; 0x23
{
   b5602:	b538      	push	{r3, r4, r5, lr}
   b5604:	4604      	mov	r4, r0
   b5606:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5608:	d80a      	bhi.n	b5620 <pinMode+0x20>
   b560a:	29ff      	cmp	r1, #255	; 0xff
   b560c:	d008      	beq.n	b5620 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b560e:	f7ff ffb9 	bl	b5584 <pinAvailable>
   b5612:	b128      	cbz	r0, b5620 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b5614:	4629      	mov	r1, r5
   b5616:	4620      	mov	r0, r4
}
   b5618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b561c:	f7fe be20 	b.w	b4260 <hal_gpio_mode>
}
   b5620:	bd38      	pop	{r3, r4, r5, pc}

000b5622 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b5622:	b538      	push	{r3, r4, r5, lr}
   b5624:	4604      	mov	r4, r0
   b5626:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b5628:	f7fe fe22 	bl	b4270 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b562c:	28ff      	cmp	r0, #255	; 0xff
   b562e:	d010      	beq.n	b5652 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5630:	2806      	cmp	r0, #6
   b5632:	d804      	bhi.n	b563e <digitalWrite+0x1c>
   b5634:	234d      	movs	r3, #77	; 0x4d
   b5636:	fa23 f000 	lsr.w	r0, r3, r0
   b563a:	07c3      	lsls	r3, r0, #31
   b563c:	d409      	bmi.n	b5652 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b563e:	4620      	mov	r0, r4
   b5640:	f7ff ffa0 	bl	b5584 <pinAvailable>
   b5644:	b128      	cbz	r0, b5652 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b5646:	4629      	mov	r1, r5
   b5648:	4620      	mov	r0, r4
}
   b564a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b564e:	f7fe be17 	b.w	b4280 <hal_gpio_write>
}
   b5652:	bd38      	pop	{r3, r4, r5, pc}

000b5654 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b5654:	280d      	cmp	r0, #13
{
   b5656:	b510      	push	{r4, lr}
   b5658:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b565a:	bf9c      	itt	ls
   b565c:	340e      	addls	r4, #14
   b565e:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b5660:	4620      	mov	r0, r4
   b5662:	f7ff ff8f 	bl	b5584 <pinAvailable>
   b5666:	b150      	cbz	r0, b567e <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b5668:	2103      	movs	r1, #3
   b566a:	4620      	mov	r0, r4
   b566c:	f7fe fdf0 	bl	b4250 <hal_pin_validate_function>
   b5670:	2803      	cmp	r0, #3
   b5672:	d104      	bne.n	b567e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b5674:	4620      	mov	r0, r4
}
   b5676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b567a:	f7fe be09 	b.w	b4290 <hal_adc_read>
}
   b567e:	2000      	movs	r0, #0
   b5680:	bd10      	pop	{r4, pc}

000b5682 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5682:	4770      	bx	lr

000b5684 <_Z20acquireSerial1Bufferv>:
{
   b5684:	b538      	push	{r3, r4, r5, lr}
   b5686:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5688:	2514      	movs	r5, #20
   b568a:	462a      	mov	r2, r5
   b568c:	2100      	movs	r1, #0
   b568e:	f000 f890 	bl	b57b2 <memset>
   b5692:	8025      	strh	r5, [r4, #0]
   b5694:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5696:	4907      	ldr	r1, [pc, #28]	; (b56b4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5698:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b569a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b569c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b569e:	f000 f86f 	bl	b5780 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b56a2:	4904      	ldr	r1, [pc, #16]	; (b56b4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b56a4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b56a6:	4628      	mov	r0, r5
   b56a8:	f000 f86a 	bl	b5780 <_ZnajRKSt9nothrow_t>
    };
   b56ac:	60e0      	str	r0, [r4, #12]
}
   b56ae:	4620      	mov	r0, r4
   b56b0:	bd38      	pop	{r3, r4, r5, pc}
   b56b2:	bf00      	nop
   b56b4:	000b5b04 	.word	0x000b5b04

000b56b8 <_Z22__fetch_global_Serial1v>:
{
   b56b8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b56ba:	4d0e      	ldr	r5, [pc, #56]	; (b56f4 <_Z22__fetch_global_Serial1v+0x3c>)
   b56bc:	7829      	ldrb	r1, [r5, #0]
   b56be:	f3bf 8f5b 	dmb	ish
   b56c2:	f011 0401 	ands.w	r4, r1, #1
{
   b56c6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b56c8:	d111      	bne.n	b56ee <_Z22__fetch_global_Serial1v+0x36>
   b56ca:	4628      	mov	r0, r5
   b56cc:	f7fe fcef 	bl	b40ae <__cxa_guard_acquire>
   b56d0:	b168      	cbz	r0, b56ee <_Z22__fetch_global_Serial1v+0x36>
   b56d2:	a801      	add	r0, sp, #4
   b56d4:	f7ff ffd6 	bl	b5684 <_Z20acquireSerial1Bufferv>
   b56d8:	aa01      	add	r2, sp, #4
   b56da:	4621      	mov	r1, r4
   b56dc:	4806      	ldr	r0, [pc, #24]	; (b56f8 <_Z22__fetch_global_Serial1v+0x40>)
   b56de:	f7ff fdd5 	bl	b528c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b56e2:	4628      	mov	r0, r5
   b56e4:	f7fe fce8 	bl	b40b8 <__cxa_guard_release>
   b56e8:	4804      	ldr	r0, [pc, #16]	; (b56fc <_Z22__fetch_global_Serial1v+0x44>)
   b56ea:	f000 f84e 	bl	b578a <atexit>
    return serial1;
}
   b56ee:	4802      	ldr	r0, [pc, #8]	; (b56f8 <_Z22__fetch_global_Serial1v+0x40>)
   b56f0:	b007      	add	sp, #28
   b56f2:	bd30      	pop	{r4, r5, pc}
   b56f4:	2003e728 	.word	0x2003e728
   b56f8:	2003e72c 	.word	0x2003e72c
   b56fc:	000b5683 	.word	0x000b5683

000b5700 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5700:	4770      	bx	lr
	...

000b5704 <_Z17acquireWireBufferv>:
{
   b5704:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5706:	4b0a      	ldr	r3, [pc, #40]	; (b5730 <_Z17acquireWireBufferv+0x2c>)
   b5708:	6003      	str	r3, [r0, #0]
   b570a:	2301      	movs	r3, #1
{
   b570c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b570e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5710:	4908      	ldr	r1, [pc, #32]	; (b5734 <_Z17acquireWireBufferv+0x30>)
   b5712:	2020      	movs	r0, #32
   b5714:	f000 f834 	bl	b5780 <_ZnajRKSt9nothrow_t>
	};
   b5718:	2520      	movs	r5, #32
   b571a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b571c:	4905      	ldr	r1, [pc, #20]	; (b5734 <_Z17acquireWireBufferv+0x30>)
	};
   b571e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5720:	4628      	mov	r0, r5
   b5722:	f000 f82d 	bl	b5780 <_ZnajRKSt9nothrow_t>
	};
   b5726:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b572a:	4620      	mov	r0, r4
   b572c:	bd38      	pop	{r3, r4, r5, pc}
   b572e:	bf00      	nop
   b5730:	00010018 	.word	0x00010018
   b5734:	000b5b04 	.word	0x000b5b04

000b5738 <_Z19__fetch_global_Wirev>:
{
   b5738:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b573a:	4d0e      	ldr	r5, [pc, #56]	; (b5774 <_Z19__fetch_global_Wirev+0x3c>)
   b573c:	7829      	ldrb	r1, [r5, #0]
   b573e:	f3bf 8f5b 	dmb	ish
   b5742:	f011 0401 	ands.w	r4, r1, #1
{
   b5746:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5748:	d111      	bne.n	b576e <_Z19__fetch_global_Wirev+0x36>
   b574a:	4628      	mov	r0, r5
   b574c:	f7fe fcaf 	bl	b40ae <__cxa_guard_acquire>
   b5750:	b168      	cbz	r0, b576e <_Z19__fetch_global_Wirev+0x36>
   b5752:	4668      	mov	r0, sp
   b5754:	f7ff ffd6 	bl	b5704 <_Z17acquireWireBufferv>
   b5758:	466a      	mov	r2, sp
   b575a:	4621      	mov	r1, r4
   b575c:	4806      	ldr	r0, [pc, #24]	; (b5778 <_Z19__fetch_global_Wirev+0x40>)
   b575e:	f7ff fde9 	bl	b5334 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5762:	4628      	mov	r0, r5
   b5764:	f7fe fca8 	bl	b40b8 <__cxa_guard_release>
   b5768:	4804      	ldr	r0, [pc, #16]	; (b577c <_Z19__fetch_global_Wirev+0x44>)
   b576a:	f000 f80e 	bl	b578a <atexit>
	return wire;
}
   b576e:	4802      	ldr	r0, [pc, #8]	; (b5778 <_Z19__fetch_global_Wirev+0x40>)
   b5770:	b007      	add	sp, #28
   b5772:	bd30      	pop	{r4, r5, pc}
   b5774:	2003e744 	.word	0x2003e744
   b5778:	2003e748 	.word	0x2003e748
   b577c:	000b5701 	.word	0x000b5701

000b5780 <_ZnajRKSt9nothrow_t>:
   b5780:	f7fe bc91 	b.w	b40a6 <_Znaj>

000b5784 <_ZSt25__throw_bad_function_callv>:
   b5784:	b508      	push	{r3, lr}
   b5786:	f7fe ff67 	bl	b4658 <abort>

000b578a <atexit>:
   b578a:	2300      	movs	r3, #0
   b578c:	4601      	mov	r1, r0
   b578e:	461a      	mov	r2, r3
   b5790:	4618      	mov	r0, r3
   b5792:	f000 b863 	b.w	b585c <__register_exitproc>

000b5796 <memcpy>:
   b5796:	440a      	add	r2, r1
   b5798:	4291      	cmp	r1, r2
   b579a:	f100 33ff 	add.w	r3, r0, #4294967295
   b579e:	d100      	bne.n	b57a2 <memcpy+0xc>
   b57a0:	4770      	bx	lr
   b57a2:	b510      	push	{r4, lr}
   b57a4:	f811 4b01 	ldrb.w	r4, [r1], #1
   b57a8:	f803 4f01 	strb.w	r4, [r3, #1]!
   b57ac:	4291      	cmp	r1, r2
   b57ae:	d1f9      	bne.n	b57a4 <memcpy+0xe>
   b57b0:	bd10      	pop	{r4, pc}

000b57b2 <memset>:
   b57b2:	4402      	add	r2, r0
   b57b4:	4603      	mov	r3, r0
   b57b6:	4293      	cmp	r3, r2
   b57b8:	d100      	bne.n	b57bc <memset+0xa>
   b57ba:	4770      	bx	lr
   b57bc:	f803 1b01 	strb.w	r1, [r3], #1
   b57c0:	e7f9      	b.n	b57b6 <memset+0x4>
	...

000b57c4 <srand>:
   b57c4:	b538      	push	{r3, r4, r5, lr}
   b57c6:	4b10      	ldr	r3, [pc, #64]	; (b5808 <srand+0x44>)
   b57c8:	681d      	ldr	r5, [r3, #0]
   b57ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b57cc:	4604      	mov	r4, r0
   b57ce:	b9b3      	cbnz	r3, b57fe <srand+0x3a>
   b57d0:	2018      	movs	r0, #24
   b57d2:	f7fe ff21 	bl	b4618 <malloc>
   b57d6:	4602      	mov	r2, r0
   b57d8:	63a8      	str	r0, [r5, #56]	; 0x38
   b57da:	b920      	cbnz	r0, b57e6 <srand+0x22>
   b57dc:	4b0b      	ldr	r3, [pc, #44]	; (b580c <srand+0x48>)
   b57de:	480c      	ldr	r0, [pc, #48]	; (b5810 <srand+0x4c>)
   b57e0:	2142      	movs	r1, #66	; 0x42
   b57e2:	f7fe ff49 	bl	b4678 <__assert_func>
   b57e6:	490b      	ldr	r1, [pc, #44]	; (b5814 <srand+0x50>)
   b57e8:	4b0b      	ldr	r3, [pc, #44]	; (b5818 <srand+0x54>)
   b57ea:	e9c0 1300 	strd	r1, r3, [r0]
   b57ee:	4b0b      	ldr	r3, [pc, #44]	; (b581c <srand+0x58>)
   b57f0:	6083      	str	r3, [r0, #8]
   b57f2:	230b      	movs	r3, #11
   b57f4:	8183      	strh	r3, [r0, #12]
   b57f6:	2100      	movs	r1, #0
   b57f8:	2001      	movs	r0, #1
   b57fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b57fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5800:	2200      	movs	r2, #0
   b5802:	611c      	str	r4, [r3, #16]
   b5804:	615a      	str	r2, [r3, #20]
   b5806:	bd38      	pop	{r3, r4, r5, pc}
   b5808:	2003e648 	.word	0x2003e648
   b580c:	000b5b05 	.word	0x000b5b05
   b5810:	000b5b1c 	.word	0x000b5b1c
   b5814:	abcd330e 	.word	0xabcd330e
   b5818:	e66d1234 	.word	0xe66d1234
   b581c:	0005deec 	.word	0x0005deec

000b5820 <strdup>:
   b5820:	4b02      	ldr	r3, [pc, #8]	; (b582c <strdup+0xc>)
   b5822:	4601      	mov	r1, r0
   b5824:	6818      	ldr	r0, [r3, #0]
   b5826:	f000 b803 	b.w	b5830 <_strdup_r>
   b582a:	bf00      	nop
   b582c:	2003e648 	.word	0x2003e648

000b5830 <_strdup_r>:
   b5830:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5832:	4604      	mov	r4, r0
   b5834:	4608      	mov	r0, r1
   b5836:	460d      	mov	r5, r1
   b5838:	f7fe fbf0 	bl	b401c <strlen>
   b583c:	1c42      	adds	r2, r0, #1
   b583e:	4611      	mov	r1, r2
   b5840:	4620      	mov	r0, r4
   b5842:	9201      	str	r2, [sp, #4]
   b5844:	f7fe ff10 	bl	b4668 <_malloc_r>
   b5848:	4604      	mov	r4, r0
   b584a:	b118      	cbz	r0, b5854 <_strdup_r+0x24>
   b584c:	9a01      	ldr	r2, [sp, #4]
   b584e:	4629      	mov	r1, r5
   b5850:	f7ff ffa1 	bl	b5796 <memcpy>
   b5854:	4620      	mov	r0, r4
   b5856:	b003      	add	sp, #12
   b5858:	bd30      	pop	{r4, r5, pc}
	...

000b585c <__register_exitproc>:
   b585c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5860:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b591c <__register_exitproc+0xc0>
   b5864:	4606      	mov	r6, r0
   b5866:	f8d8 0000 	ldr.w	r0, [r8]
   b586a:	461f      	mov	r7, r3
   b586c:	460d      	mov	r5, r1
   b586e:	4691      	mov	r9, r2
   b5870:	f000 f856 	bl	b5920 <__retarget_lock_acquire_recursive>
   b5874:	4b25      	ldr	r3, [pc, #148]	; (b590c <__register_exitproc+0xb0>)
   b5876:	681c      	ldr	r4, [r3, #0]
   b5878:	b934      	cbnz	r4, b5888 <__register_exitproc+0x2c>
   b587a:	4c25      	ldr	r4, [pc, #148]	; (b5910 <__register_exitproc+0xb4>)
   b587c:	601c      	str	r4, [r3, #0]
   b587e:	4b25      	ldr	r3, [pc, #148]	; (b5914 <__register_exitproc+0xb8>)
   b5880:	b113      	cbz	r3, b5888 <__register_exitproc+0x2c>
   b5882:	681b      	ldr	r3, [r3, #0]
   b5884:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5888:	6863      	ldr	r3, [r4, #4]
   b588a:	2b1f      	cmp	r3, #31
   b588c:	dd07      	ble.n	b589e <__register_exitproc+0x42>
   b588e:	f8d8 0000 	ldr.w	r0, [r8]
   b5892:	f000 f847 	bl	b5924 <__retarget_lock_release_recursive>
   b5896:	f04f 30ff 	mov.w	r0, #4294967295
   b589a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b589e:	b34e      	cbz	r6, b58f4 <__register_exitproc+0x98>
   b58a0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b58a4:	b988      	cbnz	r0, b58ca <__register_exitproc+0x6e>
   b58a6:	4b1c      	ldr	r3, [pc, #112]	; (b5918 <__register_exitproc+0xbc>)
   b58a8:	b923      	cbnz	r3, b58b4 <__register_exitproc+0x58>
   b58aa:	f8d8 0000 	ldr.w	r0, [r8]
   b58ae:	f000 f838 	bl	b5922 <__retarget_lock_release>
   b58b2:	e7f0      	b.n	b5896 <__register_exitproc+0x3a>
   b58b4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b58b8:	f7fe feae 	bl	b4618 <malloc>
   b58bc:	2800      	cmp	r0, #0
   b58be:	d0f4      	beq.n	b58aa <__register_exitproc+0x4e>
   b58c0:	2300      	movs	r3, #0
   b58c2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b58c6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b58ca:	6863      	ldr	r3, [r4, #4]
   b58cc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b58d0:	2201      	movs	r2, #1
   b58d2:	409a      	lsls	r2, r3
   b58d4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b58d8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b58dc:	4313      	orrs	r3, r2
   b58de:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b58e2:	2e02      	cmp	r6, #2
   b58e4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b58e8:	bf02      	ittt	eq
   b58ea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b58ee:	4313      	orreq	r3, r2
   b58f0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b58f4:	6863      	ldr	r3, [r4, #4]
   b58f6:	f8d8 0000 	ldr.w	r0, [r8]
   b58fa:	1c5a      	adds	r2, r3, #1
   b58fc:	3302      	adds	r3, #2
   b58fe:	6062      	str	r2, [r4, #4]
   b5900:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5904:	f000 f80e 	bl	b5924 <__retarget_lock_release_recursive>
   b5908:	2000      	movs	r0, #0
   b590a:	e7c6      	b.n	b589a <__register_exitproc+0x3e>
   b590c:	2003e7e8 	.word	0x2003e7e8
   b5910:	2003e75c 	.word	0x2003e75c
   b5914:	00000000 	.word	0x00000000
   b5918:	000b4619 	.word	0x000b4619
   b591c:	2003e6ac 	.word	0x2003e6ac

000b5920 <__retarget_lock_acquire_recursive>:
   b5920:	4770      	bx	lr

000b5922 <__retarget_lock_release>:
   b5922:	4770      	bx	lr

000b5924 <__retarget_lock_release_recursive>:
   b5924:	4770      	bx	lr

000b5926 <link_code_end>:
	...

000b5928 <dynalib_user>:
   b5928:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b5938:	0000 0000 6425 5000 544f 5f30 6572 3173     ....%d.POT0_res1
   b5948:	5000 544f 5f30 6572 3273 0000               .POT0_res2..

000b5954 <_ZTVN5spark13EthernetClassE>:
	...
   b595c:	46f7 000b 46ed 000b 46e3 000b 46d9 000b     .F...F...F...F..
   b596c:	46cd 000b 46c1 000b 542d 000b 5435 000b     .F...F..-T..5T..
   b597c:	46b5 000b 46ad 000b 46a3 000b 4699 000b     .F...F...F...F..
   b598c:	555d 000b 5465 000b 546d 000b 7061 0070     ]U..eT..mT..app.
   b599c:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b59ac:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b59b8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b59c0:	4ae9 000b 4aef 000b 4b2d 000b 4afd 000b     .J...J..-K...J..
   b59d0:	4aeb 000b                                   .J..

000b59d4 <_ZTV9IPAddress>:
	...
   b59dc:	5029 000b 5019 000b 501b 000b               )P...P...P..

000b59e8 <_ZTV9USBSerial>:
	...
   b59f0:	510f 000b 5177 000b 514d 000b 48e5 000b     .Q..wQ..MQ...H..
   b5a00:	513f 000b 5111 000b 5121 000b 5171 000b     ?Q...Q..!Q..qQ..
   b5a10:	5131 000b 5109 000b                         1Q...Q..

000b5a18 <_ZTV11USARTSerial>:
	...
   b5a20:	5211 000b 527d 000b 5255 000b 48e5 000b     .R..}R..UR...H..
   b5a30:	5225 000b 5241 000b 5233 000b 524f 000b     %R..AR..3R..OR..
   b5a40:	5213 000b 5217 000b                         .R...R..

000b5a48 <_ZTV7TwoWire>:
	...
   b5a50:	52dd 000b 5327 000b 52ff 000b 52df 000b     .R..'S...R...R..
   b5a60:	5307 000b 530f 000b 5317 000b 531f 000b     .S...S...S...S..

000b5a70 <_ZTVN5spark9WiFiClassE>:
	...
   b5a78:	53cf 000b 53c5 000b 53bb 000b 5371 000b     .S...S...S..qS..
   b5a88:	53af 000b 53a3 000b 542d 000b 5435 000b     .S...S..-T..5T..
   b5a98:	5397 000b 538f 000b 5385 000b 537b 000b     .S...S...S..{S..
   b5aa8:	555d 000b 5465 000b 546d 000b               ]U..eT..mT..

000b5ab4 <CSWTCH.109>:
   b5ab4:	e6c4 2003 e718 2003 e720 2003               ... ...  .. 

000b5ac0 <_ZTVN5spark12NetworkClassE>:
	...
   b5ac8:	53ed 000b 53f7 000b 5401 000b 540b 000b     .S...S...T...T..
   b5ad8:	5415 000b 5421 000b 542d 000b 5435 000b     .T..!T..-T..5T..
   b5ae8:	543d 000b 5449 000b 5451 000b 545b 000b     =T..IT..QT..[T..
   b5af8:	555d 000b 5465 000b 546d 000b               ]U..eT..mT..

000b5b04 <_ZSt7nothrow>:
   b5b04:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5b14:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b5b24:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b5b34:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b5b44:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b5b54:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b5b64:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b5b74:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b5b84:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b5b94:	646e 632e                                    nd.c.

000b5b99 <link_const_data_end>:
   b5b99:	00          	.byte	0x00
	...

000b5b9c <link_constructors_location>:
   b5b9c:	000b4225 	.word	0x000b4225
   b5ba0:	000b4701 	.word	0x000b4701
   b5ba4:	000b477d 	.word	0x000b477d
   b5ba8:	000b48d5 	.word	0x000b48d5
   b5bac:	000b4979 	.word	0x000b4979
   b5bb0:	000b4989 	.word	0x000b4989
   b5bb4:	000b49a5 	.word	0x000b49a5
   b5bb8:	000b53d9 	.word	0x000b53d9
   b5bbc:	000b5571 	.word	0x000b5571
