
c:/Users/timwh/Projects/ntc_temperature_sensor/target/5.6.0/argon/ntc_temperature_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002e7c  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6e98  000b6e98  00006e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000090  2003e598  000b6ebc  0000e598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001c8  2003e628  2003e628  0001e628  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b6f4c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b6f50  000b6f50  00016f50  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b6f56  000b6f56  00016f56  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b6f7a  000b6f7a  00016f7a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00132630  00000000  00000000  00016f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000135de  00000000  00000000  001495ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003da19  00000000  00000000  0015cb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003040  00000000  00000000  0019a5a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b5c0  00000000  00000000  0019d5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00038ce3  00000000  00000000  001a8ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003f580  00000000  00000000  001e1888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00142420  00000000  00000000  00220e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000089cc  00000000  00000000  00363228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_drsub>:
   b401c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4020:	e002      	b.n	b4028 <__adddf3>
   b4022:	bf00      	nop

000b4024 <__aeabi_dsub>:
   b4024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b4028 <__adddf3>:
   b4028:	b530      	push	{r4, r5, lr}
   b402a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b402e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4032:	ea94 0f05 	teq	r4, r5
   b4036:	bf08      	it	eq
   b4038:	ea90 0f02 	teqeq	r0, r2
   b403c:	bf1f      	itttt	ne
   b403e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4042:	ea55 0c02 	orrsne.w	ip, r5, r2
   b4046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b404e:	f000 80e2 	beq.w	b4216 <__adddf3+0x1ee>
   b4052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b4056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405a:	bfb8      	it	lt
   b405c:	426d      	neglt	r5, r5
   b405e:	dd0c      	ble.n	b407a <__adddf3+0x52>
   b4060:	442c      	add	r4, r5
   b4062:	ea80 0202 	eor.w	r2, r0, r2
   b4066:	ea81 0303 	eor.w	r3, r1, r3
   b406a:	ea82 0000 	eor.w	r0, r2, r0
   b406e:	ea83 0101 	eor.w	r1, r3, r1
   b4072:	ea80 0202 	eor.w	r2, r0, r2
   b4076:	ea81 0303 	eor.w	r3, r1, r3
   b407a:	2d36      	cmp	r5, #54	; 0x36
   b407c:	bf88      	it	hi
   b407e:	bd30      	pophi	{r4, r5, pc}
   b4080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b408c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4090:	d002      	beq.n	b4098 <__adddf3+0x70>
   b4092:	4240      	negs	r0, r0
   b4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b409c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a4:	d002      	beq.n	b40ac <__adddf3+0x84>
   b40a6:	4252      	negs	r2, r2
   b40a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ac:	ea94 0f05 	teq	r4, r5
   b40b0:	f000 80a7 	beq.w	b4202 <__adddf3+0x1da>
   b40b4:	f1a4 0401 	sub.w	r4, r4, #1
   b40b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b40bc:	db0d      	blt.n	b40da <__adddf3+0xb2>
   b40be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c2:	fa22 f205 	lsr.w	r2, r2, r5
   b40c6:	1880      	adds	r0, r0, r2
   b40c8:	f141 0100 	adc.w	r1, r1, #0
   b40cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d0:	1880      	adds	r0, r0, r2
   b40d2:	fa43 f305 	asr.w	r3, r3, r5
   b40d6:	4159      	adcs	r1, r3
   b40d8:	e00e      	b.n	b40f8 <__adddf3+0xd0>
   b40da:	f1a5 0520 	sub.w	r5, r5, #32
   b40de:	f10e 0e20 	add.w	lr, lr, #32
   b40e2:	2a01      	cmp	r2, #1
   b40e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40e8:	bf28      	it	cs
   b40ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40ee:	fa43 f305 	asr.w	r3, r3, r5
   b40f2:	18c0      	adds	r0, r0, r3
   b40f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b40fc:	d507      	bpl.n	b410e <__adddf3+0xe6>
   b40fe:	f04f 0e00 	mov.w	lr, #0
   b4102:	f1dc 0c00 	rsbs	ip, ip, #0
   b4106:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410a:	eb6e 0101 	sbc.w	r1, lr, r1
   b410e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4112:	d31b      	bcc.n	b414c <__adddf3+0x124>
   b4114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b4118:	d30c      	bcc.n	b4134 <__adddf3+0x10c>
   b411a:	0849      	lsrs	r1, r1, #1
   b411c:	ea5f 0030 	movs.w	r0, r0, rrx
   b4120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4124:	f104 0401 	add.w	r4, r4, #1
   b4128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b412c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4130:	f080 809a 	bcs.w	b4268 <__adddf3+0x240>
   b4134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4138:	bf08      	it	eq
   b413a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b413e:	f150 0000 	adcs.w	r0, r0, #0
   b4142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4146:	ea41 0105 	orr.w	r1, r1, r5
   b414a:	bd30      	pop	{r4, r5, pc}
   b414c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4150:	4140      	adcs	r0, r0
   b4152:	eb41 0101 	adc.w	r1, r1, r1
   b4156:	3c01      	subs	r4, #1
   b4158:	bf28      	it	cs
   b415a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b415e:	d2e9      	bcs.n	b4134 <__adddf3+0x10c>
   b4160:	f091 0f00 	teq	r1, #0
   b4164:	bf04      	itt	eq
   b4166:	4601      	moveq	r1, r0
   b4168:	2000      	moveq	r0, #0
   b416a:	fab1 f381 	clz	r3, r1
   b416e:	bf08      	it	eq
   b4170:	3320      	addeq	r3, #32
   b4172:	f1a3 030b 	sub.w	r3, r3, #11
   b4176:	f1b3 0220 	subs.w	r2, r3, #32
   b417a:	da0c      	bge.n	b4196 <__adddf3+0x16e>
   b417c:	320c      	adds	r2, #12
   b417e:	dd08      	ble.n	b4192 <__adddf3+0x16a>
   b4180:	f102 0c14 	add.w	ip, r2, #20
   b4184:	f1c2 020c 	rsb	r2, r2, #12
   b4188:	fa01 f00c 	lsl.w	r0, r1, ip
   b418c:	fa21 f102 	lsr.w	r1, r1, r2
   b4190:	e00c      	b.n	b41ac <__adddf3+0x184>
   b4192:	f102 0214 	add.w	r2, r2, #20
   b4196:	bfd8      	it	le
   b4198:	f1c2 0c20 	rsble	ip, r2, #32
   b419c:	fa01 f102 	lsl.w	r1, r1, r2
   b41a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a4:	bfdc      	itt	le
   b41a6:	ea41 010c 	orrle.w	r1, r1, ip
   b41aa:	4090      	lslle	r0, r2
   b41ac:	1ae4      	subs	r4, r4, r3
   b41ae:	bfa2      	ittt	ge
   b41b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b4:	4329      	orrge	r1, r5
   b41b6:	bd30      	popge	{r4, r5, pc}
   b41b8:	ea6f 0404 	mvn.w	r4, r4
   b41bc:	3c1f      	subs	r4, #31
   b41be:	da1c      	bge.n	b41fa <__adddf3+0x1d2>
   b41c0:	340c      	adds	r4, #12
   b41c2:	dc0e      	bgt.n	b41e2 <__adddf3+0x1ba>
   b41c4:	f104 0414 	add.w	r4, r4, #20
   b41c8:	f1c4 0220 	rsb	r2, r4, #32
   b41cc:	fa20 f004 	lsr.w	r0, r0, r4
   b41d0:	fa01 f302 	lsl.w	r3, r1, r2
   b41d4:	ea40 0003 	orr.w	r0, r0, r3
   b41d8:	fa21 f304 	lsr.w	r3, r1, r4
   b41dc:	ea45 0103 	orr.w	r1, r5, r3
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	f1c4 040c 	rsb	r4, r4, #12
   b41e6:	f1c4 0220 	rsb	r2, r4, #32
   b41ea:	fa20 f002 	lsr.w	r0, r0, r2
   b41ee:	fa01 f304 	lsl.w	r3, r1, r4
   b41f2:	ea40 0003 	orr.w	r0, r0, r3
   b41f6:	4629      	mov	r1, r5
   b41f8:	bd30      	pop	{r4, r5, pc}
   b41fa:	fa21 f004 	lsr.w	r0, r1, r4
   b41fe:	4629      	mov	r1, r5
   b4200:	bd30      	pop	{r4, r5, pc}
   b4202:	f094 0f00 	teq	r4, #0
   b4206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420a:	bf06      	itte	eq
   b420c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4210:	3401      	addeq	r4, #1
   b4212:	3d01      	subne	r5, #1
   b4214:	e74e      	b.n	b40b4 <__adddf3+0x8c>
   b4216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421a:	bf18      	it	ne
   b421c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4220:	d029      	beq.n	b4276 <__adddf3+0x24e>
   b4222:	ea94 0f05 	teq	r4, r5
   b4226:	bf08      	it	eq
   b4228:	ea90 0f02 	teqeq	r0, r2
   b422c:	d005      	beq.n	b423a <__adddf3+0x212>
   b422e:	ea54 0c00 	orrs.w	ip, r4, r0
   b4232:	bf04      	itt	eq
   b4234:	4619      	moveq	r1, r3
   b4236:	4610      	moveq	r0, r2
   b4238:	bd30      	pop	{r4, r5, pc}
   b423a:	ea91 0f03 	teq	r1, r3
   b423e:	bf1e      	ittt	ne
   b4240:	2100      	movne	r1, #0
   b4242:	2000      	movne	r0, #0
   b4244:	bd30      	popne	{r4, r5, pc}
   b4246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424a:	d105      	bne.n	b4258 <__adddf3+0x230>
   b424c:	0040      	lsls	r0, r0, #1
   b424e:	4149      	adcs	r1, r1
   b4250:	bf28      	it	cs
   b4252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b4256:	bd30      	pop	{r4, r5, pc}
   b4258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b425c:	bf3c      	itt	cc
   b425e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4262:	bd30      	popcc	{r4, r5, pc}
   b4264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4270:	f04f 0000 	mov.w	r0, #0
   b4274:	bd30      	pop	{r4, r5, pc}
   b4276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427a:	bf1a      	itte	ne
   b427c:	4619      	movne	r1, r3
   b427e:	4610      	movne	r0, r2
   b4280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4284:	bf1c      	itt	ne
   b4286:	460b      	movne	r3, r1
   b4288:	4602      	movne	r2, r0
   b428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b428e:	bf06      	itte	eq
   b4290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4294:	ea91 0f03 	teqeq	r1, r3
   b4298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop

000b42a0 <__aeabi_ui2d>:
   b42a0:	f090 0f00 	teq	r0, #0
   b42a4:	bf04      	itt	eq
   b42a6:	2100      	moveq	r1, #0
   b42a8:	4770      	bxeq	lr
   b42aa:	b530      	push	{r4, r5, lr}
   b42ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b4:	f04f 0500 	mov.w	r5, #0
   b42b8:	f04f 0100 	mov.w	r1, #0
   b42bc:	e750      	b.n	b4160 <__adddf3+0x138>
   b42be:	bf00      	nop

000b42c0 <__aeabi_i2d>:
   b42c0:	f090 0f00 	teq	r0, #0
   b42c4:	bf04      	itt	eq
   b42c6:	2100      	moveq	r1, #0
   b42c8:	4770      	bxeq	lr
   b42ca:	b530      	push	{r4, r5, lr}
   b42cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42d8:	bf48      	it	mi
   b42da:	4240      	negmi	r0, r0
   b42dc:	f04f 0100 	mov.w	r1, #0
   b42e0:	e73e      	b.n	b4160 <__adddf3+0x138>
   b42e2:	bf00      	nop

000b42e4 <__aeabi_f2d>:
   b42e4:	0042      	lsls	r2, r0, #1
   b42e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b42ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f2:	bf1f      	itttt	ne
   b42f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b42fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4300:	4770      	bxne	lr
   b4302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b4306:	bf08      	it	eq
   b4308:	4770      	bxeq	lr
   b430a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b430e:	bf04      	itt	eq
   b4310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4314:	4770      	bxeq	lr
   b4316:	b530      	push	{r4, r5, lr}
   b4318:	f44f 7460 	mov.w	r4, #896	; 0x380
   b431c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4324:	e71c      	b.n	b4160 <__adddf3+0x138>
   b4326:	bf00      	nop

000b4328 <__aeabi_ul2d>:
   b4328:	ea50 0201 	orrs.w	r2, r0, r1
   b432c:	bf08      	it	eq
   b432e:	4770      	bxeq	lr
   b4330:	b530      	push	{r4, r5, lr}
   b4332:	f04f 0500 	mov.w	r5, #0
   b4336:	e00a      	b.n	b434e <__aeabi_l2d+0x16>

000b4338 <__aeabi_l2d>:
   b4338:	ea50 0201 	orrs.w	r2, r0, r1
   b433c:	bf08      	it	eq
   b433e:	4770      	bxeq	lr
   b4340:	b530      	push	{r4, r5, lr}
   b4342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b4346:	d502      	bpl.n	b434e <__aeabi_l2d+0x16>
   b4348:	4240      	negs	r0, r0
   b434a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b434e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b4356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435a:	f43f aed8 	beq.w	b410e <__adddf3+0xe6>
   b435e:	f04f 0203 	mov.w	r2, #3
   b4362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4366:	bf18      	it	ne
   b4368:	3203      	addne	r2, #3
   b436a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436e:	bf18      	it	ne
   b4370:	3203      	addne	r2, #3
   b4372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b4376:	f1c2 0320 	rsb	r3, r2, #32
   b437a:	fa00 fc03 	lsl.w	ip, r0, r3
   b437e:	fa20 f002 	lsr.w	r0, r0, r2
   b4382:	fa01 fe03 	lsl.w	lr, r1, r3
   b4386:	ea40 000e 	orr.w	r0, r0, lr
   b438a:	fa21 f102 	lsr.w	r1, r1, r2
   b438e:	4414      	add	r4, r2
   b4390:	e6bd      	b.n	b410e <__adddf3+0xe6>
   b4392:	bf00      	nop

000b4394 <strcmp>:
   b4394:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4398:	f811 3b01 	ldrb.w	r3, [r1], #1
   b439c:	2a01      	cmp	r2, #1
   b439e:	bf28      	it	cs
   b43a0:	429a      	cmpcs	r2, r3
   b43a2:	d0f7      	beq.n	b4394 <strcmp>
   b43a4:	1ad0      	subs	r0, r2, r3
   b43a6:	4770      	bx	lr

000b43a8 <strlen>:
   b43a8:	4603      	mov	r3, r0
   b43aa:	f813 2b01 	ldrb.w	r2, [r3], #1
   b43ae:	2a00      	cmp	r2, #0
   b43b0:	d1fb      	bne.n	b43aa <strlen+0x2>
   b43b2:	1a18      	subs	r0, r3, r0
   b43b4:	3801      	subs	r0, #1
   b43b6:	4770      	bx	lr

000b43b8 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b43b8:	4809      	ldr	r0, [pc, #36]	; (b43e0 <module_user_pre_init+0x28>)
   b43ba:	490a      	ldr	r1, [pc, #40]	; (b43e4 <module_user_pre_init+0x2c>)
   b43bc:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b43be:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b43c0:	d005      	beq.n	b43ce <module_user_pre_init+0x16>
   b43c2:	4a09      	ldr	r2, [pc, #36]	; (b43e8 <module_user_pre_init+0x30>)
   b43c4:	4282      	cmp	r2, r0
   b43c6:	d002      	beq.n	b43ce <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b43c8:	1a12      	subs	r2, r2, r0
   b43ca:	f002 fa07 	bl	b67dc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b43ce:	4807      	ldr	r0, [pc, #28]	; (b43ec <module_user_pre_init+0x34>)
   b43d0:	4a07      	ldr	r2, [pc, #28]	; (b43f0 <module_user_pre_init+0x38>)
   b43d2:	2100      	movs	r1, #0
   b43d4:	1a12      	subs	r2, r2, r0
   b43d6:	f002 fa0f 	bl	b67f8 <memset>
    return &link_global_data_start;
}
   b43da:	4801      	ldr	r0, [pc, #4]	; (b43e0 <module_user_pre_init+0x28>)
   b43dc:	bd08      	pop	{r3, pc}
   b43de:	bf00      	nop
   b43e0:	2003e598 	.word	0x2003e598
   b43e4:	000b6ebc 	.word	0x000b6ebc
   b43e8:	2003e628 	.word	0x2003e628
   b43ec:	2003e628 	.word	0x2003e628
   b43f0:	2003e7f0 	.word	0x2003e7f0

000b43f4 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b43f4:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b43f6:	4e07      	ldr	r6, [pc, #28]	; (b4414 <module_user_init+0x20>)
   b43f8:	4c07      	ldr	r4, [pc, #28]	; (b4418 <module_user_init+0x24>)
    module_user_init_hook();
   b43fa:	f001 f8db 	bl	b55b4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b43fe:	1ba4      	subs	r4, r4, r6
   b4400:	08a4      	lsrs	r4, r4, #2
   b4402:	2500      	movs	r5, #0
   b4404:	42ac      	cmp	r4, r5
   b4406:	d100      	bne.n	b440a <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4408:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b440a:	f856 3b04 	ldr.w	r3, [r6], #4
   b440e:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4410:	3501      	adds	r5, #1
   b4412:	e7f7      	b.n	b4404 <module_user_init+0x10>
   b4414:	000b6e74 	.word	0x000b6e74
   b4418:	000b6e98 	.word	0x000b6e98

000b441c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b441c:	f000 b860 	b.w	b44e0 <setup>

000b4420 <module_user_loop>:
}

void module_user_loop() {
   b4420:	b508      	push	{r3, lr}
    loop();
   b4422:	f000 f8eb 	bl	b45fc <loop>
    _post_loop();
}
   b4426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b442a:	f001 b87b 	b.w	b5524 <_post_loop>

000b442e <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b442e:	f000 bcb3 	b.w	b4d98 <malloc>

000b4432 <_Znaj>:
   b4432:	f000 bcb1 	b.w	b4d98 <malloc>

000b4436 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4436:	f000 bcb7 	b.w	b4da8 <free>
	...

000b443c <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b443c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b443e:	4a03      	ldr	r2, [pc, #12]	; (b444c <__cxa_pure_virtual+0x10>)
   b4440:	4903      	ldr	r1, [pc, #12]	; (b4450 <__cxa_pure_virtual+0x14>)
   b4442:	200c      	movs	r0, #12
   b4444:	f000 fbec 	bl	b4c20 <panic_>
  while (1);
   b4448:	e7fe      	b.n	b4448 <__cxa_pure_virtual+0xc>
   b444a:	bf00      	nop
   b444c:	000b4961 	.word	0x000b4961
   b4450:	000b6954 	.word	0x000b6954

000b4454 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4454:	7800      	ldrb	r0, [r0, #0]
   b4456:	fab0 f080 	clz	r0, r0
   b445a:	0940      	lsrs	r0, r0, #5
   b445c:	4770      	bx	lr

000b445e <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b445e:	2301      	movs	r3, #1
   b4460:	7003      	strb	r3, [r0, #0]
   b4462:	4770      	bx	lr

000b4464 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4464:	b40e      	push	{r1, r2, r3}
   b4466:	b503      	push	{r0, r1, lr}
   b4468:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b446a:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b446c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4470:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4472:	f000 fe0a 	bl	b508a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4476:	b002      	add	sp, #8
   b4478:	f85d eb04 	ldr.w	lr, [sp], #4
   b447c:	b003      	add	sp, #12
   b447e:	4770      	bx	lr

000b4480 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b4480:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4482:	6843      	ldr	r3, [r0, #4]
   b4484:	3b01      	subs	r3, #1
    {
   b4486:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4488:	6043      	str	r3, [r0, #4]
   b448a:	b963      	cbnz	r3, b44a6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b448c:	6803      	ldr	r3, [r0, #0]
   b448e:	689b      	ldr	r3, [r3, #8]
   b4490:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4492:	68a3      	ldr	r3, [r4, #8]
   b4494:	3b01      	subs	r3, #1
   b4496:	60a3      	str	r3, [r4, #8]
   b4498:	b92b      	cbnz	r3, b44a6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b449a:	6823      	ldr	r3, [r4, #0]
   b449c:	4620      	mov	r0, r4
   b449e:	68db      	ldr	r3, [r3, #12]
        }
    }
   b44a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b44a4:	4718      	bx	r3
    }
   b44a6:	bd10      	pop	{r4, pc}

000b44a8 <_ZN5spark9WiFiClass11wifi_configEv>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   b44a8:	2200      	movs	r2, #0
   b44aa:	6840      	ldr	r0, [r0, #4]
   b44ac:	4611      	mov	r1, r2
   b44ae:	f000 bbeb 	b.w	b4c88 <network_config>
	...

000b44b4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b44b4:	b510      	push	{r4, lr}
   b44b6:	4b04      	ldr	r3, [pc, #16]	; (b44c8 <_ZN9TCPClientD1Ev+0x14>)
   b44b8:	6003      	str	r3, [r0, #0]
   b44ba:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b44bc:	6980      	ldr	r0, [r0, #24]
   b44be:	b108      	cbz	r0, b44c4 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b44c0:	f7ff ffde 	bl	b4480 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b44c4:	4620      	mov	r0, r4
   b44c6:	bd10      	pop	{r4, pc}
   b44c8:	000b6c0c 	.word	0x000b6c0c

000b44cc <_ZN9TCPClientD0Ev>:
   b44cc:	b510      	push	{r4, lr}
   b44ce:	4604      	mov	r4, r0
   b44d0:	f7ff fff0 	bl	b44b4 <_ZN9TCPClientD1Ev>
   b44d4:	4620      	mov	r0, r4
   b44d6:	211c      	movs	r1, #28
   b44d8:	f7ff ffad 	bl	b4436 <_ZdlPvj>
   b44dc:	4620      	mov	r0, r4
   b44de:	bd10      	pop	{r4, pc}

000b44e0 <setup>:
float logR2, R2, T, Tc, Tf;
float Ta[3] = {0.0f, 0.0f, 0.0f};
float TaLast[3] = {0.0f, 0.0f, 0.0f};
float c1 = 0.001125308852122f, c2 = 0.000234711863267f, c3 = 0.000000085663516f;

void setup() {
   b44e0:	b530      	push	{r4, r5, lr}
  		//.source(NetworkInterfaceConfigSource::STATIC)
  		//.address({192,168,0,7}, {255,255,255,0}));
  		//.gateway({192,168,0,1})
  		//.dns({192,168,0,1}));

	pinMode(LED, OUTPUT);   
   b44e2:	4b3f      	ldr	r3, [pc, #252]	; (b45e0 <setup+0x100>)
void setup() {
   b44e4:	b08b      	sub	sp, #44	; 0x2c
	pinMode(LED, OUTPUT);   
   b44e6:	8818      	ldrh	r0, [r3, #0]
   b44e8:	2101      	movs	r1, #1
   b44ea:	f001 fe61 	bl	b61b0 <pinMode>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b44ee:	483d      	ldr	r0, [pc, #244]	; (b45e4 <setup+0x104>)
   b44f0:	2300      	movs	r3, #0
   b44f2:	4619      	mov	r1, r3
   b44f4:	461a      	mov	r2, r3
   b44f6:	6840      	ldr	r0, [r0, #4]
   b44f8:	f000 fbce 	bl	b4c98 <network_connect>
	WiFi.connect();
	Serial.begin(9600);
   b44fc:	f001 f97c 	bl	b57f8 <_Z16_fetch_usbserialv>
   b4500:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4504:	f001 f968 	bl	b57d8 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b4508:	2000      	movs	r0, #0
   b450a:	f000 fa39 	bl	b4980 <hal_timer_millis>
        while (_while() && !_condition()) {
   b450e:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b4512:	4604      	mov	r4, r0
   b4514:	2000      	movs	r0, #0
   b4516:	f000 fa33 	bl	b4980 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b451a:	1b00      	subs	r0, r0, r4
   b451c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4520:	42a8      	cmp	r0, r5
   b4522:	f171 0300 	sbcs.w	r3, r1, #0
   b4526:	d207      	bcs.n	b4538 <setup+0x58>
	waitFor(Serial.isConnected, 15000);
   b4528:	f001 f966 	bl	b57f8 <_Z16_fetch_usbserialv>
   b452c:	f001 f958 	bl	b57e0 <_ZN9USBSerial11isConnectedEv>
   b4530:	b910      	cbnz	r0, b4538 <setup+0x58>
            spark_process();
   b4532:	f000 fc21 	bl	b4d78 <spark_process>
        while (_while() && !_condition()) {
   b4536:	e7ed      	b.n	b4514 <setup+0x34>
   b4538:	f001 f95e 	bl	b57f8 <_Z16_fetch_usbserialv>
   b453c:	f001 f950 	bl	b57e0 <_ZN9USBSerial11isConnectedEv>
	Serial.println("connected");
   b4540:	f001 f95a 	bl	b57f8 <_Z16_fetch_usbserialv>
   b4544:	4928      	ldr	r1, [pc, #160]	; (b45e8 <setup+0x108>)
   b4546:	f000 fd78 	bl	b503a <_ZN5Print7printlnEPKc>
	Serial.printlnf("localIP=%s", WiFi.localIP().toString().c_str());
   b454a:	f001 f955 	bl	b57f8 <_Z16_fetch_usbserialv>
   b454e:	4604      	mov	r4, r0
        return IPAddress(wifi_config()->nw.aucIP);
   b4550:	4824      	ldr	r0, [pc, #144]	; (b45e4 <setup+0x104>)
   b4552:	f7ff ffa9 	bl	b44a8 <_ZN5spark9WiFiClass11wifi_configEv>
   b4556:	1c81      	adds	r1, r0, #2
   b4558:	a804      	add	r0, sp, #16
   b455a:	f001 f8a5 	bl	b56a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   b455e:	a904      	add	r1, sp, #16
   b4560:	4668      	mov	r0, sp
   b4562:	f000 fd0d 	bl	b4f80 <_ZN6StringC1ERK9Printable>
   b4566:	9a00      	ldr	r2, [sp, #0]
   b4568:	4920      	ldr	r1, [pc, #128]	; (b45ec <setup+0x10c>)
   b456a:	4620      	mov	r0, r4
   b456c:	f7ff ff7a 	bl	b4464 <_ZN5Print8printlnfEPKcz>
   b4570:	4668      	mov	r0, sp
   b4572:	f000 fcab 	bl	b4ecc <_ZN6StringD1Ev>
	Serial.printlnf("subnetMask=%s", WiFi.subnetMask().toString().c_str());
   b4576:	f001 f93f 	bl	b57f8 <_Z16_fetch_usbserialv>
   b457a:	4604      	mov	r4, r0
        return IPAddress(wifi_config()->nw.aucSubnetMask);
   b457c:	4819      	ldr	r0, [pc, #100]	; (b45e4 <setup+0x104>)
   b457e:	f7ff ff93 	bl	b44a8 <_ZN5spark9WiFiClass11wifi_configEv>
   b4582:	f100 0113 	add.w	r1, r0, #19
   b4586:	a804      	add	r0, sp, #16
   b4588:	f001 f88e 	bl	b56a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b458c:	a904      	add	r1, sp, #16
   b458e:	4668      	mov	r0, sp
   b4590:	f000 fcf6 	bl	b4f80 <_ZN6StringC1ERK9Printable>
   b4594:	9a00      	ldr	r2, [sp, #0]
   b4596:	4916      	ldr	r1, [pc, #88]	; (b45f0 <setup+0x110>)
   b4598:	4620      	mov	r0, r4
   b459a:	f7ff ff63 	bl	b4464 <_ZN5Print8printlnfEPKcz>
   b459e:	4668      	mov	r0, sp
   b45a0:	f000 fc94 	bl	b4ecc <_ZN6StringD1Ev>
	Serial.printlnf("gatewayIP=%s", WiFi.gatewayIP().toString().c_str());
   b45a4:	f001 f928 	bl	b57f8 <_Z16_fetch_usbserialv>
   b45a8:	4604      	mov	r4, r0
        return IPAddress(wifi_config()->nw.aucDefaultGateway);
   b45aa:	480e      	ldr	r0, [pc, #56]	; (b45e4 <setup+0x104>)
   b45ac:	f7ff ff7c 	bl	b44a8 <_ZN5spark9WiFiClass11wifi_configEv>
   b45b0:	f100 0124 	add.w	r1, r0, #36	; 0x24
   b45b4:	a804      	add	r0, sp, #16
   b45b6:	f001 f877 	bl	b56a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b45ba:	a904      	add	r1, sp, #16
   b45bc:	4668      	mov	r0, sp
   b45be:	f000 fcdf 	bl	b4f80 <_ZN6StringC1ERK9Printable>
   b45c2:	9a00      	ldr	r2, [sp, #0]
   b45c4:	490b      	ldr	r1, [pc, #44]	; (b45f4 <setup+0x114>)
   b45c6:	4620      	mov	r0, r4
   b45c8:	f7ff ff4c 	bl	b4464 <_ZN5Print8printlnfEPKcz>
   b45cc:	4668      	mov	r0, sp
   b45ce:	f000 fc7d 	bl	b4ecc <_ZN6StringD1Ev>
	server.begin();
   b45d2:	4809      	ldr	r0, [pc, #36]	; (b45f8 <setup+0x118>)
}
   b45d4:	b00b      	add	sp, #44	; 0x2c
   b45d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	server.begin();
   b45da:	f000 be9b 	b.w	b5314 <_ZN9TCPServer5beginEv>
   b45de:	bf00      	nop
   b45e0:	2003e598 	.word	0x2003e598
   b45e4:	2003e70c 	.word	0x2003e70c
   b45e8:	000b69b0 	.word	0x000b69b0
   b45ec:	000b6969 	.word	0x000b6969
   b45f0:	000b6974 	.word	0x000b6974
   b45f4:	000b6982 	.word	0x000b6982
   b45f8:	2003e684 	.word	0x2003e684

000b45fc <loop>:


void loop() {
   b45fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4600:	ed2d 8b02 	vpush	{d8}
   b4604:	4c8a      	ldr	r4, [pc, #552]	; (b4830 <loop+0x234>)
   b4606:	f8df a278 	ldr.w	sl, [pc, #632]	; b4880 <loop+0x284>

	for (int i=0; i<3; i++) {
		Vo = analogRead(ntcPin[i]);  
   b460a:	f8df 9278 	ldr.w	r9, [pc, #632]	; b4884 <loop+0x288>
  		R2 = R1 * (4095.0f / (float)Vo - 1.0f);
   b460e:	ed9f 8a89 	vldr	s16, [pc, #548]	; b4834 <loop+0x238>
   b4612:	f8df 8274 	ldr.w	r8, [pc, #628]	; b4888 <loop+0x28c>
void loop() {
   b4616:	b08d      	sub	sp, #52	; 0x34
   b4618:	4626      	mov	r6, r4
	for (int i=0; i<3; i++) {
   b461a:	2500      	movs	r5, #0
   b461c:	4627      	mov	r7, r4
		Vo = analogRead(ntcPin[i]);  
   b461e:	f85a 0b04 	ldr.w	r0, [sl], #4
   b4622:	b280      	uxth	r0, r0
   b4624:	f001 fdee 	bl	b6204 <analogRead>
  		R2 = R1 * (4095.0f / (float)Vo - 1.0f);
   b4628:	ee07 0a90 	vmov	s15, r0
   b462c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4630:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
   b4634:	ee88 0a27 	vdiv.f32	s0, s16, s15
   b4638:	4b7f      	ldr	r3, [pc, #508]	; (b4838 <loop+0x23c>)
		Vo = analogRead(ntcPin[i]);  
   b463a:	f8c9 0000 	str.w	r0, [r9]
	for (int i=0; i<3; i++) {
   b463e:	3501      	adds	r5, #1
  		R2 = R1 * (4095.0f / (float)Vo - 1.0f);
   b4640:	edd8 7a00 	vldr	s15, [r8]
   b4644:	ee30 0a68 	vsub.f32	s0, s0, s17
   b4648:	ee20 0a27 	vmul.f32	s0, s0, s15
   b464c:	ed83 0a00 	vstr	s0, [r3]
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
   b4650:	f001 ff82 	bl	b6558 <logf>
  		logR2 = log(R2);
   b4654:	4b79      	ldr	r3, [pc, #484]	; (b483c <loop+0x240>)
   b4656:	ed83 0a00 	vstr	s0, [r3]
		T = (1.0f / (c1 + (c2*logR2) + (c3*logR2*logR2*logR2)));
   b465a:	4b79      	ldr	r3, [pc, #484]	; (b4840 <loop+0x244>)
   b465c:	edd3 7a00 	vldr	s15, [r3]
   b4660:	4b78      	ldr	r3, [pc, #480]	; (b4844 <loop+0x248>)
   b4662:	ed93 7a00 	vldr	s14, [r3]
   b4666:	4b78      	ldr	r3, [pc, #480]	; (b4848 <loop+0x24c>)
   b4668:	eea7 7a80 	vfma.f32	s14, s15, s0
	for (int i=0; i<3; i++) {
   b466c:	2d03      	cmp	r5, #3
		T = (1.0f / (c1 + (c2*logR2) + (c3*logR2*logR2*logR2)));
   b466e:	edd3 7a00 	vldr	s15, [r3]
   b4672:	4b76      	ldr	r3, [pc, #472]	; (b484c <loop+0x250>)
   b4674:	ee60 7a27 	vmul.f32	s15, s0, s15
   b4678:	ee67 7a80 	vmul.f32	s15, s15, s0
   b467c:	eea7 7a80 	vfma.f32	s14, s15, s0
   b4680:	eec8 7a87 	vdiv.f32	s15, s17, s14
		Tc = T - 273.15f;
   b4684:	ed9f 7a72 	vldr	s14, [pc, #456]	; b4850 <loop+0x254>
		T = (1.0f / (c1 + (c2*logR2) + (c3*logR2*logR2*logR2)));
   b4688:	edc3 7a00 	vstr	s15, [r3]
		Tc = T - 273.15f;
   b468c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   b4690:	4b70      	ldr	r3, [pc, #448]	; (b4854 <loop+0x258>)
		Ta[i] = Ta[i] + Tc;
   b4692:	ed96 7a00 	vldr	s14, [r6]
		Tc = T - 273.15f;
   b4696:	edc3 7a00 	vstr	s15, [r3]
		Ta[i] = Ta[i] + Tc;
   b469a:	ee77 7a87 	vadd.f32	s15, s15, s14
   b469e:	ece6 7a01 	vstmia	r6!, {s15}
	for (int i=0; i<3; i++) {
   b46a2:	d1bc      	bne.n	b461e <loop+0x22>
	}
	if (counter >= 100) {
   b46a4:	4e6c      	ldr	r6, [pc, #432]	; (b4858 <loop+0x25c>)
   b46a6:	6833      	ldr	r3, [r6, #0]
   b46a8:	2b63      	cmp	r3, #99	; 0x63
   b46aa:	f340 8092 	ble.w	b47d2 <loop+0x1d6>
   b46ae:	f8df 91dc 	ldr.w	r9, [pc, #476]	; b488c <loop+0x290>
   b46b2:	4d6a      	ldr	r5, [pc, #424]	; (b485c <loop+0x260>)
		for (int i=0; i<3; i++) {
			Ta[i] = Ta[i] / (float)counter;
			Serial.printlnf("\nTemperature %02i: %3.1f°C", i, Ta[i]);
   b46b4:	f8df b1d8 	ldr.w	fp, [pc, #472]	; b4890 <loop+0x294>
					Ta[i] = TaLast[i];
				}
				else TaRising[i] = true;
			}
			else {
				if ((TaRising[i] == true) & (TaDelta > -0.2f)) {
   b46b8:	ed9f 8a69 	vldr	s16, [pc, #420]	; b4860 <loop+0x264>
				if ((TaRising[i] == false) & (TaDelta < 0.2f)) {
   b46bc:	eddf 8a69 	vldr	s17, [pc, #420]	; b4864 <loop+0x268>
		for (int i=0; i<3; i++) {
   b46c0:	f04f 0800 	mov.w	r8, #0
			Ta[i] = Ta[i] / (float)counter;
   b46c4:	edd6 7a00 	vldr	s15, [r6]
   b46c8:	edd4 6a00 	vldr	s13, [r4]
   b46cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b46d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   b46d4:	eca4 7a01 	vstmia	r4!, {s14}
			Serial.printlnf("\nTemperature %02i: %3.1f°C", i, Ta[i]);
   b46d8:	f001 f88e 	bl	b57f8 <_Z16_fetch_usbserialv>
   b46dc:	4682      	mov	sl, r0
   b46de:	f854 0c04 	ldr.w	r0, [r4, #-4]
   b46e2:	f7ff fdff 	bl	b42e4 <__aeabi_f2d>
   b46e6:	4642      	mov	r2, r8
   b46e8:	e9cd 0100 	strd	r0, r1, [sp]
   b46ec:	4659      	mov	r1, fp
   b46ee:	4650      	mov	r0, sl
   b46f0:	f7ff feb8 	bl	b4464 <_ZN5Print8printlnfEPKcz>
			float TaDelta = Ta[i] - TaLast[i];
   b46f4:	ecb9 7a01 	vldmia	r9!, {s14}
   b46f8:	ed54 7a01 	vldr	s15, [r4, #-4]
				if ((TaRising[i] == false) & (TaDelta < 0.2f)) {
   b46fc:	782b      	ldrb	r3, [r5, #0]
			float TaDelta = Ta[i] - TaLast[i];
   b46fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if (TaDelta > 0.0f) {
   b4702:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b4706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b470a:	dd3e      	ble.n	b478a <loop+0x18e>
				if ((TaRising[i] == false) & (TaDelta < 0.2f)) {
   b470c:	2b01      	cmp	r3, #1
   b470e:	d039      	beq.n	b4784 <loop+0x188>
   b4710:	eef4 7a68 	vcmp.f32	s15, s17
   b4714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4718:	d534      	bpl.n	b4784 <loop+0x188>
					Ta[i] = TaLast[i];
   b471a:	ed04 7a01 	vstr	s14, [r4, #-4]
		for (int i=0; i<3; i++) {
   b471e:	f108 0801 	add.w	r8, r8, #1
				}
				else TaRising[i] = false;
			}
			TaLast[i] = Ta[i]; 
   b4722:	f854 3c04 	ldr.w	r3, [r4, #-4]
   b4726:	f849 3c04 	str.w	r3, [r9, #-4]
		for (int i=0; i<3; i++) {
   b472a:	f1b8 0f03 	cmp.w	r8, #3
   b472e:	f105 0501 	add.w	r5, r5, #1
   b4732:	d1c7      	bne.n	b46c4 <loop+0xc8>
		}
  		digitalWrite(LED, HIGH); 
   b4734:	4c4c      	ldr	r4, [pc, #304]	; (b4868 <loop+0x26c>)
   b4736:	2101      	movs	r1, #1
   b4738:	8820      	ldrh	r0, [r4, #0]
   b473a:	f001 fd4a 	bl	b61d2 <digitalWrite>
  		delay(200);              
   b473e:	20c8      	movs	r0, #200	; 0xc8
   b4740:	f000 fce6 	bl	b5110 <delay>
  		digitalWrite(LED, LOW);  
   b4744:	8820      	ldrh	r0, [r4, #0]
  		if (client.status()) { 
   b4746:	4c49      	ldr	r4, [pc, #292]	; (b486c <loop+0x270>)
  		digitalWrite(LED, LOW);  
   b4748:	2100      	movs	r1, #0
   b474a:	f001 fd42 	bl	b61d2 <digitalWrite>
  		if (client.status()) { 
   b474e:	4620      	mov	r0, r4
   b4750:	f001 fb99 	bl	b5e86 <_ZN9TCPClient6statusEv>
   b4754:	2800      	cmp	r0, #0
   b4756:	d04c      	beq.n	b47f2 <loop+0x1f6>
    		Serial.println("\nTCP connected");
   b4758:	f001 f84e 	bl	b57f8 <_Z16_fetch_usbserialv>
   b475c:	4944      	ldr	r1, [pc, #272]	; (b4870 <loop+0x274>)
			while (client.available()) {
    			byte payload = client.read(); 
    			Serial.printlnf("TCP byte received: %i\n", payload);
   b475e:	f8df 8134 	ldr.w	r8, [pc, #308]	; b4894 <loop+0x298>
    		Serial.println("\nTCP connected");
   b4762:	f000 fc6a 	bl	b503a <_ZN5Print7printlnEPKc>
			while (client.available()) {
   b4766:	4620      	mov	r0, r4
   b4768:	f001 fb1c 	bl	b5da4 <_ZN9TCPClient9availableEv>
   b476c:	b1a8      	cbz	r0, b479a <loop+0x19e>
    			byte payload = client.read(); 
   b476e:	4620      	mov	r0, r4
   b4770:	f001 f926 	bl	b59c0 <_ZN9TCPClient4readEv>
   b4774:	4605      	mov	r5, r0
    			Serial.printlnf("TCP byte received: %i\n", payload);
   b4776:	f001 f83f 	bl	b57f8 <_Z16_fetch_usbserialv>
   b477a:	b2ea      	uxtb	r2, r5
   b477c:	4641      	mov	r1, r8
   b477e:	f7ff fe71 	bl	b4464 <_ZN5Print8printlnfEPKcz>
			while (client.available()) {
   b4782:	e7f0      	b.n	b4766 <loop+0x16a>
				else TaRising[i] = true;
   b4784:	2301      	movs	r3, #1
				else TaRising[i] = false;
   b4786:	702b      	strb	r3, [r5, #0]
   b4788:	e7c9      	b.n	b471e <loop+0x122>
				if ((TaRising[i] == true) & (TaDelta > -0.2f)) {
   b478a:	b123      	cbz	r3, b4796 <loop+0x19a>
   b478c:	eef4 7a48 	vcmp.f32	s15, s16
   b4790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4794:	dcc1      	bgt.n	b471a <loop+0x11e>
				else TaRising[i] = false;
   b4796:	2300      	movs	r3, #0
   b4798:	e7f5      	b.n	b4786 <loop+0x18a>
			}
			byte* ta = reinterpret_cast<byte*>(&Ta);
			int bytes_sent = server.write(ta, 12, 5000);
   b479a:	4c36      	ldr	r4, [pc, #216]	; (b4874 <loop+0x278>)
   b479c:	4924      	ldr	r1, [pc, #144]	; (b4830 <loop+0x234>)
   b479e:	4620      	mov	r0, r4
   b47a0:	f241 3388 	movw	r3, #5000	; 0x1388
   b47a4:	220c      	movs	r2, #12
   b47a6:	f000 fcd7 	bl	b5158 <_ZN9TCPServer5writeEPKhjm>
    int getWriteError() { return write_error; }
   b47aa:	6864      	ldr	r4, [r4, #4]
			int err = server.getWriteError();
			if (err != 0) {
   b47ac:	b13c      	cbz	r4, b47be <loop+0x1c2>
   b47ae:	9003      	str	r0, [sp, #12]
  				Serial.printlnf("TCPServer::write() failed (error = %d), number of bytes written: %d\n", err, bytes_sent);
   b47b0:	f001 f822 	bl	b57f8 <_Z16_fetch_usbserialv>
   b47b4:	9b03      	ldr	r3, [sp, #12]
   b47b6:	4930      	ldr	r1, [pc, #192]	; (b4878 <loop+0x27c>)
   b47b8:	4622      	mov	r2, r4
   b47ba:	f7ff fe53 	bl	b4464 <_ZN5Print8printlnfEPKcz>
			}
    	  	delay(8800);              
   b47be:	f242 2060 	movw	r0, #8800	; 0x2260
   b47c2:	f000 fca5 	bl	b5110 <delay>
			}
		else {
			// if no client is yet connected, check for a new connection
			client = server.available();
		}
		for (int i=0; i<3; i++) Ta[i] = 0;
   b47c6:	2300      	movs	r3, #0
   b47c8:	603b      	str	r3, [r7, #0]
   b47ca:	607b      	str	r3, [r7, #4]
   b47cc:	60bb      	str	r3, [r7, #8]
    	counter = 0;
   b47ce:	2300      	movs	r3, #0
   b47d0:	6033      	str	r3, [r6, #0]
	}   
	counter++;
   b47d2:	6833      	ldr	r3, [r6, #0]
	delay(10);
   b47d4:	200a      	movs	r0, #10
	counter++;
   b47d6:	3301      	adds	r3, #1
   b47d8:	6033      	str	r3, [r6, #0]
	delay(10);
   b47da:	f000 fc99 	bl	b5110 <delay>
	Serial.print(".");
   b47de:	f001 f80b 	bl	b57f8 <_Z16_fetch_usbserialv>
   b47e2:	4926      	ldr	r1, [pc, #152]	; (b487c <loop+0x280>)
   b47e4:	b00d      	add	sp, #52	; 0x34
   b47e6:	ecbd 8b02 	vpop	{d8}
   b47ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Serial.print(".");
   b47ee:	f000 bc11 	b.w	b5014 <_ZN5Print5printEPKc>
			client = server.available();
   b47f2:	4920      	ldr	r1, [pc, #128]	; (b4874 <loop+0x278>)
   b47f4:	a805      	add	r0, sp, #20
   b47f6:	f000 fe0f 	bl	b5418 <_ZN9TCPServer9availableEv>
class Print
   b47fa:	9b06      	ldr	r3, [sp, #24]
   b47fc:	6063      	str	r3, [r4, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   b47fe:	9b07      	ldr	r3, [sp, #28]
   b4800:	60a3      	str	r3, [r4, #8]
   b4802:	9b08      	ldr	r3, [sp, #32]
   b4804:	60e3      	str	r3, [r4, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b4806:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4808:	6123      	str	r3, [r4, #16]
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b480a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b480c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   b480e:	6163      	str	r3, [r4, #20]
	if (__tmp != _M_pi)
   b4810:	69a3      	ldr	r3, [r4, #24]
   b4812:	429d      	cmp	r5, r3
   b4814:	d008      	beq.n	b4828 <loop+0x22c>
	    if (__tmp != 0)
   b4816:	b115      	cbz	r5, b481e <loop+0x222>
    { ++_M_use_count; }
   b4818:	686b      	ldr	r3, [r5, #4]
   b481a:	3301      	adds	r3, #1
   b481c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b481e:	69a0      	ldr	r0, [r4, #24]
   b4820:	b108      	cbz	r0, b4826 <loop+0x22a>
	      _M_pi->_M_release();
   b4822:	f7ff fe2d 	bl	b4480 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b4826:	61a5      	str	r5, [r4, #24]
   b4828:	a805      	add	r0, sp, #20
   b482a:	f7ff fe43 	bl	b44b4 <_ZN9TCPClientD1Ev>
   b482e:	e7ca      	b.n	b47c6 <loop+0x1ca>
   b4830:	2003e63c 	.word	0x2003e63c
   b4834:	457ff000 	.word	0x457ff000
   b4838:	2003e628 	.word	0x2003e628
   b483c:	2003e680 	.word	0x2003e680
   b4840:	2003e5a4 	.word	0x2003e5a4
   b4844:	2003e5a0 	.word	0x2003e5a0
   b4848:	2003e5a8 	.word	0x2003e5a8
   b484c:	2003e638 	.word	0x2003e638
   b4850:	43889333 	.word	0x43889333
   b4854:	2003e658 	.word	0x2003e658
   b4858:	2003e67c 	.word	0x2003e67c
   b485c:	2003e654 	.word	0x2003e654
   b4860:	be4ccccd 	.word	0xbe4ccccd
   b4864:	3e4ccccd 	.word	0x3e4ccccd
   b4868:	2003e598 	.word	0x2003e598
   b486c:	2003e660 	.word	0x2003e660
   b4870:	000b69ab 	.word	0x000b69ab
   b4874:	2003e684 	.word	0x2003e684
   b4878:	000b69d1 	.word	0x000b69d1
   b487c:	000b6a16 	.word	0x000b6a16
   b4880:	2003e5ac 	.word	0x2003e5ac
   b4884:	2003e65c 	.word	0x2003e65c
   b4888:	2003e59c 	.word	0x2003e59c
   b488c:	2003e648 	.word	0x2003e648
   b4890:	000b698f 	.word	0x000b698f
   b4894:	000b69ba 	.word	0x000b69ba

000b4898 <_GLOBAL__sub_I_SystemMode>:
   b4898:	b510      	push	{r4, lr}
              error_(SYSTEM_ERROR_NONE) {
   b489a:	4b09      	ldr	r3, [pc, #36]	; (b48c0 <_GLOBAL__sub_I_SystemMode+0x28>)
    SleepResult() {}
   b489c:	4a09      	ldr	r2, [pc, #36]	; (b48c4 <_GLOBAL__sub_I_SystemMode+0x2c>)
   b489e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b48a0:	2400      	movs	r4, #0
   b48a2:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b48a6:	2001      	movs	r0, #1
   b48a8:	f000 f9ca 	bl	b4c40 <set_system_mode>
TCPServer server = TCPServer(23);
   b48ac:	4622      	mov	r2, r4
   b48ae:	4806      	ldr	r0, [pc, #24]	; (b48c8 <_GLOBAL__sub_I_SystemMode+0x30>)
   b48b0:	2117      	movs	r1, #23
   b48b2:	f000 fcdf 	bl	b5274 <_ZN9TCPServerC1Etm>
   b48b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
TCPClient client;
   b48ba:	4804      	ldr	r0, [pc, #16]	; (b48cc <_GLOBAL__sub_I_SystemMode+0x34>)
   b48bc:	f001 bb1c 	b.w	b5ef8 <_ZN9TCPClientC1Ev>
   b48c0:	2003e62c 	.word	0x2003e62c
   b48c4:	ffff0000 	.word	0xffff0000
   b48c8:	2003e684 	.word	0x2003e684
   b48cc:	2003e660 	.word	0x2003e660

000b48d0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b48d0:	b508      	push	{r3, lr}
   b48d2:	4b02      	ldr	r3, [pc, #8]	; (b48dc <netdb_freeaddrinfo+0xc>)
   b48d4:	681b      	ldr	r3, [r3, #0]
   b48d6:	689b      	ldr	r3, [r3, #8]
   b48d8:	9301      	str	r3, [sp, #4]
   b48da:	bd08      	pop	{r3, pc}
   b48dc:	00030268 	.word	0x00030268

000b48e0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b48e0:	b508      	push	{r3, lr}
   b48e2:	4b02      	ldr	r3, [pc, #8]	; (b48ec <netdb_getaddrinfo+0xc>)
   b48e4:	681b      	ldr	r3, [r3, #0]
   b48e6:	68db      	ldr	r3, [r3, #12]
   b48e8:	9301      	str	r3, [sp, #4]
   b48ea:	bd08      	pop	{r3, pc}
   b48ec:	00030268 	.word	0x00030268

000b48f0 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b48f0:	b508      	push	{r3, lr}
   b48f2:	4b02      	ldr	r3, [pc, #8]	; (b48fc <hal_pin_validate_function+0xc>)
   b48f4:	681b      	ldr	r3, [r3, #0]
   b48f6:	685b      	ldr	r3, [r3, #4]
   b48f8:	9301      	str	r3, [sp, #4]
   b48fa:	bd08      	pop	{r3, pc}
   b48fc:	0003022c 	.word	0x0003022c

000b4900 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b4900:	b508      	push	{r3, lr}
   b4902:	4b02      	ldr	r3, [pc, #8]	; (b490c <hal_gpio_mode+0xc>)
   b4904:	681b      	ldr	r3, [r3, #0]
   b4906:	689b      	ldr	r3, [r3, #8]
   b4908:	9301      	str	r3, [sp, #4]
   b490a:	bd08      	pop	{r3, pc}
   b490c:	0003022c 	.word	0x0003022c

000b4910 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b4910:	b508      	push	{r3, lr}
   b4912:	4b02      	ldr	r3, [pc, #8]	; (b491c <hal_gpio_get_mode+0xc>)
   b4914:	681b      	ldr	r3, [r3, #0]
   b4916:	68db      	ldr	r3, [r3, #12]
   b4918:	9301      	str	r3, [sp, #4]
   b491a:	bd08      	pop	{r3, pc}
   b491c:	0003022c 	.word	0x0003022c

000b4920 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b4920:	b508      	push	{r3, lr}
   b4922:	4b02      	ldr	r3, [pc, #8]	; (b492c <hal_gpio_write+0xc>)
   b4924:	681b      	ldr	r3, [r3, #0]
   b4926:	691b      	ldr	r3, [r3, #16]
   b4928:	9301      	str	r3, [sp, #4]
   b492a:	bd08      	pop	{r3, pc}
   b492c:	0003022c 	.word	0x0003022c

000b4930 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4930:	b508      	push	{r3, lr}
   b4932:	4b02      	ldr	r3, [pc, #8]	; (b493c <hal_adc_read+0xc>)
   b4934:	681b      	ldr	r3, [r3, #0]
   b4936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4938:	9301      	str	r3, [sp, #4]
   b493a:	bd08      	pop	{r3, pc}
   b493c:	0003022c 	.word	0x0003022c

000b4940 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4940:	b508      	push	{r3, lr}
   b4942:	4b02      	ldr	r3, [pc, #8]	; (b494c <if_index_to_name+0xc>)
   b4944:	681b      	ldr	r3, [r3, #0]
   b4946:	695b      	ldr	r3, [r3, #20]
   b4948:	9301      	str	r3, [sp, #4]
   b494a:	bd08      	pop	{r3, pc}
   b494c:	0003026c 	.word	0x0003026c

000b4950 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4950:	b508      	push	{r3, lr}
   b4952:	4b02      	ldr	r3, [pc, #8]	; (b495c <HAL_RNG_GetRandomNumber+0xc>)
   b4954:	681b      	ldr	r3, [r3, #0]
   b4956:	685b      	ldr	r3, [r3, #4]
   b4958:	9301      	str	r3, [sp, #4]
   b495a:	bd08      	pop	{r3, pc}
   b495c:	00030218 	.word	0x00030218

000b4960 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4960:	b508      	push	{r3, lr}
   b4962:	4b02      	ldr	r3, [pc, #8]	; (b496c <HAL_Delay_Microseconds+0xc>)
   b4964:	681b      	ldr	r3, [r3, #0]
   b4966:	68db      	ldr	r3, [r3, #12]
   b4968:	9301      	str	r3, [sp, #4]
   b496a:	bd08      	pop	{r3, pc}
   b496c:	00030218 	.word	0x00030218

000b4970 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4970:	b508      	push	{r3, lr}
   b4972:	4b02      	ldr	r3, [pc, #8]	; (b497c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4974:	681b      	ldr	r3, [r3, #0]
   b4976:	695b      	ldr	r3, [r3, #20]
   b4978:	9301      	str	r3, [sp, #4]
   b497a:	bd08      	pop	{r3, pc}
   b497c:	00030218 	.word	0x00030218

000b4980 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4980:	b508      	push	{r3, lr}
   b4982:	4b02      	ldr	r3, [pc, #8]	; (b498c <hal_timer_millis+0xc>)
   b4984:	681b      	ldr	r3, [r3, #0]
   b4986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4988:	9301      	str	r3, [sp, #4]
   b498a:	bd08      	pop	{r3, pc}
   b498c:	00030218 	.word	0x00030218

000b4990 <os_thread_scheduling>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b4990:	b508      	push	{r3, lr}
   b4992:	4b02      	ldr	r3, [pc, #8]	; (b499c <os_thread_scheduling+0xc>)
   b4994:	681b      	ldr	r3, [r3, #0]
   b4996:	69db      	ldr	r3, [r3, #28]
   b4998:	9301      	str	r3, [sp, #4]
   b499a:	bd08      	pop	{r3, pc}
   b499c:	00030248 	.word	0x00030248

000b49a0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b49a0:	b508      	push	{r3, lr}
   b49a2:	4b02      	ldr	r3, [pc, #8]	; (b49ac <os_mutex_recursive_create+0xc>)
   b49a4:	681b      	ldr	r3, [r3, #0]
   b49a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49a8:	9301      	str	r3, [sp, #4]
   b49aa:	bd08      	pop	{r3, pc}
   b49ac:	00030248 	.word	0x00030248

000b49b0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b49b0:	b508      	push	{r3, lr}
   b49b2:	4b02      	ldr	r3, [pc, #8]	; (b49bc <inet_inet_ntop+0xc>)
   b49b4:	681b      	ldr	r3, [r3, #0]
   b49b6:	695b      	ldr	r3, [r3, #20]
   b49b8:	9301      	str	r3, [sp, #4]
   b49ba:	bd08      	pop	{r3, pc}
   b49bc:	00030264 	.word	0x00030264

000b49c0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b49c0:	b508      	push	{r3, lr}
   b49c2:	4b02      	ldr	r3, [pc, #8]	; (b49cc <inet_htonl+0xc>)
   b49c4:	681b      	ldr	r3, [r3, #0]
   b49c6:	6a1b      	ldr	r3, [r3, #32]
   b49c8:	9301      	str	r3, [sp, #4]
   b49ca:	bd08      	pop	{r3, pc}
   b49cc:	00030264 	.word	0x00030264

000b49d0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b49d0:	b508      	push	{r3, lr}
   b49d2:	4b02      	ldr	r3, [pc, #8]	; (b49dc <inet_htons+0xc>)
   b49d4:	681b      	ldr	r3, [r3, #0]
   b49d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b49d8:	9301      	str	r3, [sp, #4]
   b49da:	bd08      	pop	{r3, pc}
   b49dc:	00030264 	.word	0x00030264

000b49e0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b49e0:	b508      	push	{r3, lr}
   b49e2:	4b02      	ldr	r3, [pc, #8]	; (b49ec <hal_usart_write+0xc>)
   b49e4:	681b      	ldr	r3, [r3, #0]
   b49e6:	68db      	ldr	r3, [r3, #12]
   b49e8:	9301      	str	r3, [sp, #4]
   b49ea:	bd08      	pop	{r3, pc}
   b49ec:	0003023c 	.word	0x0003023c

000b49f0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b49f0:	b508      	push	{r3, lr}
   b49f2:	4b02      	ldr	r3, [pc, #8]	; (b49fc <hal_usart_available+0xc>)
   b49f4:	681b      	ldr	r3, [r3, #0]
   b49f6:	691b      	ldr	r3, [r3, #16]
   b49f8:	9301      	str	r3, [sp, #4]
   b49fa:	bd08      	pop	{r3, pc}
   b49fc:	0003023c 	.word	0x0003023c

000b4a00 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4a00:	b508      	push	{r3, lr}
   b4a02:	4b02      	ldr	r3, [pc, #8]	; (b4a0c <hal_usart_read+0xc>)
   b4a04:	681b      	ldr	r3, [r3, #0]
   b4a06:	695b      	ldr	r3, [r3, #20]
   b4a08:	9301      	str	r3, [sp, #4]
   b4a0a:	bd08      	pop	{r3, pc}
   b4a0c:	0003023c 	.word	0x0003023c

000b4a10 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4a10:	b508      	push	{r3, lr}
   b4a12:	4b02      	ldr	r3, [pc, #8]	; (b4a1c <hal_usart_peek+0xc>)
   b4a14:	681b      	ldr	r3, [r3, #0]
   b4a16:	699b      	ldr	r3, [r3, #24]
   b4a18:	9301      	str	r3, [sp, #4]
   b4a1a:	bd08      	pop	{r3, pc}
   b4a1c:	0003023c 	.word	0x0003023c

000b4a20 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4a20:	b508      	push	{r3, lr}
   b4a22:	4b02      	ldr	r3, [pc, #8]	; (b4a2c <hal_usart_flush+0xc>)
   b4a24:	681b      	ldr	r3, [r3, #0]
   b4a26:	69db      	ldr	r3, [r3, #28]
   b4a28:	9301      	str	r3, [sp, #4]
   b4a2a:	bd08      	pop	{r3, pc}
   b4a2c:	0003023c 	.word	0x0003023c

000b4a30 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4a30:	b508      	push	{r3, lr}
   b4a32:	4b02      	ldr	r3, [pc, #8]	; (b4a3c <hal_usart_is_enabled+0xc>)
   b4a34:	681b      	ldr	r3, [r3, #0]
   b4a36:	6a1b      	ldr	r3, [r3, #32]
   b4a38:	9301      	str	r3, [sp, #4]
   b4a3a:	bd08      	pop	{r3, pc}
   b4a3c:	0003023c 	.word	0x0003023c

000b4a40 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4a40:	b508      	push	{r3, lr}
   b4a42:	4b02      	ldr	r3, [pc, #8]	; (b4a4c <hal_usart_available_data_for_write+0xc>)
   b4a44:	681b      	ldr	r3, [r3, #0]
   b4a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a48:	9301      	str	r3, [sp, #4]
   b4a4a:	bd08      	pop	{r3, pc}
   b4a4c:	0003023c 	.word	0x0003023c

000b4a50 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4a50:	b508      	push	{r3, lr}
   b4a52:	4b02      	ldr	r3, [pc, #8]	; (b4a5c <hal_usart_init_ex+0xc>)
   b4a54:	681b      	ldr	r3, [r3, #0]
   b4a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a58:	9301      	str	r3, [sp, #4]
   b4a5a:	bd08      	pop	{r3, pc}
   b4a5c:	0003023c 	.word	0x0003023c

000b4a60 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4a60:	b508      	push	{r3, lr}
   b4a62:	4b02      	ldr	r3, [pc, #8]	; (b4a6c <hal_i2c_write+0xc>)
   b4a64:	681b      	ldr	r3, [r3, #0]
   b4a66:	6a1b      	ldr	r3, [r3, #32]
   b4a68:	9301      	str	r3, [sp, #4]
   b4a6a:	bd08      	pop	{r3, pc}
   b4a6c:	00030228 	.word	0x00030228

000b4a70 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4a70:	b508      	push	{r3, lr}
   b4a72:	4b02      	ldr	r3, [pc, #8]	; (b4a7c <hal_i2c_available+0xc>)
   b4a74:	681b      	ldr	r3, [r3, #0]
   b4a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a78:	9301      	str	r3, [sp, #4]
   b4a7a:	bd08      	pop	{r3, pc}
   b4a7c:	00030228 	.word	0x00030228

000b4a80 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4a80:	b508      	push	{r3, lr}
   b4a82:	4b02      	ldr	r3, [pc, #8]	; (b4a8c <hal_i2c_read+0xc>)
   b4a84:	681b      	ldr	r3, [r3, #0]
   b4a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a88:	9301      	str	r3, [sp, #4]
   b4a8a:	bd08      	pop	{r3, pc}
   b4a8c:	00030228 	.word	0x00030228

000b4a90 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4a90:	b508      	push	{r3, lr}
   b4a92:	4b02      	ldr	r3, [pc, #8]	; (b4a9c <hal_i2c_peek+0xc>)
   b4a94:	681b      	ldr	r3, [r3, #0]
   b4a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a98:	9301      	str	r3, [sp, #4]
   b4a9a:	bd08      	pop	{r3, pc}
   b4a9c:	00030228 	.word	0x00030228

000b4aa0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4aa0:	b508      	push	{r3, lr}
   b4aa2:	4b02      	ldr	r3, [pc, #8]	; (b4aac <hal_i2c_flush+0xc>)
   b4aa4:	681b      	ldr	r3, [r3, #0]
   b4aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4aa8:	9301      	str	r3, [sp, #4]
   b4aaa:	bd08      	pop	{r3, pc}
   b4aac:	00030228 	.word	0x00030228

000b4ab0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4ab0:	b508      	push	{r3, lr}
   b4ab2:	4b02      	ldr	r3, [pc, #8]	; (b4abc <hal_i2c_is_enabled+0xc>)
   b4ab4:	681b      	ldr	r3, [r3, #0]
   b4ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ab8:	9301      	str	r3, [sp, #4]
   b4aba:	bd08      	pop	{r3, pc}
   b4abc:	00030228 	.word	0x00030228

000b4ac0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4ac0:	b508      	push	{r3, lr}
   b4ac2:	4b02      	ldr	r3, [pc, #8]	; (b4acc <hal_i2c_init+0xc>)
   b4ac4:	681b      	ldr	r3, [r3, #0]
   b4ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ac8:	9301      	str	r3, [sp, #4]
   b4aca:	bd08      	pop	{r3, pc}
   b4acc:	00030228 	.word	0x00030228

000b4ad0 <sock_accept>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
   b4ad0:	b508      	push	{r3, lr}
   b4ad2:	4b02      	ldr	r3, [pc, #8]	; (b4adc <sock_accept+0xc>)
   b4ad4:	681b      	ldr	r3, [r3, #0]
   b4ad6:	681b      	ldr	r3, [r3, #0]
   b4ad8:	9301      	str	r3, [sp, #4]
   b4ada:	bd08      	pop	{r3, pc}
   b4adc:	00030238 	.word	0x00030238

000b4ae0 <sock_bind>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b4ae0:	b508      	push	{r3, lr}
   b4ae2:	4b02      	ldr	r3, [pc, #8]	; (b4aec <sock_bind+0xc>)
   b4ae4:	681b      	ldr	r3, [r3, #0]
   b4ae6:	685b      	ldr	r3, [r3, #4]
   b4ae8:	9301      	str	r3, [sp, #4]
   b4aea:	bd08      	pop	{r3, pc}
   b4aec:	00030238 	.word	0x00030238

000b4af0 <sock_getpeername>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
   b4af0:	b508      	push	{r3, lr}
   b4af2:	4b02      	ldr	r3, [pc, #8]	; (b4afc <sock_getpeername+0xc>)
   b4af4:	681b      	ldr	r3, [r3, #0]
   b4af6:	68db      	ldr	r3, [r3, #12]
   b4af8:	9301      	str	r3, [sp, #4]
   b4afa:	bd08      	pop	{r3, pc}
   b4afc:	00030238 	.word	0x00030238

000b4b00 <sock_setsockopt>:
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4b00:	b508      	push	{r3, lr}
   b4b02:	4b02      	ldr	r3, [pc, #8]	; (b4b0c <sock_setsockopt+0xc>)
   b4b04:	681b      	ldr	r3, [r3, #0]
   b4b06:	699b      	ldr	r3, [r3, #24]
   b4b08:	9301      	str	r3, [sp, #4]
   b4b0a:	bd08      	pop	{r3, pc}
   b4b0c:	00030238 	.word	0x00030238

000b4b10 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4b10:	b508      	push	{r3, lr}
   b4b12:	4b02      	ldr	r3, [pc, #8]	; (b4b1c <sock_close+0xc>)
   b4b14:	681b      	ldr	r3, [r3, #0]
   b4b16:	69db      	ldr	r3, [r3, #28]
   b4b18:	9301      	str	r3, [sp, #4]
   b4b1a:	bd08      	pop	{r3, pc}
   b4b1c:	00030238 	.word	0x00030238

000b4b20 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4b20:	b508      	push	{r3, lr}
   b4b22:	4b02      	ldr	r3, [pc, #8]	; (b4b2c <sock_connect+0xc>)
   b4b24:	681b      	ldr	r3, [r3, #0]
   b4b26:	6a1b      	ldr	r3, [r3, #32]
   b4b28:	9301      	str	r3, [sp, #4]
   b4b2a:	bd08      	pop	{r3, pc}
   b4b2c:	00030238 	.word	0x00030238

000b4b30 <sock_listen>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
   b4b30:	b508      	push	{r3, lr}
   b4b32:	4b02      	ldr	r3, [pc, #8]	; (b4b3c <sock_listen+0xc>)
   b4b34:	681b      	ldr	r3, [r3, #0]
   b4b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4b38:	9301      	str	r3, [sp, #4]
   b4b3a:	bd08      	pop	{r3, pc}
   b4b3c:	00030238 	.word	0x00030238

000b4b40 <sock_recv>:
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4b40:	b508      	push	{r3, lr}
   b4b42:	4b02      	ldr	r3, [pc, #8]	; (b4b4c <sock_recv+0xc>)
   b4b44:	681b      	ldr	r3, [r3, #0]
   b4b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b48:	9301      	str	r3, [sp, #4]
   b4b4a:	bd08      	pop	{r3, pc}
   b4b4c:	00030238 	.word	0x00030238

000b4b50 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4b50:	b508      	push	{r3, lr}
   b4b52:	4b02      	ldr	r3, [pc, #8]	; (b4b5c <sock_send+0xc>)
   b4b54:	681b      	ldr	r3, [r3, #0]
   b4b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b58:	9301      	str	r3, [sp, #4]
   b4b5a:	bd08      	pop	{r3, pc}
   b4b5c:	00030238 	.word	0x00030238

000b4b60 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4b60:	b508      	push	{r3, lr}
   b4b62:	4b02      	ldr	r3, [pc, #8]	; (b4b6c <sock_socket+0xc>)
   b4b64:	681b      	ldr	r3, [r3, #0]
   b4b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4b68:	9301      	str	r3, [sp, #4]
   b4b6a:	bd08      	pop	{r3, pc}
   b4b6c:	00030238 	.word	0x00030238

000b4b70 <sock_fcntl>:
DYNALIB_FN(15, hal_socket, sock_fcntl, int(int, int, ...))
   b4b70:	b508      	push	{r3, lr}
   b4b72:	4b02      	ldr	r3, [pc, #8]	; (b4b7c <sock_fcntl+0xc>)
   b4b74:	681b      	ldr	r3, [r3, #0]
   b4b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4b78:	9301      	str	r3, [sp, #4]
   b4b7a:	bd08      	pop	{r3, pc}
   b4b7c:	00030238 	.word	0x00030238

000b4b80 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4b80:	b508      	push	{r3, lr}
   b4b82:	4b02      	ldr	r3, [pc, #8]	; (b4b8c <hal_spi_init+0xc>)
   b4b84:	681b      	ldr	r3, [r3, #0]
   b4b86:	69db      	ldr	r3, [r3, #28]
   b4b88:	9301      	str	r3, [sp, #4]
   b4b8a:	bd08      	pop	{r3, pc}
   b4b8c:	00030230 	.word	0x00030230

000b4b90 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4b90:	b508      	push	{r3, lr}
   b4b92:	4b02      	ldr	r3, [pc, #8]	; (b4b9c <hal_spi_is_enabled+0xc>)
   b4b94:	681b      	ldr	r3, [r3, #0]
   b4b96:	6a1b      	ldr	r3, [r3, #32]
   b4b98:	9301      	str	r3, [sp, #4]
   b4b9a:	bd08      	pop	{r3, pc}
   b4b9c:	00030230 	.word	0x00030230

000b4ba0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4ba0:	b508      	push	{r3, lr}
   b4ba2:	4b02      	ldr	r3, [pc, #8]	; (b4bac <HAL_USB_USART_Init+0xc>)
   b4ba4:	681b      	ldr	r3, [r3, #0]
   b4ba6:	681b      	ldr	r3, [r3, #0]
   b4ba8:	9301      	str	r3, [sp, #4]
   b4baa:	bd08      	pop	{r3, pc}
   b4bac:	0003024c 	.word	0x0003024c

000b4bb0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4bb0:	b508      	push	{r3, lr}
   b4bb2:	4b02      	ldr	r3, [pc, #8]	; (b4bbc <HAL_USB_USART_Begin+0xc>)
   b4bb4:	681b      	ldr	r3, [r3, #0]
   b4bb6:	685b      	ldr	r3, [r3, #4]
   b4bb8:	9301      	str	r3, [sp, #4]
   b4bba:	bd08      	pop	{r3, pc}
   b4bbc:	0003024c 	.word	0x0003024c

000b4bc0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4bc0:	b508      	push	{r3, lr}
   b4bc2:	4b02      	ldr	r3, [pc, #8]	; (b4bcc <HAL_USB_USART_Available_Data+0xc>)
   b4bc4:	681b      	ldr	r3, [r3, #0]
   b4bc6:	691b      	ldr	r3, [r3, #16]
   b4bc8:	9301      	str	r3, [sp, #4]
   b4bca:	bd08      	pop	{r3, pc}
   b4bcc:	0003024c 	.word	0x0003024c

000b4bd0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4bd0:	b508      	push	{r3, lr}
   b4bd2:	4b02      	ldr	r3, [pc, #8]	; (b4bdc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4bd4:	681b      	ldr	r3, [r3, #0]
   b4bd6:	695b      	ldr	r3, [r3, #20]
   b4bd8:	9301      	str	r3, [sp, #4]
   b4bda:	bd08      	pop	{r3, pc}
   b4bdc:	0003024c 	.word	0x0003024c

000b4be0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4be0:	b508      	push	{r3, lr}
   b4be2:	4b02      	ldr	r3, [pc, #8]	; (b4bec <HAL_USB_USART_Receive_Data+0xc>)
   b4be4:	681b      	ldr	r3, [r3, #0]
   b4be6:	699b      	ldr	r3, [r3, #24]
   b4be8:	9301      	str	r3, [sp, #4]
   b4bea:	bd08      	pop	{r3, pc}
   b4bec:	0003024c 	.word	0x0003024c

000b4bf0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4bf0:	b508      	push	{r3, lr}
   b4bf2:	4b02      	ldr	r3, [pc, #8]	; (b4bfc <HAL_USB_USART_Send_Data+0xc>)
   b4bf4:	681b      	ldr	r3, [r3, #0]
   b4bf6:	69db      	ldr	r3, [r3, #28]
   b4bf8:	9301      	str	r3, [sp, #4]
   b4bfa:	bd08      	pop	{r3, pc}
   b4bfc:	0003024c 	.word	0x0003024c

000b4c00 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4c00:	b508      	push	{r3, lr}
   b4c02:	4b02      	ldr	r3, [pc, #8]	; (b4c0c <HAL_USB_USART_Flush_Data+0xc>)
   b4c04:	681b      	ldr	r3, [r3, #0]
   b4c06:	6a1b      	ldr	r3, [r3, #32]
   b4c08:	9301      	str	r3, [sp, #4]
   b4c0a:	bd08      	pop	{r3, pc}
   b4c0c:	0003024c 	.word	0x0003024c

000b4c10 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4c10:	b508      	push	{r3, lr}
   b4c12:	4b02      	ldr	r3, [pc, #8]	; (b4c1c <HAL_USB_USART_Is_Connected+0xc>)
   b4c14:	681b      	ldr	r3, [r3, #0]
   b4c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c18:	9301      	str	r3, [sp, #4]
   b4c1a:	bd08      	pop	{r3, pc}
   b4c1c:	0003024c 	.word	0x0003024c

000b4c20 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4c20:	b508      	push	{r3, lr}
   b4c22:	4b02      	ldr	r3, [pc, #8]	; (b4c2c <panic_+0xc>)
   b4c24:	681b      	ldr	r3, [r3, #0]
   b4c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c28:	9301      	str	r3, [sp, #4]
   b4c2a:	bd08      	pop	{r3, pc}
   b4c2c:	00030260 	.word	0x00030260

000b4c30 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4c30:	b508      	push	{r3, lr}
   b4c32:	4b02      	ldr	r3, [pc, #8]	; (b4c3c <log_message+0xc>)
   b4c34:	681b      	ldr	r3, [r3, #0]
   b4c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4c38:	9301      	str	r3, [sp, #4]
   b4c3a:	bd08      	pop	{r3, pc}
   b4c3c:	00030260 	.word	0x00030260

000b4c40 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4c40:	b508      	push	{r3, lr}
   b4c42:	4b02      	ldr	r3, [pc, #8]	; (b4c4c <set_system_mode+0xc>)
   b4c44:	681b      	ldr	r3, [r3, #0]
   b4c46:	685b      	ldr	r3, [r3, #4]
   b4c48:	9301      	str	r3, [sp, #4]
   b4c4a:	bd08      	pop	{r3, pc}
   b4c4c:	00030220 	.word	0x00030220

000b4c50 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4c50:	b508      	push	{r3, lr}
   b4c52:	4b02      	ldr	r3, [pc, #8]	; (b4c5c <system_delay_ms+0xc>)
   b4c54:	681b      	ldr	r3, [r3, #0]
   b4c56:	695b      	ldr	r3, [r3, #20]
   b4c58:	9301      	str	r3, [sp, #4]
   b4c5a:	bd08      	pop	{r3, pc}
   b4c5c:	00030220 	.word	0x00030220

000b4c60 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4c60:	b508      	push	{r3, lr}
   b4c62:	4b03      	ldr	r3, [pc, #12]	; (b4c70 <system_ctrl_set_app_request_handler+0x10>)
   b4c64:	681b      	ldr	r3, [r3, #0]
   b4c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4c6a:	9301      	str	r3, [sp, #4]
   b4c6c:	bd08      	pop	{r3, pc}
   b4c6e:	0000      	.short	0x0000
   b4c70:	00030220 	.word	0x00030220

000b4c74 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4c74:	b508      	push	{r3, lr}
   b4c76:	4b03      	ldr	r3, [pc, #12]	; (b4c84 <system_ctrl_set_result+0x10>)
   b4c78:	681b      	ldr	r3, [r3, #0]
   b4c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4c7e:	9301      	str	r3, [sp, #4]
   b4c80:	bd08      	pop	{r3, pc}
   b4c82:	0000      	.short	0x0000
   b4c84:	00030220 	.word	0x00030220

000b4c88 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4b02      	ldr	r3, [pc, #8]	; (b4c94 <network_config+0xc>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	681b      	ldr	r3, [r3, #0]
   b4c90:	9301      	str	r3, [sp, #4]
   b4c92:	bd08      	pop	{r3, pc}
   b4c94:	00030240 	.word	0x00030240

000b4c98 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c98:	b508      	push	{r3, lr}
   b4c9a:	4b02      	ldr	r3, [pc, #8]	; (b4ca4 <network_connect+0xc>)
   b4c9c:	681b      	ldr	r3, [r3, #0]
   b4c9e:	685b      	ldr	r3, [r3, #4]
   b4ca0:	9301      	str	r3, [sp, #4]
   b4ca2:	bd08      	pop	{r3, pc}
   b4ca4:	00030240 	.word	0x00030240

000b4ca8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4ca8:	b508      	push	{r3, lr}
   b4caa:	4b02      	ldr	r3, [pc, #8]	; (b4cb4 <network_connecting+0xc>)
   b4cac:	681b      	ldr	r3, [r3, #0]
   b4cae:	689b      	ldr	r3, [r3, #8]
   b4cb0:	9301      	str	r3, [sp, #4]
   b4cb2:	bd08      	pop	{r3, pc}
   b4cb4:	00030240 	.word	0x00030240

000b4cb8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4cb8:	b508      	push	{r3, lr}
   b4cba:	4b02      	ldr	r3, [pc, #8]	; (b4cc4 <network_disconnect+0xc>)
   b4cbc:	681b      	ldr	r3, [r3, #0]
   b4cbe:	68db      	ldr	r3, [r3, #12]
   b4cc0:	9301      	str	r3, [sp, #4]
   b4cc2:	bd08      	pop	{r3, pc}
   b4cc4:	00030240 	.word	0x00030240

000b4cc8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4cc8:	b508      	push	{r3, lr}
   b4cca:	4b02      	ldr	r3, [pc, #8]	; (b4cd4 <network_ready+0xc>)
   b4ccc:	681b      	ldr	r3, [r3, #0]
   b4cce:	691b      	ldr	r3, [r3, #16]
   b4cd0:	9301      	str	r3, [sp, #4]
   b4cd2:	bd08      	pop	{r3, pc}
   b4cd4:	00030240 	.word	0x00030240

000b4cd8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4cd8:	b508      	push	{r3, lr}
   b4cda:	4b02      	ldr	r3, [pc, #8]	; (b4ce4 <network_on+0xc>)
   b4cdc:	681b      	ldr	r3, [r3, #0]
   b4cde:	695b      	ldr	r3, [r3, #20]
   b4ce0:	9301      	str	r3, [sp, #4]
   b4ce2:	bd08      	pop	{r3, pc}
   b4ce4:	00030240 	.word	0x00030240

000b4ce8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4ce8:	b508      	push	{r3, lr}
   b4cea:	4b02      	ldr	r3, [pc, #8]	; (b4cf4 <network_off+0xc>)
   b4cec:	681b      	ldr	r3, [r3, #0]
   b4cee:	699b      	ldr	r3, [r3, #24]
   b4cf0:	9301      	str	r3, [sp, #4]
   b4cf2:	bd08      	pop	{r3, pc}
   b4cf4:	00030240 	.word	0x00030240

000b4cf8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4cf8:	b508      	push	{r3, lr}
   b4cfa:	4b02      	ldr	r3, [pc, #8]	; (b4d04 <network_listen+0xc>)
   b4cfc:	681b      	ldr	r3, [r3, #0]
   b4cfe:	69db      	ldr	r3, [r3, #28]
   b4d00:	9301      	str	r3, [sp, #4]
   b4d02:	bd08      	pop	{r3, pc}
   b4d04:	00030240 	.word	0x00030240

000b4d08 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4d08:	b508      	push	{r3, lr}
   b4d0a:	4b02      	ldr	r3, [pc, #8]	; (b4d14 <network_listening+0xc>)
   b4d0c:	681b      	ldr	r3, [r3, #0]
   b4d0e:	6a1b      	ldr	r3, [r3, #32]
   b4d10:	9301      	str	r3, [sp, #4]
   b4d12:	bd08      	pop	{r3, pc}
   b4d14:	00030240 	.word	0x00030240

000b4d18 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4d18:	b508      	push	{r3, lr}
   b4d1a:	4b02      	ldr	r3, [pc, #8]	; (b4d24 <network_set_listen_timeout+0xc>)
   b4d1c:	681b      	ldr	r3, [r3, #0]
   b4d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d20:	9301      	str	r3, [sp, #4]
   b4d22:	bd08      	pop	{r3, pc}
   b4d24:	00030240 	.word	0x00030240

000b4d28 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4d28:	b508      	push	{r3, lr}
   b4d2a:	4b02      	ldr	r3, [pc, #8]	; (b4d34 <network_get_listen_timeout+0xc>)
   b4d2c:	681b      	ldr	r3, [r3, #0]
   b4d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4d30:	9301      	str	r3, [sp, #4]
   b4d32:	bd08      	pop	{r3, pc}
   b4d34:	00030240 	.word	0x00030240

000b4d38 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4d38:	b508      	push	{r3, lr}
   b4d3a:	4b02      	ldr	r3, [pc, #8]	; (b4d44 <network_is_on+0xc>)
   b4d3c:	681b      	ldr	r3, [r3, #0]
   b4d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d40:	9301      	str	r3, [sp, #4]
   b4d42:	bd08      	pop	{r3, pc}
   b4d44:	00030240 	.word	0x00030240

000b4d48 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4d48:	b508      	push	{r3, lr}
   b4d4a:	4b02      	ldr	r3, [pc, #8]	; (b4d54 <network_is_off+0xc>)
   b4d4c:	681b      	ldr	r3, [r3, #0]
   b4d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d50:	9301      	str	r3, [sp, #4]
   b4d52:	bd08      	pop	{r3, pc}
   b4d54:	00030240 	.word	0x00030240

000b4d58 <network_preferred>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_preferred, network_handle_t(network_handle_t, bool, void*))
   b4d58:	b508      	push	{r3, lr}
   b4d5a:	4b02      	ldr	r3, [pc, #8]	; (b4d64 <network_preferred+0xc>)
   b4d5c:	681b      	ldr	r3, [r3, #0]
   b4d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4d60:	9301      	str	r3, [sp, #4]
   b4d62:	bd08      	pop	{r3, pc}
   b4d64:	00030240 	.word	0x00030240

000b4d68 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b4d68:	b508      	push	{r3, lr}
   b4d6a:	4b02      	ldr	r3, [pc, #8]	; (b4d74 <network_is_preferred+0xc>)
   b4d6c:	681b      	ldr	r3, [r3, #0]
   b4d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4d70:	9301      	str	r3, [sp, #4]
   b4d72:	bd08      	pop	{r3, pc}
   b4d74:	00030240 	.word	0x00030240

000b4d78 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b4d78:	b508      	push	{r3, lr}
   b4d7a:	4b02      	ldr	r3, [pc, #8]	; (b4d84 <spark_process+0xc>)
   b4d7c:	681b      	ldr	r3, [r3, #0]
   b4d7e:	689b      	ldr	r3, [r3, #8]
   b4d80:	9301      	str	r3, [sp, #4]
   b4d82:	bd08      	pop	{r3, pc}
   b4d84:	00030244 	.word	0x00030244

000b4d88 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4d88:	b508      	push	{r3, lr}
   b4d8a:	4b02      	ldr	r3, [pc, #8]	; (b4d94 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4d8c:	681b      	ldr	r3, [r3, #0]
   b4d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d90:	9301      	str	r3, [sp, #4]
   b4d92:	bd08      	pop	{r3, pc}
   b4d94:	00030244 	.word	0x00030244

000b4d98 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4d98:	b508      	push	{r3, lr}
   b4d9a:	4b02      	ldr	r3, [pc, #8]	; (b4da4 <malloc+0xc>)
   b4d9c:	681b      	ldr	r3, [r3, #0]
   b4d9e:	681b      	ldr	r3, [r3, #0]
   b4da0:	9301      	str	r3, [sp, #4]
   b4da2:	bd08      	pop	{r3, pc}
   b4da4:	0003021c 	.word	0x0003021c

000b4da8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4da8:	b508      	push	{r3, lr}
   b4daa:	4b02      	ldr	r3, [pc, #8]	; (b4db4 <free+0xc>)
   b4dac:	681b      	ldr	r3, [r3, #0]
   b4dae:	685b      	ldr	r3, [r3, #4]
   b4db0:	9301      	str	r3, [sp, #4]
   b4db2:	bd08      	pop	{r3, pc}
   b4db4:	0003021c 	.word	0x0003021c

000b4db8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4db8:	b508      	push	{r3, lr}
   b4dba:	4b02      	ldr	r3, [pc, #8]	; (b4dc4 <realloc+0xc>)
   b4dbc:	681b      	ldr	r3, [r3, #0]
   b4dbe:	689b      	ldr	r3, [r3, #8]
   b4dc0:	9301      	str	r3, [sp, #4]
   b4dc2:	bd08      	pop	{r3, pc}
   b4dc4:	0003021c 	.word	0x0003021c

000b4dc8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4dc8:	b508      	push	{r3, lr}
   b4dca:	4b02      	ldr	r3, [pc, #8]	; (b4dd4 <vsnprintf+0xc>)
   b4dcc:	681b      	ldr	r3, [r3, #0]
   b4dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4dd0:	9301      	str	r3, [sp, #4]
   b4dd2:	bd08      	pop	{r3, pc}
   b4dd4:	0003021c 	.word	0x0003021c

000b4dd8 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4dd8:	b508      	push	{r3, lr}
   b4dda:	4b02      	ldr	r3, [pc, #8]	; (b4de4 <__errno+0xc>)
   b4ddc:	681b      	ldr	r3, [r3, #0]
   b4dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4de0:	9301      	str	r3, [sp, #4]
   b4de2:	bd08      	pop	{r3, pc}
   b4de4:	0003021c 	.word	0x0003021c

000b4de8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4de8:	b508      	push	{r3, lr}
   b4dea:	4b02      	ldr	r3, [pc, #8]	; (b4df4 <__assert_func+0xc>)
   b4dec:	681b      	ldr	r3, [r3, #0]
   b4dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4df0:	9301      	str	r3, [sp, #4]
   b4df2:	bd08      	pop	{r3, pc}
   b4df4:	0003021c 	.word	0x0003021c

000b4df8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4df8:	b508      	push	{r3, lr}
   b4dfa:	4b02      	ldr	r3, [pc, #8]	; (b4e04 <newlib_impure_ptr_callback+0xc>)
   b4dfc:	681b      	ldr	r3, [r3, #0]
   b4dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e00:	9301      	str	r3, [sp, #4]
   b4e02:	bd08      	pop	{r3, pc}
   b4e04:	0003021c 	.word	0x0003021c

000b4e08 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4e08:	2200      	movs	r2, #0
   b4e0a:	6840      	ldr	r0, [r0, #4]
   b4e0c:	4611      	mov	r1, r2
   b4e0e:	f7ff bf7b 	b.w	b4d08 <network_listening>

000b4e12 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4e12:	2200      	movs	r2, #0
   b4e14:	6840      	ldr	r0, [r0, #4]
   b4e16:	4611      	mov	r1, r2
   b4e18:	f7ff bf86 	b.w	b4d28 <network_get_listen_timeout>

000b4e1c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4e1c:	6840      	ldr	r0, [r0, #4]
   b4e1e:	2200      	movs	r2, #0
   b4e20:	f7ff bf7a 	b.w	b4d18 <network_set_listen_timeout>

000b4e24 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4e24:	6840      	ldr	r0, [r0, #4]
   b4e26:	2200      	movs	r2, #0
   b4e28:	f081 0101 	eor.w	r1, r1, #1
   b4e2c:	f7ff bf64 	b.w	b4cf8 <network_listen>

000b4e30 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4e30:	2300      	movs	r3, #0
   b4e32:	6840      	ldr	r0, [r0, #4]
   b4e34:	461a      	mov	r2, r3
   b4e36:	4619      	mov	r1, r3
   b4e38:	f7ff bf56 	b.w	b4ce8 <network_off>

000b4e3c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4e3c:	2300      	movs	r3, #0
   b4e3e:	6840      	ldr	r0, [r0, #4]
   b4e40:	461a      	mov	r2, r3
   b4e42:	4619      	mov	r1, r3
   b4e44:	f7ff bf48 	b.w	b4cd8 <network_on>

000b4e48 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4e48:	2200      	movs	r2, #0
   b4e4a:	6840      	ldr	r0, [r0, #4]
   b4e4c:	4611      	mov	r1, r2
   b4e4e:	f7ff bf3b 	b.w	b4cc8 <network_ready>

000b4e52 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4e52:	2200      	movs	r2, #0
   b4e54:	6840      	ldr	r0, [r0, #4]
   b4e56:	4611      	mov	r1, r2
   b4e58:	f7ff bf26 	b.w	b4ca8 <network_connecting>

000b4e5c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4e5c:	6840      	ldr	r0, [r0, #4]
   b4e5e:	2200      	movs	r2, #0
   b4e60:	2102      	movs	r1, #2
   b4e62:	f7ff bf29 	b.w	b4cb8 <network_disconnect>

000b4e66 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4e66:	2300      	movs	r3, #0
   b4e68:	6840      	ldr	r0, [r0, #4]
   b4e6a:	461a      	mov	r2, r3
   b4e6c:	f7ff bf14 	b.w	b4c98 <network_connect>

000b4e70 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4e70:	4b02      	ldr	r3, [pc, #8]	; (b4e7c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4e72:	2203      	movs	r2, #3
   b4e74:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4e76:	4a02      	ldr	r2, [pc, #8]	; (b4e80 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4e78:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4e7a:	4770      	bx	lr
   b4e7c:	2003e6b4 	.word	0x2003e6b4
   b4e80:	000b6a20 	.word	0x000b6a20

000b4e84 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4e84:	b510      	push	{r4, lr}
   b4e86:	4604      	mov	r4, r0
   b4e88:	4608      	mov	r0, r1
{
    _spi = spi;
   b4e8a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4e8c:	f7ff fe78 	bl	b4b80 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4e90:	2300      	movs	r3, #0
   b4e92:	6063      	str	r3, [r4, #4]
}
   b4e94:	4620      	mov	r0, r4
   b4e96:	bd10      	pop	{r4, pc}

000b4e98 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4e98:	4b05      	ldr	r3, [pc, #20]	; (b4eb0 <_GLOBAL__sub_I_System+0x18>)
   b4e9a:	2202      	movs	r2, #2
   b4e9c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4e9e:	4b05      	ldr	r3, [pc, #20]	; (b4eb4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4ea0:	4a05      	ldr	r2, [pc, #20]	; (b4eb8 <_GLOBAL__sub_I_System+0x20>)
   b4ea2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4ea4:	2000      	movs	r0, #0
   b4ea6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4eaa:	f7ff bec9 	b.w	b4c40 <set_system_mode>
   b4eae:	bf00      	nop
   b4eb0:	2003e6c8 	.word	0x2003e6c8
   b4eb4:	2003e6bc 	.word	0x2003e6bc
   b4eb8:	ffff0000 	.word	0xffff0000

000b4ebc <_ZN21StringPrintableHelperD1Ev>:
        return float(atof(buffer));
    }
    return 0;
}

class StringPrintableHelper : public Print
   b4ebc:	4770      	bx	lr

000b4ebe <_ZN21StringPrintableHelperD0Ev>:
   b4ebe:	b510      	push	{r4, lr}
   b4ec0:	210c      	movs	r1, #12
   b4ec2:	4604      	mov	r4, r0
   b4ec4:	f7ff fab7 	bl	b4436 <_ZdlPvj>
   b4ec8:	4620      	mov	r0, r4
   b4eca:	bd10      	pop	{r4, pc}

000b4ecc <_ZN6StringD1Ev>:
String::~String()
   b4ecc:	b510      	push	{r4, lr}
   b4ece:	4604      	mov	r4, r0
    free(buffer);
   b4ed0:	6800      	ldr	r0, [r0, #0]
   b4ed2:	f7ff ff69 	bl	b4da8 <free>
}
   b4ed6:	4620      	mov	r0, r4
   b4ed8:	bd10      	pop	{r4, pc}

000b4eda <_ZN6String12changeBufferEj>:
{
   b4eda:	b538      	push	{r3, r4, r5, lr}
   b4edc:	4604      	mov	r4, r0
   b4ede:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4ee0:	6800      	ldr	r0, [r0, #0]
   b4ee2:	3101      	adds	r1, #1
   b4ee4:	f7ff ff68 	bl	b4db8 <realloc>
    if (newbuffer) {
   b4ee8:	b110      	cbz	r0, b4ef0 <_ZN6String12changeBufferEj+0x16>
        capacity = maxStrLen;
   b4eea:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b4eee:	2001      	movs	r0, #1
}
   b4ef0:	bd38      	pop	{r3, r4, r5, pc}

000b4ef2 <_ZN6String7reserveEj>:
{
   b4ef2:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
   b4ef4:	6803      	ldr	r3, [r0, #0]
{
   b4ef6:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
   b4ef8:	b123      	cbz	r3, b4f04 <_ZN6String7reserveEj+0x12>
   b4efa:	6843      	ldr	r3, [r0, #4]
   b4efc:	428b      	cmp	r3, r1
   b4efe:	d301      	bcc.n	b4f04 <_ZN6String7reserveEj+0x12>
   b4f00:	2001      	movs	r0, #1
}
   b4f02:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b4f04:	4620      	mov	r0, r4
   b4f06:	f7ff ffe8 	bl	b4eda <_ZN6String12changeBufferEj>
   b4f0a:	2800      	cmp	r0, #0
   b4f0c:	d0f9      	beq.n	b4f02 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b4f0e:	68a3      	ldr	r3, [r4, #8]
   b4f10:	2b00      	cmp	r3, #0
   b4f12:	d1f5      	bne.n	b4f00 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b4f14:	6822      	ldr	r2, [r4, #0]
   b4f16:	7013      	strb	r3, [r2, #0]
   b4f18:	e7f2      	b.n	b4f00 <_ZN6String7reserveEj+0xe>

000b4f1a <_ZN6String6concatEPKcj>:
{
   b4f1a:	b570      	push	{r4, r5, r6, lr}
   b4f1c:	4605      	mov	r5, r0
    if (!cstr) {
   b4f1e:	460e      	mov	r6, r1
   b4f20:	b909      	cbnz	r1, b4f26 <_ZN6String6concatEPKcj+0xc>
        return 0;
   b4f22:	2000      	movs	r0, #0
}
   b4f24:	bd70      	pop	{r4, r5, r6, pc}
    if (length == 0) {
   b4f26:	b16a      	cbz	r2, b4f44 <_ZN6String6concatEPKcj+0x2a>
    unsigned int newlen = len + length;
   b4f28:	6884      	ldr	r4, [r0, #8]
   b4f2a:	4414      	add	r4, r2
    if (!reserve(newlen)) {
   b4f2c:	4621      	mov	r1, r4
   b4f2e:	f7ff ffe0 	bl	b4ef2 <_ZN6String7reserveEj>
   b4f32:	2800      	cmp	r0, #0
   b4f34:	d0f5      	beq.n	b4f22 <_ZN6String6concatEPKcj+0x8>
    strcpy(buffer + len, cstr);
   b4f36:	6828      	ldr	r0, [r5, #0]
   b4f38:	68ab      	ldr	r3, [r5, #8]
   b4f3a:	4631      	mov	r1, r6
   b4f3c:	4418      	add	r0, r3
   b4f3e:	f001 fc91 	bl	b6864 <strcpy>
    len = newlen;
   b4f42:	60ac      	str	r4, [r5, #8]
        return 1;
   b4f44:	2001      	movs	r0, #1
   b4f46:	e7ed      	b.n	b4f24 <_ZN6String6concatEPKcj+0xa>

000b4f48 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   b4f48:	b538      	push	{r3, r4, r5, lr}
   b4f4a:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   b4f4c:	6880      	ldr	r0, [r0, #8]
    // memory management
    // return true on success, false on failure (in which case, the string
    // is left unchanged).  reserve(0), if successful, will validate an
    // invalid string (i.e., "if (s)" will be true afterwards)
    unsigned char reserve(unsigned int size);
    inline unsigned int length(void) const {return len;}
   b4f4e:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   b4f50:	f7ff ffe3 	bl	b4f1a <_ZN6String6concatEPKcj>
   b4f54:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   b4f56:	6898      	ldr	r0, [r3, #8]
    }
   b4f58:	1b40      	subs	r0, r0, r5
   b4f5a:	bd38      	pop	{r3, r4, r5, pc}

000b4f5c <_ZN6String6concatEc>:
{
   b4f5c:	b507      	push	{r0, r1, r2, lr}
    char buf[2] = {};
   b4f5e:	2300      	movs	r3, #0
   b4f60:	f8ad 3004 	strh.w	r3, [sp, #4]
    return concat(buf, 1);
   b4f64:	2201      	movs	r2, #1
    buf[0] = c;
   b4f66:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
   b4f6a:	a901      	add	r1, sp, #4
   b4f6c:	f7ff ffd5 	bl	b4f1a <_ZN6String6concatEPKcj>
}
   b4f70:	b003      	add	sp, #12
   b4f72:	f85d fb04 	ldr.w	pc, [sp], #4

000b4f76 <_ZN21StringPrintableHelper5writeEh>:

    virtual size_t write(uint8_t c) override
   b4f76:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   b4f78:	6880      	ldr	r0, [r0, #8]
   b4f7a:	f7ff ffef 	bl	b4f5c <_ZN6String6concatEc>
    }
   b4f7e:	bd08      	pop	{r3, pc}

000b4f80 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   b4f80:	b530      	push	{r4, r5, lr}
   b4f82:	b085      	sub	sp, #20
    buffer = nullptr;
   b4f84:	2300      	movs	r3, #0
String::String(const Printable& printable)
   b4f86:	460d      	mov	r5, r1
#endif // PARTICLE_WIRING_PRINT_NO_FLOAT
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b4f88:	9302      	str	r3, [sp, #8]
    capacity = 0;
   b4f8a:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b4f8e:	6083      	str	r3, [r0, #8]
    flags = 0;
   b4f90:	7303      	strb	r3, [r0, #12]
        s.reserve(20);
   b4f92:	2114      	movs	r1, #20
    StringPrintableHelper(String& s_) : s(s_) {
   b4f94:	4b06      	ldr	r3, [pc, #24]	; (b4fb0 <_ZN6StringC1ERK9Printable+0x30>)
   b4f96:	9301      	str	r3, [sp, #4]
String::String(const Printable& printable)
   b4f98:	4604      	mov	r4, r0
    StringPrintableHelper(String& s_) : s(s_) {
   b4f9a:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   b4f9c:	f7ff ffa9 	bl	b4ef2 <_ZN6String7reserveEj>
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   b4fa0:	682b      	ldr	r3, [r5, #0]
   b4fa2:	a901      	add	r1, sp, #4
   b4fa4:	681b      	ldr	r3, [r3, #0]
   b4fa6:	4628      	mov	r0, r5
   b4fa8:	4798      	blx	r3
}
   b4faa:	4620      	mov	r0, r4
   b4fac:	b005      	add	sp, #20
   b4fae:	bd30      	pop	{r4, r5, pc}
   b4fb0:	000b6a64 	.word	0x000b6a64

000b4fb4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4fb4:	4802      	ldr	r0, [pc, #8]	; (b4fc0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4fb6:	2300      	movs	r3, #0
   b4fb8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4fba:	f7ff bcf1 	b.w	b49a0 <os_mutex_recursive_create>
   b4fbe:	bf00      	nop
   b4fc0:	2003e6cc 	.word	0x2003e6cc

000b4fc4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4fc6:	4606      	mov	r6, r0
   b4fc8:	460d      	mov	r5, r1
  size_t n = 0;
   b4fca:	188f      	adds	r7, r1, r2
   b4fcc:	2400      	movs	r4, #0
  while (size--) {
   b4fce:	42bd      	cmp	r5, r7
   b4fd0:	d00c      	beq.n	b4fec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4fd2:	6833      	ldr	r3, [r6, #0]
   b4fd4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4fd8:	689b      	ldr	r3, [r3, #8]
   b4fda:	4630      	mov	r0, r6
   b4fdc:	4798      	blx	r3
     if (chunk>=0)
   b4fde:	1e03      	subs	r3, r0, #0
   b4fe0:	db01      	blt.n	b4fe6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4fe2:	441c      	add	r4, r3
  while (size--) {
   b4fe4:	e7f3      	b.n	b4fce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4fe6:	2c00      	cmp	r4, #0
   b4fe8:	bf08      	it	eq
   b4fea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4fec:	4620      	mov	r0, r4
   b4fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4ff0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4ff0:	b513      	push	{r0, r1, r4, lr}
   b4ff2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4ff4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4ff6:	b159      	cbz	r1, b5010 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4ff8:	9101      	str	r1, [sp, #4]
   b4ffa:	f7ff f9d5 	bl	b43a8 <strlen>
   b4ffe:	6823      	ldr	r3, [r4, #0]
   b5000:	9901      	ldr	r1, [sp, #4]
   b5002:	68db      	ldr	r3, [r3, #12]
   b5004:	4602      	mov	r2, r0
   b5006:	4620      	mov	r0, r4
    }
   b5008:	b002      	add	sp, #8
   b500a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b500e:	4718      	bx	r3
    }
   b5010:	b002      	add	sp, #8
   b5012:	bd10      	pop	{r4, pc}

000b5014 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5014:	b508      	push	{r3, lr}
  return write(str);
   b5016:	f7ff ffeb 	bl	b4ff0 <_ZN5Print5writeEPKc>
}
   b501a:	bd08      	pop	{r3, pc}

000b501c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b501c:	6803      	ldr	r3, [r0, #0]
   b501e:	689b      	ldr	r3, [r3, #8]
   b5020:	4718      	bx	r3

000b5022 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5022:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5024:	210d      	movs	r1, #13
{
   b5026:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5028:	f7ff fff8 	bl	b501c <_ZN5Print5printEc>
  n += print('\n');
   b502c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b502e:	4604      	mov	r4, r0
  n += print('\n');
   b5030:	4628      	mov	r0, r5
   b5032:	f7ff fff3 	bl	b501c <_ZN5Print5printEc>
  return n;
}
   b5036:	4420      	add	r0, r4
   b5038:	bd38      	pop	{r3, r4, r5, pc}

000b503a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b503a:	b538      	push	{r3, r4, r5, lr}
   b503c:	4605      	mov	r5, r0
  return write(str);
   b503e:	f7ff ffd7 	bl	b4ff0 <_ZN5Print5writeEPKc>
   b5042:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5044:	4628      	mov	r0, r5
   b5046:	f7ff ffec 	bl	b5022 <_ZN5Print7printlnEv>
  return n;
}
   b504a:	4420      	add	r0, r4
   b504c:	bd38      	pop	{r3, r4, r5, pc}

000b504e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b504e:	b530      	push	{r4, r5, lr}
   b5050:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5052:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5054:	2a01      	cmp	r2, #1
  *str = '\0';
   b5056:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b505a:	bf98      	it	ls
   b505c:	220a      	movls	r2, #10
   b505e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5060:	460d      	mov	r5, r1
   b5062:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5066:	fb01 5312 	mls	r3, r1, r2, r5
   b506a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b506e:	2b09      	cmp	r3, #9
   b5070:	bf94      	ite	ls
   b5072:	3330      	addls	r3, #48	; 0x30
   b5074:	3337      	addhi	r3, #55	; 0x37
   b5076:	b2db      	uxtb	r3, r3
  } while(n);
   b5078:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b507a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b507e:	d9ef      	bls.n	b5060 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5080:	4621      	mov	r1, r4
   b5082:	f7ff ffb5 	bl	b4ff0 <_ZN5Print5writeEPKc>
}
   b5086:	b00b      	add	sp, #44	; 0x2c
   b5088:	bd30      	pop	{r4, r5, pc}

000b508a <_ZN5Print7vprintfEbPKcSt9__va_list>:
  return n;
}
#endif // PARTICLE_WIRING_PRINT_NO_FLOAT

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b508a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b508e:	b086      	sub	sp, #24
   b5090:	af00      	add	r7, sp, #0
   b5092:	4605      	mov	r5, r0
   b5094:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5096:	1d38      	adds	r0, r7, #4
   b5098:	2114      	movs	r1, #20
{
   b509a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b509c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b509e:	f7ff fe93 	bl	b4dc8 <vsnprintf>

    if (n<bufsize)
   b50a2:	2813      	cmp	r0, #19
   b50a4:	d80e      	bhi.n	b50c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b50a6:	1d39      	adds	r1, r7, #4
   b50a8:	4628      	mov	r0, r5
   b50aa:	f7ff ffa1 	bl	b4ff0 <_ZN5Print5writeEPKc>
   b50ae:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b50b0:	b11e      	cbz	r6, b50ba <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b50b2:	4628      	mov	r0, r5
   b50b4:	f7ff ffb5 	bl	b5022 <_ZN5Print7printlnEv>
   b50b8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b50ba:	4620      	mov	r0, r4
   b50bc:	3718      	adds	r7, #24
   b50be:	46bd      	mov	sp, r7
   b50c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b50c4:	f100 0308 	add.w	r3, r0, #8
   b50c8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b50cc:	46e8      	mov	r8, sp
        char bigger[n+1];
   b50ce:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b50d2:	4622      	mov	r2, r4
   b50d4:	1c41      	adds	r1, r0, #1
   b50d6:	683b      	ldr	r3, [r7, #0]
   b50d8:	4668      	mov	r0, sp
   b50da:	f7ff fe75 	bl	b4dc8 <vsnprintf>
  return write(str);
   b50de:	4669      	mov	r1, sp
   b50e0:	4628      	mov	r0, r5
   b50e2:	f7ff ff85 	bl	b4ff0 <_ZN5Print5writeEPKc>
   b50e6:	4604      	mov	r4, r0
   b50e8:	46c5      	mov	sp, r8
   b50ea:	e7e1      	b.n	b50b0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b50ec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b50ec:	4b01      	ldr	r3, [pc, #4]	; (b50f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b50ee:	4a02      	ldr	r2, [pc, #8]	; (b50f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b50f0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b50f2:	4770      	bx	lr
   b50f4:	2003e6d0 	.word	0x2003e6d0
   b50f8:	000b6a7c 	.word	0x000b6a7c

000b50fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b50fc:	4b02      	ldr	r3, [pc, #8]	; (b5108 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b50fe:	681a      	ldr	r2, [r3, #0]
   b5100:	4b02      	ldr	r3, [pc, #8]	; (b510c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5102:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5104:	4770      	bx	lr
   b5106:	bf00      	nop
   b5108:	2003e5b8 	.word	0x2003e5b8
   b510c:	2003e6d4 	.word	0x2003e6d4

000b5110 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5110:	2100      	movs	r1, #0
   b5112:	f7ff bd9d 	b.w	b4c50 <system_delay_ms>

000b5116 <_ZN9TCPServer5writeEhm>:
    }

    return _client;
}

size_t TCPServer::write(uint8_t b, system_tick_t timeout) {
   b5116:	b513      	push	{r0, r1, r4, lr}
   b5118:	4613      	mov	r3, r2
    return write(&b, sizeof(b), timeout);
   b511a:	6802      	ldr	r2, [r0, #0]
size_t TCPServer::write(uint8_t b, system_tick_t timeout) {
   b511c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, sizeof(b), timeout);
   b5120:	6994      	ldr	r4, [r2, #24]
   b5122:	f10d 0107 	add.w	r1, sp, #7
   b5126:	2201      	movs	r2, #1
   b5128:	47a0      	blx	r4
}
   b512a:	b002      	add	sp, #8
   b512c:	bd10      	pop	{r4, pc}

000b512e <_ZN9TCPServer5writeEh>:
    size_t ret = _client.write(buf, size, timeout);
    setWriteError(_client.getWriteError());
    return ret;
}

size_t TCPServer::write(uint8_t b) {
   b512e:	b507      	push	{r0, r1, r2, lr}
    return write(&b, 1);
   b5130:	6803      	ldr	r3, [r0, #0]
size_t TCPServer::write(uint8_t b) {
   b5132:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1);
   b5136:	68db      	ldr	r3, [r3, #12]
   b5138:	2201      	movs	r2, #1
   b513a:	f10d 0107 	add.w	r1, sp, #7
   b513e:	4798      	blx	r3
}
   b5140:	b003      	add	sp, #12
   b5142:	f85d fb04 	ldr.w	pc, [sp], #4

000b5146 <_ZN9TCPServer5writeEPKhj>:

size_t TCPServer::write(const uint8_t *buffer, size_t size) {
   b5146:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5148:	6803      	ldr	r3, [r0, #0]
   b514a:	699c      	ldr	r4, [r3, #24]
   b514c:	f04f 33ff 	mov.w	r3, #4294967295
   b5150:	46a4      	mov	ip, r4
}
   b5152:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5156:	4760      	bx	ip

000b5158 <_ZN9TCPServer5writeEPKhjm>:
size_t TCPServer::write(const uint8_t *buf, size_t size, system_tick_t timeout) {
   b5158:	b510      	push	{r4, lr}
   b515a:	4604      	mov	r4, r0
    void setWriteError(int err = 1) { write_error = err; }
   b515c:	2000      	movs	r0, #0
   b515e:	61a0      	str	r0, [r4, #24]
    size_t ret = _client.write(buf, size, timeout);
   b5160:	f104 0014 	add.w	r0, r4, #20
   b5164:	f000 fc68 	bl	b5a38 <_ZN9TCPClient5writeEPKhjm>
   b5168:	69a3      	ldr	r3, [r4, #24]
   b516a:	6063      	str	r3, [r4, #4]
}
   b516c:	bd10      	pop	{r4, pc}

000b516e <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b516e:	b530      	push	{r4, r5, lr}
   b5170:	b087      	sub	sp, #28
   b5172:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5174:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5176:	4668      	mov	r0, sp
   b5178:	f000 facc 	bl	b5714 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b517c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b517e:	3404      	adds	r4, #4
   b5180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5182:	682b      	ldr	r3, [r5, #0]
   b5184:	7023      	strb	r3, [r4, #0]
    }
   b5186:	b007      	add	sp, #28
   b5188:	bd30      	pop	{r4, r5, pc}

000b518a <_ZN15TCPServerClient8remoteIPEv>:
    virtual IPAddress remoteIP() override {
   b518a:	b570      	push	{r4, r5, r6, lr}
   b518c:	460c      	mov	r4, r1
   b518e:	b094      	sub	sp, #80	; 0x50
        struct sockaddr_storage saddr = {};
   b5190:	251c      	movs	r5, #28
    virtual IPAddress remoteIP() override {
   b5192:	4606      	mov	r6, r0
        IPAddress addr;
   b5194:	f000 fa7a 	bl	b568c <_ZN9IPAddressC1Ev>
        struct sockaddr_storage saddr = {};
   b5198:	462a      	mov	r2, r5
   b519a:	2100      	movs	r1, #0
   b519c:	a80d      	add	r0, sp, #52	; 0x34
   b519e:	f001 fb2b 	bl	b67f8 <memset>
    friend class TCPServer;

    using Print::write;

protected:
    inline sock_handle_t sock_handle() { return d_->sock; }
   b51a2:	6963      	ldr	r3, [r4, #20]
        socklen_t len = sizeof(saddr);
   b51a4:	9501      	str	r5, [sp, #4]
        if (!sock_getpeername(sock_handle(), (struct sockaddr*)&saddr, &len)) {
   b51a6:	a90d      	add	r1, sp, #52	; 0x34
   b51a8:	6818      	ldr	r0, [r3, #0]
   b51aa:	aa01      	add	r2, sp, #4
   b51ac:	f7ff fca0 	bl	b4af0 <sock_getpeername>
   b51b0:	4601      	mov	r1, r0
   b51b2:	bb20      	cbnz	r0, b51fe <_ZN15TCPServerClient8remoteIPEv+0x74>
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b51b4:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   b51b8:	2b02      	cmp	r3, #2
   b51ba:	d104      	bne.n	b51c6 <_ZN15TCPServerClient8remoteIPEv+0x3c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b51bc:	a90e      	add	r1, sp, #56	; 0x38
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b51be:	4630      	mov	r0, r6
   b51c0:	f7ff ffd5 	bl	b516e <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        return addr;
   b51c4:	e01b      	b.n	b51fe <_ZN15TCPServerClient8remoteIPEv+0x74>
    else if (saddr->sa_family == AF_INET6) {
   b51c6:	2b0a      	cmp	r3, #10
   b51c8:	d119      	bne.n	b51fe <_ZN15TCPServerClient8remoteIPEv+0x74>
        HAL_IPAddress a = {};
   b51ca:	ac02      	add	r4, sp, #8
   b51cc:	2211      	movs	r2, #17
   b51ce:	4620      	mov	r0, r4
   b51d0:	f001 fb12 	bl	b67f8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b51d4:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
   b51d8:	4313      	orrs	r3, r2
   b51da:	d013      	beq.n	b5204 <_ZN15TCPServerClient8remoteIPEv+0x7a>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b51dc:	ab0f      	add	r3, sp, #60	; 0x3c
   b51de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
class IPAddress : public Printable {
   b51e0:	ad08      	add	r5, sp, #32
   b51e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            a.v = 6;
   b51e6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b51e8:	4621      	mov	r1, r4
   b51ea:	a807      	add	r0, sp, #28
            a.v = 6;
   b51ec:	f88d 3018 	strb.w	r3, [sp, #24]
            addr = IPAddress(a);
   b51f0:	f000 fa5a 	bl	b56a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b51f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b51f6:	1d34      	adds	r4, r6, #4
   b51f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b51fa:	682b      	ldr	r3, [r5, #0]
   b51fc:	7023      	strb	r3, [r4, #0]
    }
   b51fe:	4630      	mov	r0, r6
   b5200:	b014      	add	sp, #80	; 0x50
   b5202:	bd70      	pop	{r4, r5, r6, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5204:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5208:	9d11      	ldr	r5, [sp, #68]	; 0x44
   b520a:	f7ff fbd9 	bl	b49c0 <inet_htonl>
   b520e:	4285      	cmp	r5, r0
   b5210:	d1e4      	bne.n	b51dc <_ZN15TCPServerClient8remoteIPEv+0x52>
            addr = (const uint8_t*)(&ptr[3]);
   b5212:	a912      	add	r1, sp, #72	; 0x48
   b5214:	e7d3      	b.n	b51be <_ZN15TCPServerClient8remoteIPEv+0x34>

000b5216 <_ZN9TCPClientaSERKS_.isra.0>:
class TCPClient : public Client {
   b5216:	b538      	push	{r3, r4, r5, lr}
class Print
   b5218:	684b      	ldr	r3, [r1, #4]
   b521a:	6043      	str	r3, [r0, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   b521c:	688b      	ldr	r3, [r1, #8]
   b521e:	6083      	str	r3, [r0, #8]
   b5220:	68cb      	ldr	r3, [r1, #12]
   b5222:	60c3      	str	r3, [r0, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5224:	690b      	ldr	r3, [r1, #16]
   b5226:	6103      	str	r3, [r0, #16]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5228:	694b      	ldr	r3, [r1, #20]
   b522a:	6143      	str	r3, [r0, #20]
   b522c:	698d      	ldr	r5, [r1, #24]
	if (__tmp != _M_pi)
   b522e:	6983      	ldr	r3, [r0, #24]
   b5230:	429d      	cmp	r5, r3
   b5232:	4604      	mov	r4, r0
   b5234:	d008      	beq.n	b5248 <_ZN9TCPClientaSERKS_.isra.0+0x32>
	    if (__tmp != 0)
   b5236:	b115      	cbz	r5, b523e <_ZN9TCPClientaSERKS_.isra.0+0x28>
    { ++_M_use_count; }
   b5238:	686b      	ldr	r3, [r5, #4]
   b523a:	3301      	adds	r3, #1
   b523c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b523e:	69a0      	ldr	r0, [r4, #24]
   b5240:	b108      	cbz	r0, b5246 <_ZN9TCPClientaSERKS_.isra.0+0x30>
	      _M_pi->_M_release();
   b5242:	f7ff f91d 	bl	b4480 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5246:	61a5      	str	r5, [r4, #24]
   b5248:	bd38      	pop	{r3, r4, r5, pc}
	...

000b524c <_ZN15TCPServerClientD1Ev>:
class TCPServerClient : public TCPClient {
   b524c:	b510      	push	{r4, lr}
   b524e:	4b03      	ldr	r3, [pc, #12]	; (b525c <_ZN15TCPServerClientD1Ev+0x10>)
   b5250:	6003      	str	r3, [r0, #0]
   b5252:	4604      	mov	r4, r0
   b5254:	f7ff f92e 	bl	b44b4 <_ZN9TCPClientD1Ev>
   b5258:	4620      	mov	r0, r4
   b525a:	bd10      	pop	{r4, pc}
   b525c:	000b6acc 	.word	0x000b6acc

000b5260 <_ZN15TCPServerClientD0Ev>:
   b5260:	b510      	push	{r4, lr}
   b5262:	4604      	mov	r4, r0
   b5264:	f7ff fff2 	bl	b524c <_ZN15TCPServerClientD1Ev>
   b5268:	4620      	mov	r0, r4
   b526a:	211c      	movs	r1, #28
   b526c:	f7ff f8e3 	bl	b4436 <_ZdlPvj>
   b5270:	4620      	mov	r0, r4
   b5272:	bd10      	pop	{r4, pc}

000b5274 <_ZN9TCPServerC1Etm>:
TCPServer::TCPServer(uint16_t port, network_interface_t nif)
   b5274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
          _client(-1) {
   b5276:	4b12      	ldr	r3, [pc, #72]	; (b52c0 <_ZN9TCPServerC1Etm+0x4c>)
   b5278:	6003      	str	r3, [r0, #0]
    Print() : write_error(0) {}
   b527a:	2500      	movs	r5, #0
   b527c:	f04f 36ff 	mov.w	r6, #4294967295
   b5280:	8101      	strh	r1, [r0, #8]
   b5282:	60c2      	str	r2, [r0, #12]
   b5284:	6045      	str	r5, [r0, #4]
   b5286:	6106      	str	r6, [r0, #16]
   b5288:	4631      	mov	r1, r6
        if (!s_invalid_client) {
   b528a:	4f0e      	ldr	r7, [pc, #56]	; (b52c4 <_ZN9TCPServerC1Etm+0x50>)
TCPServer::TCPServer(uint16_t port, network_interface_t nif)
   b528c:	4604      	mov	r4, r0
          _client(-1) {
   b528e:	3014      	adds	r0, #20
   b5290:	f000 fe0a 	bl	b5ea8 <_ZN9TCPClientC1Ei>
        os_thread_scheduling(false, NULL);
   b5294:	4629      	mov	r1, r5
   b5296:	4628      	mov	r0, r5
   b5298:	f7ff fb7a 	bl	b4990 <os_thread_scheduling>
        if (!s_invalid_client) {
   b529c:	683b      	ldr	r3, [r7, #0]
   b529e:	b943      	cbnz	r3, b52b2 <_ZN9TCPServerC1Etm+0x3e>
            s_invalid_client = new TCPClient(-1);
   b52a0:	201c      	movs	r0, #28
   b52a2:	f7ff f8c4 	bl	b442e <_Znwj>
   b52a6:	4605      	mov	r5, r0
   b52a8:	b110      	cbz	r0, b52b0 <_ZN9TCPServerC1Etm+0x3c>
   b52aa:	4631      	mov	r1, r6
   b52ac:	f000 fdfc 	bl	b5ea8 <_ZN9TCPClientC1Ei>
   b52b0:	603d      	str	r5, [r7, #0]
        os_thread_scheduling(true, NULL);
   b52b2:	2100      	movs	r1, #0
   b52b4:	2001      	movs	r0, #1
   b52b6:	f7ff fb6b 	bl	b4990 <os_thread_scheduling>
}
   b52ba:	4620      	mov	r0, r4
   b52bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b52be:	bf00      	nop
   b52c0:	000b6b18 	.word	0x000b6b18
   b52c4:	2003e6d8 	.word	0x2003e6d8

000b52c8 <_ZN9TCPServer4stopEv>:
void TCPServer::stop() {
   b52c8:	b510      	push	{r4, lr}
   b52ca:	4604      	mov	r4, r0
    _client.stop();
   b52cc:	3014      	adds	r0, #20
   b52ce:	f000 fdc3 	bl	b5e58 <_ZN9TCPClient4stopEv>
    sock_close(_sock);
   b52d2:	6920      	ldr	r0, [r4, #16]
   b52d4:	f7ff fc1c 	bl	b4b10 <sock_close>
    _sock = -1;
   b52d8:	f04f 33ff 	mov.w	r3, #4294967295
   b52dc:	6123      	str	r3, [r4, #16]
}
   b52de:	bd10      	pop	{r4, pc}

000b52e0 <_ZN9TCPServerD1Ev>:
    sock_handle_t _sock;
    TCPClient _client;

public:
    TCPServer(uint16_t, network_interface_t nif=0);
    ~TCPServer() { stop(); }
   b52e0:	b538      	push	{r3, r4, r5, lr}
   b52e2:	4605      	mov	r5, r0
   b52e4:	4b05      	ldr	r3, [pc, #20]	; (b52fc <_ZN9TCPServerD1Ev+0x1c>)
   b52e6:	f845 3b14 	str.w	r3, [r5], #20
   b52ea:	4604      	mov	r4, r0
   b52ec:	f7ff ffec 	bl	b52c8 <_ZN9TCPServer4stopEv>
   b52f0:	4628      	mov	r0, r5
   b52f2:	f7ff f8df 	bl	b44b4 <_ZN9TCPClientD1Ev>
   b52f6:	4620      	mov	r0, r4
   b52f8:	bd38      	pop	{r3, r4, r5, pc}
   b52fa:	bf00      	nop
   b52fc:	000b6b18 	.word	0x000b6b18

000b5300 <_ZN9TCPServerD0Ev>:
   b5300:	b510      	push	{r4, lr}
   b5302:	4604      	mov	r4, r0
   b5304:	f7ff ffec 	bl	b52e0 <_ZN9TCPServerD1Ev>
   b5308:	4620      	mov	r0, r4
   b530a:	2130      	movs	r1, #48	; 0x30
   b530c:	f7ff f893 	bl	b4436 <_ZdlPvj>
   b5310:	4620      	mov	r0, r4
   b5312:	bd10      	pop	{r4, pc}

000b5314 <_ZN9TCPServer5beginEv>:
bool TCPServer::begin() {
   b5314:	b570      	push	{r4, r5, r6, lr}
   b5316:	4604      	mov	r4, r0
   b5318:	b08c      	sub	sp, #48	; 0x30
    stop();
   b531a:	f7ff ffd5 	bl	b52c8 <_ZN9TCPServer4stopEv>
    if (socket_handle_valid(_sock)) {
   b531e:	6923      	ldr	r3, [r4, #16]
   b5320:	2b00      	cmp	r3, #0
   b5322:	da5c      	bge.n	b53de <_ZN9TCPServer5beginEv+0xca>
    struct sockaddr_in6 saddr = {};
   b5324:	221c      	movs	r2, #28
   b5326:	2100      	movs	r1, #0
   b5328:	a805      	add	r0, sp, #20
   b532a:	f001 fa65 	bl	b67f8 <memset>
    saddr.sin6_len = sizeof(saddr);
   b532e:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(_port);
   b5332:	8920      	ldrh	r0, [r4, #8]
    saddr.sin6_len = sizeof(saddr);
   b5334:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(_port);
   b5338:	f7ff fb4a 	bl	b49d0 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   b533c:	2206      	movs	r2, #6
    saddr.sin6_port = htons(_port);
   b533e:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   b5342:	2101      	movs	r1, #1
   b5344:	200a      	movs	r0, #10
   b5346:	f7ff fc0b 	bl	b4b60 <sock_socket>
    CHECK_TRUE(_sock >= 0, false);
   b534a:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   b534c:	6120      	str	r0, [r4, #16]
    CHECK_TRUE(_sock >= 0, false);
   b534e:	da06      	bge.n	b535e <_ZN9TCPServer5beginEv+0x4a>
    NAMED_SCOPE_GUARD(done, {
   b5350:	4620      	mov	r0, r4
            return false;
   b5352:	2500      	movs	r5, #0
    NAMED_SCOPE_GUARD(done, {
   b5354:	f7ff ffb8 	bl	b52c8 <_ZN9TCPServer4stopEv>
}
   b5358:	4628      	mov	r0, r5
   b535a:	b00c      	add	sp, #48	; 0x30
   b535c:	bd70      	pop	{r4, r5, r6, pc}
    const int one = 1;
   b535e:	2301      	movs	r3, #1
    CHECK_TRUE(sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one)) == 0, false);
   b5360:	2604      	movs	r6, #4
    const int one = 1;
   b5362:	9302      	str	r3, [sp, #8]
    CHECK_TRUE(sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one)) == 0, false);
   b5364:	9600      	str	r6, [sp, #0]
   b5366:	ab02      	add	r3, sp, #8
   b5368:	4632      	mov	r2, r6
   b536a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b536e:	f7ff fbc7 	bl	b4b00 <sock_setsockopt>
   b5372:	4605      	mov	r5, r0
   b5374:	2800      	cmp	r0, #0
   b5376:	d1eb      	bne.n	b5350 <_ZN9TCPServer5beginEv+0x3c>
    int flags = sock_fcntl(_sock, F_GETFL, 0);
   b5378:	4602      	mov	r2, r0
   b537a:	2103      	movs	r1, #3
   b537c:	6920      	ldr	r0, [r4, #16]
   b537e:	f7ff fbf7 	bl	b4b70 <sock_fcntl>
    CHECK_TRUE(flags >= 0, false);
   b5382:	1e02      	subs	r2, r0, #0
   b5384:	dbe4      	blt.n	b5350 <_ZN9TCPServer5beginEv+0x3c>
    CHECK_TRUE(sock_fcntl(_sock, F_SETFL, flags) >= 0, false);
   b5386:	6920      	ldr	r0, [r4, #16]
   b5388:	f042 0201 	orr.w	r2, r2, #1
   b538c:	4631      	mov	r1, r6
   b538e:	f7ff fbef 	bl	b4b70 <sock_fcntl>
   b5392:	2800      	cmp	r0, #0
   b5394:	dbdc      	blt.n	b5350 <_ZN9TCPServer5beginEv+0x3c>
    if (_nif != 0) {
   b5396:	68e0      	ldr	r0, [r4, #12]
   b5398:	b1a0      	cbz	r0, b53c4 <_ZN9TCPServer5beginEv+0xb0>
        if (if_index_to_name(_nif, ifr.ifr_name)) {
   b539a:	a903      	add	r1, sp, #12
   b539c:	b2c0      	uxtb	r0, r0
        struct ifreq ifr = {};
   b539e:	9503      	str	r5, [sp, #12]
   b53a0:	f8ad 5010 	strh.w	r5, [sp, #16]
        if (if_index_to_name(_nif, ifr.ifr_name)) {
   b53a4:	f7ff facc 	bl	b4940 <if_index_to_name>
   b53a8:	2800      	cmp	r0, #0
   b53aa:	d1d1      	bne.n	b5350 <_ZN9TCPServer5beginEv+0x3c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b53ac:	2306      	movs	r3, #6
   b53ae:	9300      	str	r3, [sp, #0]
   b53b0:	6920      	ldr	r0, [r4, #16]
   b53b2:	ab03      	add	r3, sp, #12
   b53b4:	f241 020b 	movw	r2, #4107	; 0x100b
   b53b8:	f640 71ff 	movw	r1, #4095	; 0xfff
   b53bc:	f7ff fba0 	bl	b4b00 <sock_setsockopt>
   b53c0:	2800      	cmp	r0, #0
   b53c2:	d1c5      	bne.n	b5350 <_ZN9TCPServer5beginEv+0x3c>
    int r = sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr));
   b53c4:	6920      	ldr	r0, [r4, #16]
   b53c6:	221c      	movs	r2, #28
   b53c8:	a905      	add	r1, sp, #20
   b53ca:	f7ff fb89 	bl	b4ae0 <sock_bind>
    CHECK_TRUE(!r, false);
   b53ce:	2800      	cmp	r0, #0
   b53d0:	d1be      	bne.n	b5350 <_ZN9TCPServer5beginEv+0x3c>
    r = sock_listen(_sock, 5);
   b53d2:	6920      	ldr	r0, [r4, #16]
   b53d4:	2105      	movs	r1, #5
   b53d6:	f7ff fbab 	bl	b4b30 <sock_listen>
    CHECK_TRUE(!r, false);
   b53da:	2800      	cmp	r0, #0
   b53dc:	d1b8      	bne.n	b5350 <_ZN9TCPServer5beginEv+0x3c>
        return true;
   b53de:	2501      	movs	r5, #1
   b53e0:	e7ba      	b.n	b5358 <_ZN9TCPServer5beginEv+0x44>
	...

000b53e4 <_ZN9TCPClientC1ERKS_>:
class Print
   b53e4:	684b      	ldr	r3, [r1, #4]
   b53e6:	6043      	str	r3, [r0, #4]
   b53e8:	4b09      	ldr	r3, [pc, #36]	; (b5410 <_ZN9TCPClientC1ERKS_+0x2c>)
   b53ea:	6003      	str	r3, [r0, #0]
   b53ec:	688b      	ldr	r3, [r1, #8]
   b53ee:	6083      	str	r3, [r0, #8]
   b53f0:	68cb      	ldr	r3, [r1, #12]
   b53f2:	60c3      	str	r3, [r0, #12]
   b53f4:	690b      	ldr	r3, [r1, #16]
   b53f6:	6103      	str	r3, [r0, #16]
   b53f8:	4b06      	ldr	r3, [pc, #24]	; (b5414 <_ZN9TCPClientC1ERKS_+0x30>)
   b53fa:	6003      	str	r3, [r0, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b53fc:	694b      	ldr	r3, [r1, #20]
   b53fe:	6143      	str	r3, [r0, #20]
      : _M_pi(__r._M_pi)
   b5400:	698b      	ldr	r3, [r1, #24]
   b5402:	6183      	str	r3, [r0, #24]
	if (_M_pi != 0)
   b5404:	b113      	cbz	r3, b540c <_ZN9TCPClientC1ERKS_+0x28>
    { ++_M_use_count; }
   b5406:	685a      	ldr	r2, [r3, #4]
   b5408:	3201      	adds	r2, #1
   b540a:	605a      	str	r2, [r3, #4]
   b540c:	4770      	bx	lr
   b540e:	bf00      	nop
   b5410:	000b6aa4 	.word	0x000b6aa4
   b5414:	000b6c0c 	.word	0x000b6c0c

000b5418 <_ZN9TCPServer9availableEv>:
TCPClient TCPServer::available() {
   b5418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sock < 0) {
   b541c:	690b      	ldr	r3, [r1, #16]
   b541e:	2b00      	cmp	r3, #0
TCPClient TCPServer::available() {
   b5420:	b096      	sub	sp, #88	; 0x58
   b5422:	4606      	mov	r6, r0
   b5424:	460c      	mov	r4, r1
    if (_sock < 0) {
   b5426:	da03      	bge.n	b5430 <_ZN9TCPServer9availableEv+0x18>
        begin();
   b5428:	680b      	ldr	r3, [r1, #0]
   b542a:	4608      	mov	r0, r1
   b542c:	691b      	ldr	r3, [r3, #16]
   b542e:	4798      	blx	r3
    if (_sock < 0) {
   b5430:	6925      	ldr	r5, [r4, #16]
   b5432:	2d00      	cmp	r5, #0
        _client = *s_invalid_client;
   b5434:	f104 0714 	add.w	r7, r4, #20
    if (_sock < 0) {
   b5438:	da0c      	bge.n	b5454 <_ZN9TCPServer9availableEv+0x3c>
        _client = *s_invalid_client;
   b543a:	4b24      	ldr	r3, [pc, #144]	; (b54cc <_ZN9TCPServer9availableEv+0xb4>)
   b543c:	4638      	mov	r0, r7
   b543e:	6819      	ldr	r1, [r3, #0]
   b5440:	f7ff fee9 	bl	b5216 <_ZN9TCPClientaSERKS_.isra.0>
    return _client;
   b5444:	4639      	mov	r1, r7
   b5446:	4630      	mov	r0, r6
   b5448:	f7ff ffcc 	bl	b53e4 <_ZN9TCPClientC1ERKS_>
}
   b544c:	4630      	mov	r0, r6
   b544e:	b016      	add	sp, #88	; 0x58
   b5450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    struct sockaddr_storage saddr = {};
   b5454:	f04f 081c 	mov.w	r8, #28
   b5458:	4642      	mov	r2, r8
   b545a:	2100      	movs	r1, #0
   b545c:	a808      	add	r0, sp, #32
   b545e:	f001 f9cb 	bl	b67f8 <memset>
    int s = sock_accept(_sock, (struct sockaddr*)&saddr, &slen);
   b5462:	a908      	add	r1, sp, #32
   b5464:	aa01      	add	r2, sp, #4
   b5466:	4628      	mov	r0, r5
    socklen_t slen = sizeof(saddr);
   b5468:	f8cd 8004 	str.w	r8, [sp, #4]
    int s = sock_accept(_sock, (struct sockaddr*)&saddr, &slen);
   b546c:	f7ff fb30 	bl	b4ad0 <sock_accept>
    if (s < 0) {
   b5470:	1e01      	subs	r1, r0, #0
   b5472:	da12      	bge.n	b549a <_ZN9TCPServer9availableEv+0x82>
        _client = *s_invalid_client;
   b5474:	4b15      	ldr	r3, [pc, #84]	; (b54cc <_ZN9TCPServer9availableEv+0xb4>)
   b5476:	4638      	mov	r0, r7
   b5478:	6819      	ldr	r1, [r3, #0]
   b547a:	f7ff fecc 	bl	b5216 <_ZN9TCPClientaSERKS_.isra.0>
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b547e:	f7ff fcab 	bl	b4dd8 <__errno>
   b5482:	6803      	ldr	r3, [r0, #0]
   b5484:	2b0b      	cmp	r3, #11
   b5486:	d0dd      	beq.n	b5444 <_ZN9TCPServer9availableEv+0x2c>
   b5488:	f7ff fca6 	bl	b4dd8 <__errno>
   b548c:	6803      	ldr	r3, [r0, #0]
   b548e:	2b0b      	cmp	r3, #11
   b5490:	d0d8      	beq.n	b5444 <_ZN9TCPServer9availableEv+0x2c>
            stop();
   b5492:	4620      	mov	r0, r4
   b5494:	f7ff ff18 	bl	b52c8 <_ZN9TCPServer4stopEv>
   b5498:	e7d4      	b.n	b5444 <_ZN9TCPServer9availableEv+0x2c>
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {
   b549a:	a80f      	add	r0, sp, #60	; 0x3c
   b549c:	f000 fd04 	bl	b5ea8 <_ZN9TCPClientC1Ei>
   b54a0:	ad03      	add	r5, sp, #12
   b54a2:	4b0b      	ldr	r3, [pc, #44]	; (b54d0 <_ZN9TCPServer9availableEv+0xb8>)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b54a4:	9c14      	ldr	r4, [sp, #80]	; 0x50
   b54a6:	930f      	str	r3, [sp, #60]	; 0x3c
        client.d_->remoteIP = client.remoteIP(); // fetch the peer IP ready for the copy operator
   b54a8:	a90f      	add	r1, sp, #60	; 0x3c
   b54aa:	a802      	add	r0, sp, #8
   b54ac:	f7ff fe6d 	bl	b518a <_ZN15TCPServerClient8remoteIPEv>
   b54b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b54b2:	348c      	adds	r4, #140	; 0x8c
   b54b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b54b6:	682b      	ldr	r3, [r5, #0]
   b54b8:	7023      	strb	r3, [r4, #0]
        _client = client;
   b54ba:	4638      	mov	r0, r7
   b54bc:	a90f      	add	r1, sp, #60	; 0x3c
   b54be:	f7ff feaa 	bl	b5216 <_ZN9TCPClientaSERKS_.isra.0>
        TCPServerClient client = TCPServerClient(s);
   b54c2:	a80f      	add	r0, sp, #60	; 0x3c
   b54c4:	f7ff fec2 	bl	b524c <_ZN15TCPServerClientD1Ev>
   b54c8:	e7bc      	b.n	b5444 <_ZN9TCPServer9availableEv+0x2c>
   b54ca:	bf00      	nop
   b54cc:	2003e6d8 	.word	0x2003e6d8
   b54d0:	000b6acc 	.word	0x000b6acc

000b54d4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b54d4:	4b01      	ldr	r3, [pc, #4]	; (b54dc <_GLOBAL__sub_I_RGB+0x8>)
   b54d6:	2200      	movs	r2, #0
   b54d8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b54da:	4770      	bx	lr
   b54dc:	2003e6dc 	.word	0x2003e6dc

000b54e0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b54e0:	4b01      	ldr	r3, [pc, #4]	; (b54e8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b54e2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b54e4:	4770      	bx	lr
   b54e6:	bf00      	nop
   b54e8:	2003e5c0 	.word	0x2003e5c0

000b54ec <serialEventRun>:
{
   b54ec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b54ee:	4b0b      	ldr	r3, [pc, #44]	; (b551c <serialEventRun+0x30>)
   b54f0:	b143      	cbz	r3, b5504 <serialEventRun+0x18>
   b54f2:	f000 f981 	bl	b57f8 <_Z16_fetch_usbserialv>
   b54f6:	6803      	ldr	r3, [r0, #0]
   b54f8:	691b      	ldr	r3, [r3, #16]
   b54fa:	4798      	blx	r3
   b54fc:	2800      	cmp	r0, #0
   b54fe:	dd01      	ble.n	b5504 <serialEventRun+0x18>
        serialEvent();
   b5500:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5504:	4b06      	ldr	r3, [pc, #24]	; (b5520 <serialEventRun+0x34>)
   b5506:	b143      	cbz	r3, b551a <serialEventRun+0x2e>
   b5508:	f000 feae 	bl	b6268 <_Z22__fetch_global_Serial1v>
   b550c:	6803      	ldr	r3, [r0, #0]
   b550e:	691b      	ldr	r3, [r3, #16]
   b5510:	4798      	blx	r3
   b5512:	2800      	cmp	r0, #0
   b5514:	dd01      	ble.n	b551a <serialEventRun+0x2e>
        serialEvent1();
   b5516:	f3af 8000 	nop.w
}
   b551a:	bd08      	pop	{r3, pc}
	...

000b5524 <_post_loop>:
{
   b5524:	b508      	push	{r3, lr}
	serialEventRun();
   b5526:	f7ff ffe1 	bl	b54ec <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b552a:	f7ff fa21 	bl	b4970 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b552e:	4b01      	ldr	r3, [pc, #4]	; (b5534 <_post_loop+0x10>)
   b5530:	6018      	str	r0, [r3, #0]
}
   b5532:	bd08      	pop	{r3, pc}
   b5534:	2003e740 	.word	0x2003e740

000b5538 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5538:	4805      	ldr	r0, [pc, #20]	; (b5550 <_Z33system_initialize_user_backup_ramv+0x18>)
   b553a:	4a06      	ldr	r2, [pc, #24]	; (b5554 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b553c:	4906      	ldr	r1, [pc, #24]	; (b5558 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b553e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5540:	1a12      	subs	r2, r2, r0
   b5542:	f001 f94b 	bl	b67dc <memcpy>
    __backup_sram_signature = signature;
   b5546:	4b05      	ldr	r3, [pc, #20]	; (b555c <_Z33system_initialize_user_backup_ramv+0x24>)
   b5548:	4a05      	ldr	r2, [pc, #20]	; (b5560 <_Z33system_initialize_user_backup_ramv+0x28>)
   b554a:	601a      	str	r2, [r3, #0]
}
   b554c:	bd08      	pop	{r3, pc}
   b554e:	bf00      	nop
   b5550:	2003f400 	.word	0x2003f400
   b5554:	2003f404 	.word	0x2003f404
   b5558:	000b6f4c 	.word	0x000b6f4c
   b555c:	2003f400 	.word	0x2003f400
   b5560:	9a271c1e 	.word	0x9a271c1e

000b5564 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5564:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5566:	2300      	movs	r3, #0
   b5568:	9300      	str	r3, [sp, #0]
   b556a:	461a      	mov	r2, r3
   b556c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5570:	f7ff fb80 	bl	b4c74 <system_ctrl_set_result>
}
   b5574:	b003      	add	sp, #12
   b5576:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b557c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b557c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b557e:	8843      	ldrh	r3, [r0, #2]
   b5580:	2b0a      	cmp	r3, #10
   b5582:	d008      	beq.n	b5596 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5584:	2b50      	cmp	r3, #80	; 0x50
   b5586:	d10b      	bne.n	b55a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5588:	4b09      	ldr	r3, [pc, #36]	; (b55b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b558a:	681b      	ldr	r3, [r3, #0]
   b558c:	b14b      	cbz	r3, b55a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b558e:	b003      	add	sp, #12
   b5590:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5594:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5596:	f7ff ffe5 	bl	b5564 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b559a:	b003      	add	sp, #12
   b559c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b55a0:	2300      	movs	r3, #0
   b55a2:	9300      	str	r3, [sp, #0]
   b55a4:	461a      	mov	r2, r3
   b55a6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b55aa:	f7ff fb63 	bl	b4c74 <system_ctrl_set_result>
}
   b55ae:	e7f4      	b.n	b559a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b55b0:	2003e6f0 	.word	0x2003e6f0

000b55b4 <module_user_init_hook>:
{
   b55b4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b55b6:	4812      	ldr	r0, [pc, #72]	; (b5600 <module_user_init_hook+0x4c>)
   b55b8:	2100      	movs	r1, #0
   b55ba:	f7ff fc1d 	bl	b4df8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b55be:	4b11      	ldr	r3, [pc, #68]	; (b5604 <module_user_init_hook+0x50>)
   b55c0:	681a      	ldr	r2, [r3, #0]
   b55c2:	4b11      	ldr	r3, [pc, #68]	; (b5608 <module_user_init_hook+0x54>)
   b55c4:	429a      	cmp	r2, r3
   b55c6:	4b11      	ldr	r3, [pc, #68]	; (b560c <module_user_init_hook+0x58>)
   b55c8:	bf0c      	ite	eq
   b55ca:	2201      	moveq	r2, #1
   b55cc:	2200      	movne	r2, #0
   b55ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b55d0:	d001      	beq.n	b55d6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b55d2:	f7ff ffb1 	bl	b5538 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b55d6:	f7ff f9bb 	bl	b4950 <HAL_RNG_GetRandomNumber>
   b55da:	4604      	mov	r4, r0
    srand(seed);
   b55dc:	f001 f914 	bl	b6808 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b55e0:	4b0b      	ldr	r3, [pc, #44]	; (b5610 <module_user_init_hook+0x5c>)
   b55e2:	b113      	cbz	r3, b55ea <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b55e4:	4620      	mov	r0, r4
   b55e6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b55ea:	2100      	movs	r1, #0
   b55ec:	4808      	ldr	r0, [pc, #32]	; (b5610 <module_user_init_hook+0x5c>)
   b55ee:	f7ff fbcb 	bl	b4d88 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b55f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b55f6:	4807      	ldr	r0, [pc, #28]	; (b5614 <module_user_init_hook+0x60>)
   b55f8:	2100      	movs	r1, #0
   b55fa:	f7ff bb31 	b.w	b4c60 <system_ctrl_set_app_request_handler>
   b55fe:	bf00      	nop
   b5600:	000b54e1 	.word	0x000b54e1
   b5604:	2003f400 	.word	0x2003f400
   b5608:	9a271c1e 	.word	0x9a271c1e
   b560c:	2003e6ec 	.word	0x2003e6ec
   b5610:	00000000 	.word	0x00000000
   b5614:	000b557d 	.word	0x000b557d

000b5618 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b5618:	4770      	bx	lr

000b561a <_ZN9IPAddressD0Ev>:
   b561a:	b510      	push	{r4, lr}
   b561c:	2118      	movs	r1, #24
   b561e:	4604      	mov	r4, r0
   b5620:	f7fe ff09 	bl	b4436 <_ZdlPvj>
   b5624:	4620      	mov	r0, r4
   b5626:	bd10      	pop	{r4, pc}

000b5628 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5628:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b562a:	7d03      	ldrb	r3, [r0, #20]
   b562c:	2b06      	cmp	r3, #6
{
   b562e:	b08d      	sub	sp, #52	; 0x34
   b5630:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5632:	f100 0704 	add.w	r7, r0, #4
   b5636:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b563a:	d012      	beq.n	b5662 <_ZNK9IPAddress7printToER5Print+0x3a>
   b563c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5640:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5644:	220a      	movs	r2, #10
   b5646:	4630      	mov	r0, r6
   b5648:	f7ff fd01 	bl	b504e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b564c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b564e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5650:	d019      	beq.n	b5686 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5652:	2c00      	cmp	r4, #0
   b5654:	d0f4      	beq.n	b5640 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5656:	212e      	movs	r1, #46	; 0x2e
   b5658:	4630      	mov	r0, r6
   b565a:	f7ff fcdf 	bl	b501c <_ZN5Print5printEc>
   b565e:	4404      	add	r4, r0
   b5660:	e7ee      	b.n	b5640 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5662:	232f      	movs	r3, #47	; 0x2f
   b5664:	466a      	mov	r2, sp
   b5666:	4639      	mov	r1, r7
   b5668:	200a      	movs	r0, #10
		buf[0] = 0;
   b566a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b566e:	f7ff f99f 	bl	b49b0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5672:	4668      	mov	r0, sp
   b5674:	f7fe fe98 	bl	b43a8 <strlen>
   b5678:	6833      	ldr	r3, [r6, #0]
   b567a:	4602      	mov	r2, r0
   b567c:	68db      	ldr	r3, [r3, #12]
   b567e:	4669      	mov	r1, sp
   b5680:	4630      	mov	r0, r6
   b5682:	4798      	blx	r3
   b5684:	4604      	mov	r4, r0
    }
    return n;
}
   b5686:	4620      	mov	r0, r4
   b5688:	b00d      	add	sp, #52	; 0x34
   b568a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b568c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b568c:	b510      	push	{r4, lr}
   b568e:	4b05      	ldr	r3, [pc, #20]	; (b56a4 <_ZN9IPAddressC1Ev+0x18>)
   b5690:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5692:	2211      	movs	r2, #17
   b5694:	f840 3b04 	str.w	r3, [r0], #4
   b5698:	2100      	movs	r1, #0
   b569a:	f001 f8ad 	bl	b67f8 <memset>
}
   b569e:	4620      	mov	r0, r4
   b56a0:	bd10      	pop	{r4, pc}
   b56a2:	bf00      	nop
   b56a4:	000b6b3c 	.word	0x000b6b3c

000b56a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b56a8:	4603      	mov	r3, r0
   b56aa:	4a07      	ldr	r2, [pc, #28]	; (b56c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b56ac:	b510      	push	{r4, lr}
   b56ae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b56b2:	f101 0210 	add.w	r2, r1, #16
   b56b6:	f851 4b04 	ldr.w	r4, [r1], #4
   b56ba:	f843 4b04 	str.w	r4, [r3], #4
   b56be:	4291      	cmp	r1, r2
   b56c0:	d1f9      	bne.n	b56b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b56c2:	780a      	ldrb	r2, [r1, #0]
   b56c4:	701a      	strb	r2, [r3, #0]
}
   b56c6:	bd10      	pop	{r4, pc}
   b56c8:	000b6b3c 	.word	0x000b6b3c

000b56cc <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b56cc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b56ce:	2b04      	cmp	r3, #4
   b56d0:	d104      	bne.n	b56dc <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b56d2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b56d4:	3800      	subs	r0, #0
   b56d6:	bf18      	it	ne
   b56d8:	2001      	movne	r0, #1
   b56da:	4770      	bx	lr
    } else if (version() == 6) {
   b56dc:	2b06      	cmp	r3, #6
   b56de:	d107      	bne.n	b56f0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b56e0:	6843      	ldr	r3, [r0, #4]
   b56e2:	b93b      	cbnz	r3, b56f4 <_ZNK9IPAddresscvbEv+0x28>
   b56e4:	6883      	ldr	r3, [r0, #8]
   b56e6:	b92b      	cbnz	r3, b56f4 <_ZNK9IPAddresscvbEv+0x28>
   b56e8:	68c3      	ldr	r3, [r0, #12]
   b56ea:	b91b      	cbnz	r3, b56f4 <_ZNK9IPAddresscvbEv+0x28>
   b56ec:	6900      	ldr	r0, [r0, #16]
   b56ee:	e7f1      	b.n	b56d4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b56f0:	2000      	movs	r0, #0
   b56f2:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b56f4:	2001      	movs	r0, #1
}
   b56f6:	4770      	bx	lr

000b56f8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b56f8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b56fa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b56fe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5702:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5706:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b570a:	2304      	movs	r3, #4
   b570c:	6041      	str	r1, [r0, #4]
   b570e:	7503      	strb	r3, [r0, #20]
}
   b5710:	bd10      	pop	{r4, pc}
	...

000b5714 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5714:	b507      	push	{r0, r1, r2, lr}
   b5716:	4b06      	ldr	r3, [pc, #24]	; (b5730 <_ZN9IPAddressC1EPKh+0x1c>)
   b5718:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b571a:	78cb      	ldrb	r3, [r1, #3]
   b571c:	9300      	str	r3, [sp, #0]
   b571e:	788b      	ldrb	r3, [r1, #2]
   b5720:	784a      	ldrb	r2, [r1, #1]
   b5722:	7809      	ldrb	r1, [r1, #0]
   b5724:	f7ff ffe8 	bl	b56f8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5728:	b003      	add	sp, #12
   b572a:	f85d fb04 	ldr.w	pc, [sp], #4
   b572e:	bf00      	nop
   b5730:	000b6b3c 	.word	0x000b6b3c

000b5734 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5734:	7441      	strb	r1, [r0, #17]
}
   b5736:	4770      	bx	lr

000b5738 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5738:	4770      	bx	lr

000b573a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b573a:	4770      	bx	lr

000b573c <_ZN9USBSerial4readEv>:
{
   b573c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b573e:	2100      	movs	r1, #0
   b5740:	7c00      	ldrb	r0, [r0, #16]
   b5742:	f7ff fa4d 	bl	b4be0 <HAL_USB_USART_Receive_Data>
}
   b5746:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b574a:	bd08      	pop	{r3, pc}

000b574c <_ZN9USBSerial4peekEv>:
{
   b574c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b574e:	2101      	movs	r1, #1
   b5750:	7c00      	ldrb	r0, [r0, #16]
   b5752:	f7ff fa45 	bl	b4be0 <HAL_USB_USART_Receive_Data>
}
   b5756:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b575a:	bd08      	pop	{r3, pc}

000b575c <_ZN9USBSerial17availableForWriteEv>:
{
   b575c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b575e:	7c00      	ldrb	r0, [r0, #16]
   b5760:	f7ff fa36 	bl	b4bd0 <HAL_USB_USART_Available_Data_For_Write>
}
   b5764:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5768:	bd08      	pop	{r3, pc}

000b576a <_ZN9USBSerial9availableEv>:
{
   b576a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b576c:	7c00      	ldrb	r0, [r0, #16]
   b576e:	f7ff fa27 	bl	b4bc0 <HAL_USB_USART_Available_Data>
}
   b5772:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5776:	bd08      	pop	{r3, pc}

000b5778 <_ZN9USBSerial5writeEh>:
{
   b5778:	b513      	push	{r0, r1, r4, lr}
   b577a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b577c:	7c00      	ldrb	r0, [r0, #16]
{
   b577e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5780:	f7ff fa26 	bl	b4bd0 <HAL_USB_USART_Available_Data_For_Write>
   b5784:	2800      	cmp	r0, #0
   b5786:	9901      	ldr	r1, [sp, #4]
   b5788:	dc01      	bgt.n	b578e <_ZN9USBSerial5writeEh+0x16>
   b578a:	7c60      	ldrb	r0, [r4, #17]
   b578c:	b120      	cbz	r0, b5798 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b578e:	7c20      	ldrb	r0, [r4, #16]
   b5790:	f7ff fa2e 	bl	b4bf0 <HAL_USB_USART_Send_Data>
   b5794:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5798:	b002      	add	sp, #8
   b579a:	bd10      	pop	{r4, pc}

000b579c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b579c:	7c00      	ldrb	r0, [r0, #16]
   b579e:	f7ff ba2f 	b.w	b4c00 <HAL_USB_USART_Flush_Data>

000b57a2 <_ZN9USBSerialD0Ev>:
   b57a2:	b510      	push	{r4, lr}
   b57a4:	2114      	movs	r1, #20
   b57a6:	4604      	mov	r4, r0
   b57a8:	f7fe fe45 	bl	b4436 <_ZdlPvj>
   b57ac:	4620      	mov	r0, r4
   b57ae:	bd10      	pop	{r4, pc}

000b57b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b57b0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b57b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b57b6:	4604      	mov	r4, r0
   b57b8:	4608      	mov	r0, r1
   b57ba:	2100      	movs	r1, #0
   b57bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b57c0:	4b04      	ldr	r3, [pc, #16]	; (b57d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b57c2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b57c4:	2301      	movs	r3, #1
  _serial = serial;
   b57c6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b57c8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b57ca:	4611      	mov	r1, r2
   b57cc:	f7ff f9e8 	bl	b4ba0 <HAL_USB_USART_Init>
}
   b57d0:	4620      	mov	r0, r4
   b57d2:	bd10      	pop	{r4, pc}
   b57d4:	000b6b50 	.word	0x000b6b50

000b57d8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b57d8:	7c00      	ldrb	r0, [r0, #16]
   b57da:	2200      	movs	r2, #0
   b57dc:	f7ff b9e8 	b.w	b4bb0 <HAL_USB_USART_Begin>

000b57e0 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b57e0:	7c00      	ldrb	r0, [r0, #16]
   b57e2:	f7ff ba15 	b.w	b4c10 <HAL_USB_USART_Is_Connected>

000b57e6 <_Z19acquireSerialBufferv>:
{
   b57e6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b57e8:	2214      	movs	r2, #20
{
   b57ea:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b57ec:	2100      	movs	r1, #0
   b57ee:	f001 f803 	bl	b67f8 <memset>
}
   b57f2:	4620      	mov	r0, r4
   b57f4:	bd10      	pop	{r4, pc}
	...

000b57f8 <_Z16_fetch_usbserialv>:
{
   b57f8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b57fa:	4c0f      	ldr	r4, [pc, #60]	; (b5838 <_Z16_fetch_usbserialv+0x40>)
{
   b57fc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b57fe:	a803      	add	r0, sp, #12
   b5800:	f7ff fff1 	bl	b57e6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5804:	7821      	ldrb	r1, [r4, #0]
   b5806:	f3bf 8f5b 	dmb	ish
   b580a:	f011 0101 	ands.w	r1, r1, #1
   b580e:	d10f      	bne.n	b5830 <_Z16_fetch_usbserialv+0x38>
   b5810:	4620      	mov	r0, r4
   b5812:	9101      	str	r1, [sp, #4]
   b5814:	f7fe fe1e 	bl	b4454 <__cxa_guard_acquire>
   b5818:	9901      	ldr	r1, [sp, #4]
   b581a:	b148      	cbz	r0, b5830 <_Z16_fetch_usbserialv+0x38>
   b581c:	aa03      	add	r2, sp, #12
   b581e:	4807      	ldr	r0, [pc, #28]	; (b583c <_Z16_fetch_usbserialv+0x44>)
   b5820:	f7ff ffc6 	bl	b57b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5824:	4620      	mov	r0, r4
   b5826:	f7fe fe1a 	bl	b445e <__cxa_guard_release>
   b582a:	4805      	ldr	r0, [pc, #20]	; (b5840 <_Z16_fetch_usbserialv+0x48>)
   b582c:	f000 ffd0 	bl	b67d0 <atexit>
	return _usbserial;
}
   b5830:	4802      	ldr	r0, [pc, #8]	; (b583c <_Z16_fetch_usbserialv+0x44>)
   b5832:	b008      	add	sp, #32
   b5834:	bd10      	pop	{r4, pc}
   b5836:	bf00      	nop
   b5838:	2003e6f4 	.word	0x2003e6f4
   b583c:	2003e6f8 	.word	0x2003e6f8
   b5840:	000b5739 	.word	0x000b5739

000b5844 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5844:	4770      	bx	lr

000b5846 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5846:	7441      	strb	r1, [r0, #17]
}
   b5848:	4770      	bx	lr

000b584a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b584a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b584c:	7c00      	ldrb	r0, [r0, #16]
   b584e:	f7ff f8f7 	bl	b4a40 <hal_usart_available_data_for_write>
}
   b5852:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5856:	bd08      	pop	{r3, pc}

000b5858 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5858:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b585a:	7c00      	ldrb	r0, [r0, #16]
   b585c:	f7ff f8c8 	bl	b49f0 <hal_usart_available>
}
   b5860:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5864:	bd08      	pop	{r3, pc}

000b5866 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5866:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5868:	7c00      	ldrb	r0, [r0, #16]
   b586a:	f7ff f8d1 	bl	b4a10 <hal_usart_peek>
}
   b586e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5872:	bd08      	pop	{r3, pc}

000b5874 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5874:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5876:	7c00      	ldrb	r0, [r0, #16]
   b5878:	f7ff f8c2 	bl	b4a00 <hal_usart_read>
}
   b587c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5880:	bd08      	pop	{r3, pc}

000b5882 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5882:	7c00      	ldrb	r0, [r0, #16]
   b5884:	f7ff b8cc 	b.w	b4a20 <hal_usart_flush>

000b5888 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5888:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b588a:	7c45      	ldrb	r5, [r0, #17]
{
   b588c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b588e:	b12d      	cbz	r5, b589c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5890:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5892:	b003      	add	sp, #12
   b5894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5898:	f7ff b8a2 	b.w	b49e0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b589c:	7c00      	ldrb	r0, [r0, #16]
   b589e:	9101      	str	r1, [sp, #4]
   b58a0:	f7ff f8ce 	bl	b4a40 <hal_usart_available_data_for_write>
   b58a4:	2800      	cmp	r0, #0
   b58a6:	9901      	ldr	r1, [sp, #4]
   b58a8:	dcf2      	bgt.n	b5890 <_ZN11USARTSerial5writeEh+0x8>
}
   b58aa:	4628      	mov	r0, r5
   b58ac:	b003      	add	sp, #12
   b58ae:	bd30      	pop	{r4, r5, pc}

000b58b0 <_ZN11USARTSerialD0Ev>:
   b58b0:	b510      	push	{r4, lr}
   b58b2:	2114      	movs	r1, #20
   b58b4:	4604      	mov	r4, r0
   b58b6:	f7fe fdbe 	bl	b4436 <_ZdlPvj>
   b58ba:	4620      	mov	r0, r4
   b58bc:	bd10      	pop	{r4, pc}
	...

000b58c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b58c0:	b510      	push	{r4, lr}
   b58c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b58c6:	4604      	mov	r4, r0
   b58c8:	4608      	mov	r0, r1
   b58ca:	4611      	mov	r1, r2
   b58cc:	2200      	movs	r2, #0
   b58ce:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b58d2:	4b04      	ldr	r3, [pc, #16]	; (b58e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b58d4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b58d6:	2301      	movs	r3, #1
  _serial = serial;
   b58d8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b58da:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b58dc:	f7ff f8b8 	bl	b4a50 <hal_usart_init_ex>
}
   b58e0:	4620      	mov	r0, r4
   b58e2:	bd10      	pop	{r4, pc}
   b58e4:	000b6b80 	.word	0x000b6b80

000b58e8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b58e8:	4770      	bx	lr

000b58ea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b58ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b58ec:	4606      	mov	r6, r0
   b58ee:	4615      	mov	r5, r2
   b58f0:	460c      	mov	r4, r1
   b58f2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b58f4:	42bc      	cmp	r4, r7
   b58f6:	d006      	beq.n	b5906 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b58f8:	6833      	ldr	r3, [r6, #0]
   b58fa:	f814 1b01 	ldrb.w	r1, [r4], #1
   b58fe:	689b      	ldr	r3, [r3, #8]
   b5900:	4630      	mov	r0, r6
   b5902:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5904:	e7f6      	b.n	b58f4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5906:	4628      	mov	r0, r5
   b5908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b590a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b590a:	7c00      	ldrb	r0, [r0, #16]
   b590c:	2200      	movs	r2, #0
   b590e:	f7ff b8a7 	b.w	b4a60 <hal_i2c_write>

000b5912 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5912:	7c00      	ldrb	r0, [r0, #16]
   b5914:	2100      	movs	r1, #0
   b5916:	f7ff b8ab 	b.w	b4a70 <hal_i2c_available>

000b591a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b591a:	7c00      	ldrb	r0, [r0, #16]
   b591c:	2100      	movs	r1, #0
   b591e:	f7ff b8af 	b.w	b4a80 <hal_i2c_read>

000b5922 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5922:	7c00      	ldrb	r0, [r0, #16]
   b5924:	2100      	movs	r1, #0
   b5926:	f7ff b8b3 	b.w	b4a90 <hal_i2c_peek>

000b592a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b592a:	7c00      	ldrb	r0, [r0, #16]
   b592c:	2100      	movs	r1, #0
   b592e:	f7ff b8b7 	b.w	b4aa0 <hal_i2c_flush>

000b5932 <_ZN7TwoWireD0Ev>:
   b5932:	b510      	push	{r4, lr}
   b5934:	2114      	movs	r1, #20
   b5936:	4604      	mov	r4, r0
   b5938:	f7fe fd7d 	bl	b4436 <_ZdlPvj>
   b593c:	4620      	mov	r0, r4
   b593e:	bd10      	pop	{r4, pc}

000b5940 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5940:	b538      	push	{r3, r4, r5, lr}
   b5942:	4604      	mov	r4, r0
   b5944:	4615      	mov	r5, r2
   b5946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b594a:	2200      	movs	r2, #0
   b594c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5950:	4b09      	ldr	r3, [pc, #36]	; (b5978 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5952:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5954:	4608      	mov	r0, r1
   b5956:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5958:	4629      	mov	r1, r5
   b595a:	f7ff f8b1 	bl	b4ac0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b595e:	30bf      	adds	r0, #191	; 0xbf
   b5960:	d108      	bne.n	b5974 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5962:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5964:	07db      	lsls	r3, r3, #31
   b5966:	d505      	bpl.n	b5974 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5968:	6868      	ldr	r0, [r5, #4]
   b596a:	f7ff fa1d 	bl	b4da8 <free>
    free(conf.tx_buffer);
   b596e:	68e8      	ldr	r0, [r5, #12]
   b5970:	f7ff fa1a 	bl	b4da8 <free>
}
   b5974:	4620      	mov	r0, r4
   b5976:	bd38      	pop	{r3, r4, r5, pc}
   b5978:	000b6bb0 	.word	0x000b6bb0

000b597c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b597c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b597e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5980:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5984:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5986:	2201      	movs	r2, #1
   b5988:	f04f 33ff 	mov.w	r3, #4294967295
   b598c:	f10d 0107 	add.w	r1, sp, #7
   b5990:	47a0      	blx	r4
}
   b5992:	b002      	add	sp, #8
   b5994:	bd10      	pop	{r4, pc}

000b5996 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b5996:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5998:	6803      	ldr	r3, [r0, #0]
   b599a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b599c:	f04f 33ff 	mov.w	r3, #4294967295
   b59a0:	46a4      	mov	ip, r4
}
   b59a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b59a6:	4760      	bx	ip

000b59a8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b59a8:	b513      	push	{r0, r1, r4, lr}
   b59aa:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b59ac:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b59ae:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b59b2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b59b4:	f10d 0107 	add.w	r1, sp, #7
   b59b8:	2201      	movs	r2, #1
   b59ba:	47a0      	blx	r4
}
   b59bc:	b002      	add	sp, #8
   b59be:	bd10      	pop	{r4, pc}

000b59c0 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b59c0:	b510      	push	{r4, lr}
   b59c2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b59c4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b59c8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b59cc:	429a      	cmp	r2, r3
int TCPClient::read() {
   b59ce:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b59d0:	d008      	beq.n	b59e4 <_ZN9TCPClient4readEv+0x24>
   b59d2:	6963      	ldr	r3, [r4, #20]
   b59d4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b59d8:	1c51      	adds	r1, r2, #1
   b59da:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b59de:	4413      	add	r3, r2
   b59e0:	7918      	ldrb	r0, [r3, #4]
}
   b59e2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b59e4:	6803      	ldr	r3, [r0, #0]
   b59e6:	691b      	ldr	r3, [r3, #16]
   b59e8:	4798      	blx	r3
   b59ea:	2800      	cmp	r0, #0
   b59ec:	d1f1      	bne.n	b59d2 <_ZN9TCPClient4readEv+0x12>
   b59ee:	f04f 30ff 	mov.w	r0, #4294967295
   b59f2:	e7f6      	b.n	b59e2 <_ZN9TCPClient4readEv+0x22>

000b59f4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b59f4:	4770      	bx	lr

000b59f6 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b59f6:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b59f8:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b59fa:	43c0      	mvns	r0, r0
   b59fc:	0fc0      	lsrs	r0, r0, #31
   b59fe:	4770      	bx	lr

000b5a00 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5a00:	4770      	bx	lr
	...

000b5a04 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5a04:	4b06      	ldr	r3, [pc, #24]	; (b5a20 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5a06:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5a08:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5a0a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5a0e:	d005      	beq.n	b5a1c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5a10:	4608      	mov	r0, r1
   b5a12:	f000 fc8f 	bl	b6334 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5a16:	2800      	cmp	r0, #0
   b5a18:	bf08      	it	eq
   b5a1a:	2400      	moveq	r4, #0
      }
   b5a1c:	4620      	mov	r0, r4
   b5a1e:	bd10      	pop	{r4, pc}
   b5a20:	000b6a74 	.word	0x000b6a74

000b5a24 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5a24:	b510      	push	{r4, lr}
   b5a26:	21ac      	movs	r1, #172	; 0xac
   b5a28:	4604      	mov	r4, r0
   b5a2a:	f7fe fd04 	bl	b4436 <_ZdlPvj>
   b5a2e:	4620      	mov	r0, r4
   b5a30:	bd10      	pop	{r4, pc}

000b5a32 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5a32:	21ac      	movs	r1, #172	; 0xac
   b5a34:	f7fe bcff 	b.w	b4436 <_ZdlPvj>

000b5a38 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5a3c:	f04f 0800 	mov.w	r8, #0
   b5a40:	b086      	sub	sp, #24
   b5a42:	461c      	mov	r4, r3
   b5a44:	f8c0 8004 	str.w	r8, [r0, #4]
   b5a48:	4605      	mov	r5, r0
   b5a4a:	460e      	mov	r6, r1
   b5a4c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b5a4e:	4641      	mov	r1, r8
   b5a50:	2210      	movs	r2, #16
   b5a52:	a802      	add	r0, sp, #8
   b5a54:	f000 fed0 	bl	b67f8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5a58:	1c63      	adds	r3, r4, #1
   b5a5a:	d009      	beq.n	b5a70 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5a60:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5a64:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5a68:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5a6c:	435c      	muls	r4, r3
   b5a6e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5a70:	6968      	ldr	r0, [r5, #20]
   b5a72:	2310      	movs	r3, #16
   b5a74:	9300      	str	r3, [sp, #0]
   b5a76:	6800      	ldr	r0, [r0, #0]
   b5a78:	ab02      	add	r3, sp, #8
   b5a7a:	f241 0205 	movw	r2, #4101	; 0x1005
   b5a7e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5a82:	f7ff f83d 	bl	b4b00 <sock_setsockopt>
    if (ret < 0) {
   b5a86:	2800      	cmp	r0, #0
   b5a88:	da07      	bge.n	b5a9a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5a8a:	f7ff f9a5 	bl	b4dd8 <__errno>
   b5a8e:	6803      	ldr	r3, [r0, #0]
   b5a90:	606b      	str	r3, [r5, #4]
        return 0;
   b5a92:	2000      	movs	r0, #0
}
   b5a94:	b006      	add	sp, #24
   b5a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b5a9a:	6968      	ldr	r0, [r5, #20]
   b5a9c:	2300      	movs	r3, #0
   b5a9e:	6800      	ldr	r0, [r0, #0]
   b5aa0:	463a      	mov	r2, r7
   b5aa2:	4631      	mov	r1, r6
   b5aa4:	f7ff f854 	bl	b4b50 <sock_send>
    if (ret < 0) {
   b5aa8:	1e03      	subs	r3, r0, #0
   b5aaa:	dbee      	blt.n	b5a8a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b5aac:	4618      	mov	r0, r3
   b5aae:	e7f1      	b.n	b5a94 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5ab0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5ab0:	b530      	push	{r4, r5, lr}
   b5ab2:	b087      	sub	sp, #28
   b5ab4:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5ab6:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5ab8:	4668      	mov	r0, sp
   b5aba:	f7ff fe2b 	bl	b5714 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ac0:	3404      	adds	r4, #4
   b5ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ac4:	682b      	ldr	r3, [r5, #0]
   b5ac6:	7023      	strb	r3, [r4, #0]
    }
   b5ac8:	b007      	add	sp, #28
   b5aca:	bd30      	pop	{r4, r5, pc}

000b5acc <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5acc:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b5ace:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5ad0:	4b05      	ldr	r3, [pc, #20]	; (b5ae8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b5ad2:	4604      	mov	r4, r0
   b5ad4:	358c      	adds	r5, #140	; 0x8c
   b5ad6:	f844 3b04 	str.w	r3, [r4], #4
   b5ada:	4606      	mov	r6, r0
   b5adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ae0:	682b      	ldr	r3, [r5, #0]
   b5ae2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5ae4:	4630      	mov	r0, r6
   b5ae6:	bd70      	pop	{r4, r5, r6, pc}
   b5ae8:	000b6b3c 	.word	0x000b6b3c

000b5aec <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5af0:	4698      	mov	r8, r3
    stop();
   b5af2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5af4:	b093      	sub	sp, #76	; 0x4c
   b5af6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5af8:	2400      	movs	r4, #0
    stop();
   b5afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5afc:	4606      	mov	r6, r0
   b5afe:	4617      	mov	r7, r2
    stop();
   b5b00:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5b02:	4628      	mov	r0, r5
   b5b04:	466b      	mov	r3, sp
   b5b06:	4622      	mov	r2, r4
   b5b08:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b5b0a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5b0c:	f7fe fee8 	bl	b48e0 <netdb_getaddrinfo>
   b5b10:	4605      	mov	r5, r0
   b5b12:	2800      	cmp	r0, #0
   b5b14:	d163      	bne.n	b5bde <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b5b16:	9b00      	ldr	r3, [sp, #0]
   b5b18:	2b00      	cmp	r3, #0
   b5b1a:	d04b      	beq.n	b5bb4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5b1c:	695b      	ldr	r3, [r3, #20]
   b5b1e:	2b00      	cmp	r3, #0
   b5b20:	d048      	beq.n	b5bb4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b5b22:	a806      	add	r0, sp, #24
   b5b24:	f7ff fdb2 	bl	b568c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5b28:	9b00      	ldr	r3, [sp, #0]
   b5b2a:	695c      	ldr	r4, [r3, #20]
    if (saddr->sa_family == AF_INET) {
   b5b2c:	7863      	ldrb	r3, [r4, #1]
   b5b2e:	2b02      	cmp	r3, #2
   b5b30:	d104      	bne.n	b5b3c <_ZN9TCPClient7connectEPKctm+0x50>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5b32:	1d21      	adds	r1, r4, #4
            addr = (const uint8_t*)(&ptr[3]);
   b5b34:	a806      	add	r0, sp, #24
   b5b36:	f7ff ffbb 	bl	b5ab0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b5b3a:	e026      	b.n	b5b8a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5b3c:	2b0a      	cmp	r3, #10
   b5b3e:	d124      	bne.n	b5b8a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5b40:	2211      	movs	r2, #17
   b5b42:	4629      	mov	r1, r5
   b5b44:	a801      	add	r0, sp, #4
   b5b46:	f000 fe57 	bl	b67f8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5b4a:	68a3      	ldr	r3, [r4, #8]
   b5b4c:	2b00      	cmp	r3, #0
   b5b4e:	d038      	beq.n	b5bc2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5b50:	f104 0308 	add.w	r3, r4, #8
   b5b54:	f10d 0c04 	add.w	ip, sp, #4
   b5b58:	3418      	adds	r4, #24
   b5b5a:	6818      	ldr	r0, [r3, #0]
   b5b5c:	6859      	ldr	r1, [r3, #4]
   b5b5e:	4662      	mov	r2, ip
   b5b60:	c203      	stmia	r2!, {r0, r1}
   b5b62:	3308      	adds	r3, #8
   b5b64:	42a3      	cmp	r3, r4
   b5b66:	4694      	mov	ip, r2
   b5b68:	d1f7      	bne.n	b5b5a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5b6a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5b6c:	a901      	add	r1, sp, #4
   b5b6e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5b70:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5b74:	f7ff fd98 	bl	b56a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5b78:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5b7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5b80:	ac07      	add	r4, sp, #28
   b5b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b84:	f8dc 3000 	ldr.w	r3, [ip]
   b5b88:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5b8a:	a806      	add	r0, sp, #24
   b5b8c:	f7ff fd9e 	bl	b56cc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5b90:	b180      	cbz	r0, b5bb4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b5b92:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5b94:	ad07      	add	r5, sp, #28
   b5b96:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5b9a:	4b12      	ldr	r3, [pc, #72]	; (b5be4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b5b9c:	930c      	str	r3, [sp, #48]	; 0x30
   b5b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ba0:	ac0d      	add	r4, sp, #52	; 0x34
   b5ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ba4:	682b      	ldr	r3, [r5, #0]
   b5ba6:	7023      	strb	r3, [r4, #0]
   b5ba8:	463a      	mov	r2, r7
   b5baa:	4643      	mov	r3, r8
   b5bac:	a90c      	add	r1, sp, #48	; 0x30
   b5bae:	4630      	mov	r0, r6
   b5bb0:	47c8      	blx	r9
   b5bb2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5bb4:	9800      	ldr	r0, [sp, #0]
   b5bb6:	f7fe fe8b 	bl	b48d0 <netdb_freeaddrinfo>
}
   b5bba:	4628      	mov	r0, r5
   b5bbc:	b013      	add	sp, #76	; 0x4c
   b5bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5bc2:	68e3      	ldr	r3, [r4, #12]
   b5bc4:	2b00      	cmp	r3, #0
   b5bc6:	d1c3      	bne.n	b5b50 <_ZN9TCPClient7connectEPKctm+0x64>
   b5bc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5bcc:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5bd0:	f7fe fef6 	bl	b49c0 <inet_htonl>
   b5bd4:	4581      	cmp	r9, r0
   b5bd6:	d1bb      	bne.n	b5b50 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5bd8:	f104 0114 	add.w	r1, r4, #20
   b5bdc:	e7aa      	b.n	b5b34 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5bde:	4625      	mov	r5, r4
   b5be0:	e7e8      	b.n	b5bb4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5be2:	bf00      	nop
   b5be4:	000b6b3c 	.word	0x000b6b3c

000b5be8 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5be8:	b538      	push	{r3, r4, r5, lr}
   b5bea:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5bec:	681a      	ldr	r2, [r3, #0]
   b5bee:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5bf0:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5bf2:	da10      	bge.n	b5c16 <_ZN9TCPClient9connectedEv+0x2e>
   b5bf4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5bf8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5bfc:	429a      	cmp	r2, r3
   b5bfe:	d10a      	bne.n	b5c16 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5c00:	6803      	ldr	r3, [r0, #0]
   b5c02:	691b      	ldr	r3, [r3, #16]
   b5c04:	4798      	blx	r3
        if (!rv) {
   b5c06:	4604      	mov	r4, r0
   b5c08:	b928      	cbnz	r0, b5c16 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b5c0a:	682b      	ldr	r3, [r5, #0]
   b5c0c:	4628      	mov	r0, r5
   b5c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c10:	4798      	blx	r3
        rv = available();
   b5c12:	4620      	mov	r0, r4
}
   b5c14:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b5c16:	2001      	movs	r0, #1
   b5c18:	e7fc      	b.n	b5c14 <_ZN9TCPClient9connectedEv+0x2c>

000b5c1a <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5c1a:	b510      	push	{r4, lr}
   b5c1c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5c1e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5c22:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5c26:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5c28:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5c2a:	d005      	beq.n	b5c38 <_ZN9TCPClient4peekEv+0x1e>
   b5c2c:	6963      	ldr	r3, [r4, #20]
   b5c2e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5c32:	4413      	add	r3, r2
   b5c34:	7918      	ldrb	r0, [r3, #4]
}
   b5c36:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5c38:	6803      	ldr	r3, [r0, #0]
   b5c3a:	691b      	ldr	r3, [r3, #16]
   b5c3c:	4798      	blx	r3
   b5c3e:	2800      	cmp	r0, #0
   b5c40:	d1f4      	bne.n	b5c2c <_ZN9TCPClient4peekEv+0x12>
   b5c42:	f04f 30ff 	mov.w	r0, #4294967295
   b5c46:	e7f6      	b.n	b5c36 <_ZN9TCPClient4peekEv+0x1c>

000b5c48 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c4a:	6943      	ldr	r3, [r0, #20]
   b5c4c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5c4e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5c52:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5c56:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5c58:	4605      	mov	r5, r0
   b5c5a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5c5c:	d016      	beq.n	b5c8c <_ZN9TCPClient4readEPhj+0x44>
   b5c5e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5c60:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5c64:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5c68:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5c6a:	42bc      	cmp	r4, r7
   b5c6c:	bf28      	it	cs
   b5c6e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5c70:	3304      	adds	r3, #4
   b5c72:	4622      	mov	r2, r4
   b5c74:	4419      	add	r1, r3
   b5c76:	4630      	mov	r0, r6
   b5c78:	f000 fdb0 	bl	b67dc <memcpy>
   b5c7c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5c7e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b5c82:	4423      	add	r3, r4
   b5c84:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5c88:	4620      	mov	r0, r4
   b5c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5c8c:	6803      	ldr	r3, [r0, #0]
   b5c8e:	691b      	ldr	r3, [r3, #16]
   b5c90:	4798      	blx	r3
   b5c92:	2800      	cmp	r0, #0
   b5c94:	d1e3      	bne.n	b5c5e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5c96:	f04f 34ff 	mov.w	r4, #4294967295
   b5c9a:	e7f5      	b.n	b5c88 <_ZN9TCPClient4readEPhj+0x40>

000b5c9c <_ZN9TCPClient12flush_bufferEv>:
   b5c9c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5c9e:	2300      	movs	r3, #0
   b5ca0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5ca4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5ca6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5caa:	4770      	bx	lr

000b5cac <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5cb0:	461f      	mov	r7, r3
    stop();
   b5cb2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5cb4:	460c      	mov	r4, r1
    stop();
   b5cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5cb8:	b08a      	sub	sp, #40	; 0x28
   b5cba:	4605      	mov	r5, r0
   b5cbc:	4616      	mov	r6, r2
    stop();
   b5cbe:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5cc0:	7d23      	ldrb	r3, [r4, #20]
   b5cc2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5cc6:	2b04      	cmp	r3, #4
   b5cc8:	bf0c      	ite	eq
   b5cca:	2002      	moveq	r0, #2
   b5ccc:	200a      	movne	r0, #10
   b5cce:	2206      	movs	r2, #6
   b5cd0:	2101      	movs	r1, #1
   b5cd2:	f7fe ff45 	bl	b4b60 <sock_socket>
   b5cd6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5cda:	696b      	ldr	r3, [r5, #20]
   b5cdc:	681b      	ldr	r3, [r3, #0]
   b5cde:	2b00      	cmp	r3, #0
   b5ce0:	da08      	bge.n	b5cf4 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5ce2:	682b      	ldr	r3, [r5, #0]
   b5ce4:	4628      	mov	r0, r5
   b5ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5ce8:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5cea:	4798      	blx	r3
}
   b5cec:	4620      	mov	r0, r4
   b5cee:	b00a      	add	sp, #40	; 0x28
   b5cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5cf4:	4628      	mov	r0, r5
   b5cf6:	f7ff ffd1 	bl	b5c9c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5cfa:	b1b7      	cbz	r7, b5d2a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5cfc:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5cfe:	a903      	add	r1, sp, #12
   b5d00:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5d02:	9303      	str	r3, [sp, #12]
   b5d04:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5d08:	f7fe fe1a 	bl	b4940 <if_index_to_name>
   b5d0c:	2800      	cmp	r0, #0
   b5d0e:	d1e8      	bne.n	b5ce2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5d10:	6968      	ldr	r0, [r5, #20]
   b5d12:	2306      	movs	r3, #6
   b5d14:	9300      	str	r3, [sp, #0]
   b5d16:	6800      	ldr	r0, [r0, #0]
   b5d18:	ab03      	add	r3, sp, #12
   b5d1a:	f241 020b 	movw	r2, #4107	; 0x100b
   b5d1e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5d22:	f7fe feed 	bl	b4b00 <sock_setsockopt>
   b5d26:	2800      	cmp	r0, #0
   b5d28:	d1db      	bne.n	b5ce2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5d2a:	221c      	movs	r2, #28
   b5d2c:	2100      	movs	r1, #0
   b5d2e:	a803      	add	r0, sp, #12
   b5d30:	f000 fd62 	bl	b67f8 <memset>
    if (ip.version() == 4) {
   b5d34:	7d23      	ldrb	r3, [r4, #20]
   b5d36:	2b04      	cmp	r3, #4
   b5d38:	d11d      	bne.n	b5d76 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5d3a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5d3e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5d40:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5d44:	f7fe fe44 	bl	b49d0 <inet_htons>
   b5d48:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5d4c:	6860      	ldr	r0, [r4, #4]
   b5d4e:	f7fe fe37 	bl	b49c0 <inet_htonl>
   b5d52:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5d54:	696b      	ldr	r3, [r5, #20]
   b5d56:	221c      	movs	r2, #28
   b5d58:	6818      	ldr	r0, [r3, #0]
   b5d5a:	a903      	add	r1, sp, #12
   b5d5c:	f7fe fee0 	bl	b4b20 <sock_connect>
   b5d60:	2800      	cmp	r0, #0
   b5d62:	d1be      	bne.n	b5ce2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5d64:	3404      	adds	r4, #4
   b5d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5d68:	696d      	ldr	r5, [r5, #20]
   b5d6a:	358c      	adds	r5, #140	; 0x8c
   b5d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5d6e:	6823      	ldr	r3, [r4, #0]
   b5d70:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b5d72:	2401      	movs	r4, #1
   b5d74:	e7ba      	b.n	b5cec <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5d76:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5d7a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5d7c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5d80:	f7fe fe26 	bl	b49d0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5d84:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5d86:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5d8a:	1d23      	adds	r3, r4, #4
   b5d8c:	f104 0714 	add.w	r7, r4, #20
   b5d90:	6818      	ldr	r0, [r3, #0]
   b5d92:	6859      	ldr	r1, [r3, #4]
   b5d94:	4632      	mov	r2, r6
   b5d96:	c203      	stmia	r2!, {r0, r1}
   b5d98:	3308      	adds	r3, #8
   b5d9a:	42bb      	cmp	r3, r7
   b5d9c:	4616      	mov	r6, r2
   b5d9e:	d1f7      	bne.n	b5d90 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5da0:	e7d8      	b.n	b5d54 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5da4 <_ZN9TCPClient9availableEv>:
{
   b5da4:	b530      	push	{r4, r5, lr}
   b5da6:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5da8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5dac:	b08b      	sub	sp, #44	; 0x2c
   b5dae:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5db0:	b12b      	cbz	r3, b5dbe <_ZN9TCPClient9availableEv+0x1a>
   b5db2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5db6:	429a      	cmp	r2, r3
   b5db8:	d101      	bne.n	b5dbe <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b5dba:	f7ff ff6f 	bl	b5c9c <_ZN9TCPClient12flush_bufferEv>
   b5dbe:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5dc0:	6808      	ldr	r0, [r1, #0]
   b5dc2:	2800      	cmp	r0, #0
   b5dc4:	db18      	blt.n	b5df8 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5dc6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5dca:	2d7f      	cmp	r5, #127	; 0x7f
   b5dcc:	d814      	bhi.n	b5df8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b5dce:	3104      	adds	r1, #4
   b5dd0:	2308      	movs	r3, #8
   b5dd2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5dd6:	4429      	add	r1, r5
   b5dd8:	f7fe feb2 	bl	b4b40 <sock_recv>
            if (ret > 0) {
   b5ddc:	2800      	cmp	r0, #0
   b5dde:	dd13      	ble.n	b5e08 <_ZN9TCPClient9availableEv+0x64>
   b5de0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b5de2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5de6:	b90a      	cbnz	r2, b5dec <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5de8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5dec:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b5dee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5df2:	4410      	add	r0, r2
   b5df4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5df8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5dfa:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5dfe:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b5e02:	1ac0      	subs	r0, r0, r3
   b5e04:	b00b      	add	sp, #44	; 0x2c
   b5e06:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5e08:	f7fe ffe6 	bl	b4dd8 <__errno>
   b5e0c:	6803      	ldr	r3, [r0, #0]
   b5e0e:	2b0b      	cmp	r3, #11
   b5e10:	d0f2      	beq.n	b5df8 <_ZN9TCPClient9availableEv+0x54>
   b5e12:	f7fe ffe1 	bl	b4dd8 <__errno>
   b5e16:	6803      	ldr	r3, [r0, #0]
   b5e18:	2b0b      	cmp	r3, #11
   b5e1a:	d0ed      	beq.n	b5df8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5e1c:	2320      	movs	r3, #32
   b5e1e:	2500      	movs	r5, #0
   b5e20:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5e24:	f7fe ffd8 	bl	b4dd8 <__errno>
   b5e28:	6803      	ldr	r3, [r0, #0]
   b5e2a:	9301      	str	r3, [sp, #4]
   b5e2c:	4b08      	ldr	r3, [pc, #32]	; (b5e50 <_ZN9TCPClient9availableEv+0xac>)
   b5e2e:	4909      	ldr	r1, [pc, #36]	; (b5e54 <_ZN9TCPClient9availableEv+0xb0>)
   b5e30:	9300      	str	r3, [sp, #0]
   b5e32:	aa02      	add	r2, sp, #8
   b5e34:	462b      	mov	r3, r5
   b5e36:	2032      	movs	r0, #50	; 0x32
   b5e38:	f7fe fefa 	bl	b4c30 <log_message>
                    sock_close(d_->sock);
   b5e3c:	6963      	ldr	r3, [r4, #20]
   b5e3e:	6818      	ldr	r0, [r3, #0]
   b5e40:	f7fe fe66 	bl	b4b10 <sock_close>
   b5e44:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b5e46:	f04f 32ff 	mov.w	r2, #4294967295
   b5e4a:	601a      	str	r2, [r3, #0]
   b5e4c:	e7d4      	b.n	b5df8 <_ZN9TCPClient9availableEv+0x54>
   b5e4e:	bf00      	nop
   b5e50:	000b6bd7 	.word	0x000b6bd7
   b5e54:	000b6bd0 	.word	0x000b6bd0

000b5e58 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5e58:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5e5a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5e5c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5e5e:	6818      	ldr	r0, [r3, #0]
   b5e60:	2800      	cmp	r0, #0
   b5e62:	db01      	blt.n	b5e68 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5e64:	f7fe fe54 	bl	b4b10 <sock_close>
   b5e68:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5e6a:	f04f 32ff 	mov.w	r2, #4294967295
   b5e6e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5e70:	6960      	ldr	r0, [r4, #20]
   b5e72:	2211      	movs	r2, #17
   b5e74:	2100      	movs	r1, #0
   b5e76:	308c      	adds	r0, #140	; 0x8c
   b5e78:	f000 fcbe 	bl	b67f8 <memset>
    flush_buffer();
   b5e7c:	4620      	mov	r0, r4
}
   b5e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b5e82:	f7ff bf0b 	b.w	b5c9c <_ZN9TCPClient12flush_bufferEv>

000b5e86 <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   b5e86:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5e88:	6818      	ldr	r0, [r3, #0]
}
   b5e8a:	43c0      	mvns	r0, r0
   b5e8c:	0fc0      	lsrs	r0, r0, #31
   b5e8e:	4770      	bx	lr

000b5e90 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5e90:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5e92:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5e94:	4604      	mov	r4, r0
          total(0) {
   b5e96:	6001      	str	r1, [r0, #0]
   b5e98:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b5e9c:	3088      	adds	r0, #136	; 0x88
   b5e9e:	f7ff fbf5 	bl	b568c <_ZN9IPAddressC1Ev>
}
   b5ea2:	4620      	mov	r0, r4
   b5ea4:	bd10      	pop	{r4, pc}
	...

000b5ea8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5ea8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5eaa:	2300      	movs	r3, #0
   b5eac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5eb0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5eb4:	4a0e      	ldr	r2, [pc, #56]	; (b5ef0 <_ZN9TCPClientC1Ei+0x48>)
   b5eb6:	6103      	str	r3, [r0, #16]
   b5eb8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5eba:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5ebc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5ebe:	20ac      	movs	r0, #172	; 0xac
   b5ec0:	9101      	str	r1, [sp, #4]
   b5ec2:	f7fe fab4 	bl	b442e <_Znwj>
	  auto __pi = ::new (__mem)
   b5ec6:	1e05      	subs	r5, r0, #0
   b5ec8:	f105 060c 	add.w	r6, r5, #12
   b5ecc:	d008      	beq.n	b5ee0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b5ece:	2301      	movs	r3, #1
   b5ed0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5ed4:	4b07      	ldr	r3, [pc, #28]	; (b5ef4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5ed6:	9901      	ldr	r1, [sp, #4]
   b5ed8:	602b      	str	r3, [r5, #0]
   b5eda:	4630      	mov	r0, r6
   b5edc:	f7ff ffd8 	bl	b5e90 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5ee0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5ee2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5ee6:	f7ff fed9 	bl	b5c9c <_ZN9TCPClient12flush_bufferEv>
}
   b5eea:	b002      	add	sp, #8
   b5eec:	bd70      	pop	{r4, r5, r6, pc}
   b5eee:	bf00      	nop
   b5ef0:	000b6c0c 	.word	0x000b6c0c
   b5ef4:	000b6bf0 	.word	0x000b6bf0

000b5ef8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5ef8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5efa:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b5efe:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5f00:	f7ff ffd2 	bl	b5ea8 <_ZN9TCPClientC1Ei>
}
   b5f04:	4620      	mov	r0, r4
   b5f06:	bd10      	pop	{r4, pc}

000b5f08 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5f08:	b510      	push	{r4, lr}
   b5f0a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5f0c:	6800      	ldr	r0, [r0, #0]
   b5f0e:	2800      	cmp	r0, #0
   b5f10:	db01      	blt.n	b5f16 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5f12:	f7fe fdfd 	bl	b4b10 <sock_close>
    }
}
   b5f16:	4620      	mov	r0, r4
   b5f18:	bd10      	pop	{r4, pc}

000b5f1a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b5f1a:	300c      	adds	r0, #12
   b5f1c:	f7ff bff4 	b.w	b5f08 <_ZN9TCPClient4DataD1Ev>

000b5f20 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5f20:	2200      	movs	r2, #0
   b5f22:	6840      	ldr	r0, [r0, #4]
   b5f24:	4611      	mov	r1, r2
   b5f26:	f7fe becf 	b.w	b4cc8 <network_ready>

000b5f2a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5f2a:	2200      	movs	r2, #0
   b5f2c:	6840      	ldr	r0, [r0, #4]
   b5f2e:	4611      	mov	r1, r2
   b5f30:	f7fe beea 	b.w	b4d08 <network_listening>

000b5f34 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5f34:	2200      	movs	r2, #0
   b5f36:	6840      	ldr	r0, [r0, #4]
   b5f38:	4611      	mov	r1, r2
   b5f3a:	f7fe bef5 	b.w	b4d28 <network_get_listen_timeout>

000b5f3e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5f3e:	6840      	ldr	r0, [r0, #4]
   b5f40:	2200      	movs	r2, #0
   b5f42:	f7fe bee9 	b.w	b4d18 <network_set_listen_timeout>

000b5f46 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5f46:	6840      	ldr	r0, [r0, #4]
   b5f48:	2200      	movs	r2, #0
   b5f4a:	f081 0101 	eor.w	r1, r1, #1
   b5f4e:	f7fe bed3 	b.w	b4cf8 <network_listen>

000b5f52 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5f52:	2300      	movs	r3, #0
   b5f54:	6840      	ldr	r0, [r0, #4]
   b5f56:	461a      	mov	r2, r3
   b5f58:	4619      	mov	r1, r3
   b5f5a:	f7fe bec5 	b.w	b4ce8 <network_off>

000b5f5e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5f5e:	2300      	movs	r3, #0
   b5f60:	6840      	ldr	r0, [r0, #4]
   b5f62:	461a      	mov	r2, r3
   b5f64:	4619      	mov	r1, r3
   b5f66:	f7fe beb7 	b.w	b4cd8 <network_on>

000b5f6a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5f6a:	2200      	movs	r2, #0
   b5f6c:	6840      	ldr	r0, [r0, #4]
   b5f6e:	4611      	mov	r1, r2
   b5f70:	f7fe be9a 	b.w	b4ca8 <network_connecting>

000b5f74 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5f74:	6840      	ldr	r0, [r0, #4]
   b5f76:	2200      	movs	r2, #0
   b5f78:	2102      	movs	r1, #2
   b5f7a:	f7fe be9d 	b.w	b4cb8 <network_disconnect>

000b5f7e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5f7e:	2300      	movs	r3, #0
   b5f80:	6840      	ldr	r0, [r0, #4]
   b5f82:	461a      	mov	r2, r3
   b5f84:	f7fe be88 	b.w	b4c98 <network_connect>

000b5f88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5f88:	4b02      	ldr	r3, [pc, #8]	; (b5f94 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5f8a:	2204      	movs	r2, #4
   b5f8c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5f8e:	4a02      	ldr	r2, [pc, #8]	; (b5f98 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5f90:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5f92:	4770      	bx	lr
   b5f94:	2003e70c 	.word	0x2003e70c
   b5f98:	000b6c58 	.word	0x000b6c58

000b5f9c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5f9c:	2300      	movs	r3, #0
   b5f9e:	6840      	ldr	r0, [r0, #4]
   b5fa0:	461a      	mov	r2, r3
   b5fa2:	f7fe be79 	b.w	b4c98 <network_connect>

000b5fa6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5fa6:	6840      	ldr	r0, [r0, #4]
   b5fa8:	2200      	movs	r2, #0
   b5faa:	2102      	movs	r1, #2
   b5fac:	f7fe be84 	b.w	b4cb8 <network_disconnect>

000b5fb0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5fb0:	2200      	movs	r2, #0
   b5fb2:	6840      	ldr	r0, [r0, #4]
   b5fb4:	4611      	mov	r1, r2
   b5fb6:	f7fe be77 	b.w	b4ca8 <network_connecting>

000b5fba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5fba:	2200      	movs	r2, #0
   b5fbc:	6840      	ldr	r0, [r0, #4]
   b5fbe:	4611      	mov	r1, r2
   b5fc0:	f7fe be82 	b.w	b4cc8 <network_ready>

000b5fc4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5fc4:	2300      	movs	r3, #0
   b5fc6:	6840      	ldr	r0, [r0, #4]
   b5fc8:	461a      	mov	r2, r3
   b5fca:	4619      	mov	r1, r3
   b5fcc:	f7fe be84 	b.w	b4cd8 <network_on>

000b5fd0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5fd0:	2300      	movs	r3, #0
   b5fd2:	6840      	ldr	r0, [r0, #4]
   b5fd4:	461a      	mov	r2, r3
   b5fd6:	4619      	mov	r1, r3
   b5fd8:	f7fe be86 	b.w	b4ce8 <network_off>

000b5fdc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5fdc:	6840      	ldr	r0, [r0, #4]
   b5fde:	2100      	movs	r1, #0
   b5fe0:	f7fe beaa 	b.w	b4d38 <network_is_on>

000b5fe4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5fe4:	6840      	ldr	r0, [r0, #4]
   b5fe6:	2100      	movs	r1, #0
   b5fe8:	f7fe beae 	b.w	b4d48 <network_is_off>

000b5fec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5fec:	6840      	ldr	r0, [r0, #4]
   b5fee:	2200      	movs	r2, #0
   b5ff0:	f081 0101 	eor.w	r1, r1, #1
   b5ff4:	f7fe be80 	b.w	b4cf8 <network_listen>

000b5ff8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5ff8:	6840      	ldr	r0, [r0, #4]
   b5ffa:	2200      	movs	r2, #0
   b5ffc:	f7fe be8c 	b.w	b4d18 <network_set_listen_timeout>

000b6000 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6000:	2200      	movs	r2, #0
   b6002:	6840      	ldr	r0, [r0, #4]
   b6004:	4611      	mov	r1, r2
   b6006:	f7fe be8f 	b.w	b4d28 <network_get_listen_timeout>

000b600a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b600a:	2200      	movs	r2, #0
   b600c:	6840      	ldr	r0, [r0, #4]
   b600e:	4611      	mov	r1, r2
   b6010:	f7fe be7a 	b.w	b4d08 <network_listening>

000b6014 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_preferred(*this, preferred, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b6014:	6840      	ldr	r0, [r0, #4]
   b6016:	2100      	movs	r1, #0
   b6018:	f7fe bea6 	b.w	b4d68 <network_is_preferred>

000b601c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b601c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6020:	b095      	sub	sp, #84	; 0x54
   b6022:	4614      	mov	r4, r2
   b6024:	460d      	mov	r5, r1
   b6026:	4607      	mov	r7, r0
    IPAddress addr;
   b6028:	f7ff fb30 	bl	b568c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b602c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b602e:	221c      	movs	r2, #28
   b6030:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6032:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6034:	f000 fbe0 	bl	b67f8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6038:	2340      	movs	r3, #64	; 0x40
   b603a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b603c:	4620      	mov	r0, r4
   b603e:	466b      	mov	r3, sp
   b6040:	aa0c      	add	r2, sp, #48	; 0x30
   b6042:	2100      	movs	r1, #0
   b6044:	f7fe fc4c 	bl	b48e0 <netdb_getaddrinfo>
    if (!r) {
   b6048:	4604      	mov	r4, r0
   b604a:	2800      	cmp	r0, #0
   b604c:	d14b      	bne.n	b60e6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b604e:	4602      	mov	r2, r0
   b6050:	2101      	movs	r1, #1
   b6052:	6868      	ldr	r0, [r5, #4]
   b6054:	f7fe fe38 	bl	b4cc8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6058:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b605a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b605c:	4622      	mov	r2, r4
   b605e:	6868      	ldr	r0, [r5, #4]
   b6060:	f7fe fe32 	bl	b4cc8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6064:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6066:	4681      	mov	r9, r0
        bool ok = false;
   b6068:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b606a:	2e00      	cmp	r6, #0
   b606c:	d03b      	beq.n	b60e6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b606e:	2900      	cmp	r1, #0
   b6070:	d139      	bne.n	b60e6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6072:	6873      	ldr	r3, [r6, #4]
   b6074:	2b02      	cmp	r3, #2
   b6076:	d003      	beq.n	b6080 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6078:	2b0a      	cmp	r3, #10
   b607a:	d011      	beq.n	b60a0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b607c:	69f6      	ldr	r6, [r6, #28]
   b607e:	e7f4      	b.n	b606a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6080:	f1b8 0f00 	cmp.w	r8, #0
   b6084:	d0fa      	beq.n	b607c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6086:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6088:	a806      	add	r0, sp, #24
   b608a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b608c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b608e:	f7ff fb41 	bl	b5714 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6094:	1d3c      	adds	r4, r7, #4
   b6096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6098:	682b      	ldr	r3, [r5, #0]
   b609a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b609c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b609e:	e7ed      	b.n	b607c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b60a0:	f1b9 0f00 	cmp.w	r9, #0
   b60a4:	d0ea      	beq.n	b607c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b60a6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b60a8:	2210      	movs	r2, #16
   b60aa:	a801      	add	r0, sp, #4
   b60ac:	f000 fba4 	bl	b67f8 <memset>
                    a.v = 6;
   b60b0:	2306      	movs	r3, #6
   b60b2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b60b6:	ad01      	add	r5, sp, #4
   b60b8:	f104 0308 	add.w	r3, r4, #8
   b60bc:	3418      	adds	r4, #24
   b60be:	6818      	ldr	r0, [r3, #0]
   b60c0:	6859      	ldr	r1, [r3, #4]
   b60c2:	462a      	mov	r2, r5
   b60c4:	c203      	stmia	r2!, {r0, r1}
   b60c6:	3308      	adds	r3, #8
   b60c8:	42a3      	cmp	r3, r4
   b60ca:	4615      	mov	r5, r2
   b60cc:	d1f7      	bne.n	b60be <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b60ce:	a901      	add	r1, sp, #4
   b60d0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b60d2:	ad07      	add	r5, sp, #28
   b60d4:	f7ff fae8 	bl	b56a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b60d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b60da:	1d3c      	adds	r4, r7, #4
   b60dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b60de:	682b      	ldr	r3, [r5, #0]
   b60e0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b60e2:	4649      	mov	r1, r9
   b60e4:	e7ca      	b.n	b607c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b60e6:	9800      	ldr	r0, [sp, #0]
   b60e8:	f7fe fbf2 	bl	b48d0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b60ec:	4638      	mov	r0, r7
   b60ee:	b015      	add	sp, #84	; 0x54
   b60f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b60f4 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b60f4:	3803      	subs	r0, #3
   b60f6:	2802      	cmp	r0, #2
   b60f8:	bf9a      	itte	ls
   b60fa:	4b02      	ldrls	r3, [pc, #8]	; (b6104 <_ZN5spark12NetworkClass4fromEm+0x10>)
   b60fc:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b6100:	4801      	ldrhi	r0, [pc, #4]	; (b6108 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   b6102:	4770      	bx	lr
   b6104:	000b6c94 	.word	0x000b6c94
   b6108:	2003e714 	.word	0x2003e714

000b610c <_ZN5spark12NetworkClass9preferredEb>:
NetworkClass& NetworkClass::preferred(bool preferred) {
   b610c:	b508      	push	{r3, lr}
    network_handle_t network = network_preferred(*this, preferred, nullptr);
   b610e:	2200      	movs	r2, #0
   b6110:	6840      	ldr	r0, [r0, #4]
   b6112:	f7fe fe21 	bl	b4d58 <network_preferred>
}
   b6116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b611a:	f7ff bfeb 	b.w	b60f4 <_ZN5spark12NetworkClass4fromEm>
	...

000b6120 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6120:	4b02      	ldr	r3, [pc, #8]	; (b612c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6122:	4a03      	ldr	r2, [pc, #12]	; (b6130 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6124:	601a      	str	r2, [r3, #0]
   b6126:	2200      	movs	r2, #0
   b6128:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b612a:	4770      	bx	lr
   b612c:	2003e714 	.word	0x2003e714
   b6130:	000b6ca8 	.word	0x000b6ca8

000b6134 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6134:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6136:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6138:	d902      	bls.n	b6140 <pinAvailable+0xc>
    return false;
   b613a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b613c:	b002      	add	sp, #8
   b613e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6140:	f1a0 030b 	sub.w	r3, r0, #11
   b6144:	2b02      	cmp	r3, #2
   b6146:	d81a      	bhi.n	b617e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6148:	4c17      	ldr	r4, [pc, #92]	; (b61a8 <pinAvailable+0x74>)
   b614a:	7821      	ldrb	r1, [r4, #0]
   b614c:	f3bf 8f5b 	dmb	ish
   b6150:	f011 0101 	ands.w	r1, r1, #1
   b6154:	d10b      	bne.n	b616e <pinAvailable+0x3a>
   b6156:	4620      	mov	r0, r4
   b6158:	9101      	str	r1, [sp, #4]
   b615a:	f7fe f97b 	bl	b4454 <__cxa_guard_acquire>
   b615e:	9901      	ldr	r1, [sp, #4]
   b6160:	b128      	cbz	r0, b616e <pinAvailable+0x3a>
   b6162:	4812      	ldr	r0, [pc, #72]	; (b61ac <pinAvailable+0x78>)
   b6164:	f7fe fe8e 	bl	b4e84 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6168:	4620      	mov	r0, r4
   b616a:	f7fe f978 	bl	b445e <__cxa_guard_release>
   b616e:	4b0f      	ldr	r3, [pc, #60]	; (b61ac <pinAvailable+0x78>)
   b6170:	7818      	ldrb	r0, [r3, #0]
   b6172:	f7fe fd0d 	bl	b4b90 <hal_spi_is_enabled>
   b6176:	2800      	cmp	r0, #0
   b6178:	d1df      	bne.n	b613a <pinAvailable+0x6>
  return true; // 'pin' is available
   b617a:	2001      	movs	r0, #1
   b617c:	e7de      	b.n	b613c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b617e:	2801      	cmp	r0, #1
   b6180:	d809      	bhi.n	b6196 <pinAvailable+0x62>
   b6182:	f000 f8b1 	bl	b62e8 <_Z19__fetch_global_Wirev>
   b6186:	2100      	movs	r1, #0
   b6188:	7c00      	ldrb	r0, [r0, #16]
   b618a:	f7fe fc91 	bl	b4ab0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b618e:	f080 0001 	eor.w	r0, r0, #1
   b6192:	b2c0      	uxtb	r0, r0
   b6194:	e7d2      	b.n	b613c <pinAvailable+0x8>
   b6196:	3809      	subs	r0, #9
   b6198:	2801      	cmp	r0, #1
   b619a:	d8ee      	bhi.n	b617a <pinAvailable+0x46>
   b619c:	f000 f864 	bl	b6268 <_Z22__fetch_global_Serial1v>
   b61a0:	7c00      	ldrb	r0, [r0, #16]
   b61a2:	f7fe fc45 	bl	b4a30 <hal_usart_is_enabled>
   b61a6:	e7f2      	b.n	b618e <pinAvailable+0x5a>
   b61a8:	2003e71c 	.word	0x2003e71c
   b61ac:	2003e720 	.word	0x2003e720

000b61b0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b61b0:	2823      	cmp	r0, #35	; 0x23
{
   b61b2:	b538      	push	{r3, r4, r5, lr}
   b61b4:	4604      	mov	r4, r0
   b61b6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b61b8:	d80a      	bhi.n	b61d0 <pinMode+0x20>
   b61ba:	29ff      	cmp	r1, #255	; 0xff
   b61bc:	d008      	beq.n	b61d0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b61be:	f7ff ffb9 	bl	b6134 <pinAvailable>
   b61c2:	b128      	cbz	r0, b61d0 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b61c4:	4629      	mov	r1, r5
   b61c6:	4620      	mov	r0, r4
}
   b61c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b61cc:	f7fe bb98 	b.w	b4900 <hal_gpio_mode>
}
   b61d0:	bd38      	pop	{r3, r4, r5, pc}

000b61d2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b61d2:	b538      	push	{r3, r4, r5, lr}
   b61d4:	4604      	mov	r4, r0
   b61d6:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b61d8:	f7fe fb9a 	bl	b4910 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b61dc:	28ff      	cmp	r0, #255	; 0xff
   b61de:	d010      	beq.n	b6202 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b61e0:	2806      	cmp	r0, #6
   b61e2:	d804      	bhi.n	b61ee <digitalWrite+0x1c>
   b61e4:	234d      	movs	r3, #77	; 0x4d
   b61e6:	fa23 f000 	lsr.w	r0, r3, r0
   b61ea:	07c3      	lsls	r3, r0, #31
   b61ec:	d409      	bmi.n	b6202 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b61ee:	4620      	mov	r0, r4
   b61f0:	f7ff ffa0 	bl	b6134 <pinAvailable>
   b61f4:	b128      	cbz	r0, b6202 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b61f6:	4629      	mov	r1, r5
   b61f8:	4620      	mov	r0, r4
}
   b61fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b61fe:	f7fe bb8f 	b.w	b4920 <hal_gpio_write>
}
   b6202:	bd38      	pop	{r3, r4, r5, pc}

000b6204 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b6204:	280d      	cmp	r0, #13
{
   b6206:	b510      	push	{r4, lr}
   b6208:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b620a:	bf9c      	itt	ls
   b620c:	340e      	addls	r4, #14
   b620e:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b6210:	4620      	mov	r0, r4
   b6212:	f7ff ff8f 	bl	b6134 <pinAvailable>
   b6216:	b150      	cbz	r0, b622e <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b6218:	2103      	movs	r1, #3
   b621a:	4620      	mov	r0, r4
   b621c:	f7fe fb68 	bl	b48f0 <hal_pin_validate_function>
   b6220:	2803      	cmp	r0, #3
   b6222:	d104      	bne.n	b622e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b6224:	4620      	mov	r0, r4
}
   b6226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b622a:	f7fe bb81 	b.w	b4930 <hal_adc_read>
}
   b622e:	2000      	movs	r0, #0
   b6230:	bd10      	pop	{r4, pc}

000b6232 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6232:	4770      	bx	lr

000b6234 <_Z20acquireSerial1Bufferv>:
{
   b6234:	b538      	push	{r3, r4, r5, lr}
   b6236:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6238:	2514      	movs	r5, #20
   b623a:	462a      	mov	r2, r5
   b623c:	2100      	movs	r1, #0
   b623e:	f000 fadb 	bl	b67f8 <memset>
   b6242:	8025      	strh	r5, [r4, #0]
   b6244:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6246:	4907      	ldr	r1, [pc, #28]	; (b6264 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6248:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b624a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b624c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b624e:	f000 f86f 	bl	b6330 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6252:	4904      	ldr	r1, [pc, #16]	; (b6264 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6254:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6256:	4628      	mov	r0, r5
   b6258:	f000 f86a 	bl	b6330 <_ZnajRKSt9nothrow_t>
    };
   b625c:	60e0      	str	r0, [r4, #12]
}
   b625e:	4620      	mov	r0, r4
   b6260:	bd38      	pop	{r3, r4, r5, pc}
   b6262:	bf00      	nop
   b6264:	000b6ce4 	.word	0x000b6ce4

000b6268 <_Z22__fetch_global_Serial1v>:
{
   b6268:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b626a:	4d0e      	ldr	r5, [pc, #56]	; (b62a4 <_Z22__fetch_global_Serial1v+0x3c>)
   b626c:	7829      	ldrb	r1, [r5, #0]
   b626e:	f3bf 8f5b 	dmb	ish
   b6272:	f011 0401 	ands.w	r4, r1, #1
{
   b6276:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6278:	d111      	bne.n	b629e <_Z22__fetch_global_Serial1v+0x36>
   b627a:	4628      	mov	r0, r5
   b627c:	f7fe f8ea 	bl	b4454 <__cxa_guard_acquire>
   b6280:	b168      	cbz	r0, b629e <_Z22__fetch_global_Serial1v+0x36>
   b6282:	a801      	add	r0, sp, #4
   b6284:	f7ff ffd6 	bl	b6234 <_Z20acquireSerial1Bufferv>
   b6288:	aa01      	add	r2, sp, #4
   b628a:	4621      	mov	r1, r4
   b628c:	4806      	ldr	r0, [pc, #24]	; (b62a8 <_Z22__fetch_global_Serial1v+0x40>)
   b628e:	f7ff fb17 	bl	b58c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6292:	4628      	mov	r0, r5
   b6294:	f7fe f8e3 	bl	b445e <__cxa_guard_release>
   b6298:	4804      	ldr	r0, [pc, #16]	; (b62ac <_Z22__fetch_global_Serial1v+0x44>)
   b629a:	f000 fa99 	bl	b67d0 <atexit>
    return serial1;
}
   b629e:	4802      	ldr	r0, [pc, #8]	; (b62a8 <_Z22__fetch_global_Serial1v+0x40>)
   b62a0:	b007      	add	sp, #28
   b62a2:	bd30      	pop	{r4, r5, pc}
   b62a4:	2003e728 	.word	0x2003e728
   b62a8:	2003e72c 	.word	0x2003e72c
   b62ac:	000b6233 	.word	0x000b6233

000b62b0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b62b0:	4770      	bx	lr
	...

000b62b4 <_Z17acquireWireBufferv>:
{
   b62b4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b62b6:	4b0a      	ldr	r3, [pc, #40]	; (b62e0 <_Z17acquireWireBufferv+0x2c>)
   b62b8:	6003      	str	r3, [r0, #0]
   b62ba:	2301      	movs	r3, #1
{
   b62bc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b62be:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b62c0:	4908      	ldr	r1, [pc, #32]	; (b62e4 <_Z17acquireWireBufferv+0x30>)
   b62c2:	2020      	movs	r0, #32
   b62c4:	f000 f834 	bl	b6330 <_ZnajRKSt9nothrow_t>
	};
   b62c8:	2520      	movs	r5, #32
   b62ca:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b62cc:	4905      	ldr	r1, [pc, #20]	; (b62e4 <_Z17acquireWireBufferv+0x30>)
	};
   b62ce:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b62d0:	4628      	mov	r0, r5
   b62d2:	f000 f82d 	bl	b6330 <_ZnajRKSt9nothrow_t>
	};
   b62d6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b62da:	4620      	mov	r0, r4
   b62dc:	bd38      	pop	{r3, r4, r5, pc}
   b62de:	bf00      	nop
   b62e0:	00010018 	.word	0x00010018
   b62e4:	000b6ce4 	.word	0x000b6ce4

000b62e8 <_Z19__fetch_global_Wirev>:
{
   b62e8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b62ea:	4d0e      	ldr	r5, [pc, #56]	; (b6324 <_Z19__fetch_global_Wirev+0x3c>)
   b62ec:	7829      	ldrb	r1, [r5, #0]
   b62ee:	f3bf 8f5b 	dmb	ish
   b62f2:	f011 0401 	ands.w	r4, r1, #1
{
   b62f6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b62f8:	d111      	bne.n	b631e <_Z19__fetch_global_Wirev+0x36>
   b62fa:	4628      	mov	r0, r5
   b62fc:	f7fe f8aa 	bl	b4454 <__cxa_guard_acquire>
   b6300:	b168      	cbz	r0, b631e <_Z19__fetch_global_Wirev+0x36>
   b6302:	4668      	mov	r0, sp
   b6304:	f7ff ffd6 	bl	b62b4 <_Z17acquireWireBufferv>
   b6308:	466a      	mov	r2, sp
   b630a:	4621      	mov	r1, r4
   b630c:	4806      	ldr	r0, [pc, #24]	; (b6328 <_Z19__fetch_global_Wirev+0x40>)
   b630e:	f7ff fb17 	bl	b5940 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6312:	4628      	mov	r0, r5
   b6314:	f7fe f8a3 	bl	b445e <__cxa_guard_release>
   b6318:	4804      	ldr	r0, [pc, #16]	; (b632c <_Z19__fetch_global_Wirev+0x44>)
   b631a:	f000 fa59 	bl	b67d0 <atexit>
	return wire;
}
   b631e:	4802      	ldr	r0, [pc, #8]	; (b6328 <_Z19__fetch_global_Wirev+0x40>)
   b6320:	b007      	add	sp, #28
   b6322:	bd30      	pop	{r4, r5, pc}
   b6324:	2003e744 	.word	0x2003e744
   b6328:	2003e748 	.word	0x2003e748
   b632c:	000b62b1 	.word	0x000b62b1

000b6330 <_ZnajRKSt9nothrow_t>:
   b6330:	f7fe b87f 	b.w	b4432 <_Znaj>

000b6334 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6334:	4901      	ldr	r1, [pc, #4]	; (b633c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6336:	f000 b8f9 	b.w	b652c <_ZNKSt9type_infoeqERKS_>
   b633a:	bf00      	nop
   b633c:	000b6d00 	.word	0x000b6d00

000b6340 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6340:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6342:	2400      	movs	r4, #0
   b6344:	2310      	movs	r3, #16
   b6346:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b634a:	6803      	ldr	r3, [r0, #0]
   b634c:	4615      	mov	r5, r2
   b634e:	699e      	ldr	r6, [r3, #24]
   b6350:	6812      	ldr	r2, [r2, #0]
   b6352:	466b      	mov	r3, sp
   b6354:	e9cd 4400 	strd	r4, r4, [sp]
   b6358:	47b0      	blx	r6
   b635a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b635e:	f003 0306 	and.w	r3, r3, #6
   b6362:	2b06      	cmp	r3, #6
   b6364:	bf03      	ittte	eq
   b6366:	9b00      	ldreq	r3, [sp, #0]
   b6368:	602b      	streq	r3, [r5, #0]
   b636a:	2001      	moveq	r0, #1
   b636c:	4620      	movne	r0, r4
   b636e:	b004      	add	sp, #16
   b6370:	bd70      	pop	{r4, r5, r6, pc}

000b6372 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6372:	9800      	ldr	r0, [sp, #0]
   b6374:	4290      	cmp	r0, r2
   b6376:	bf14      	ite	ne
   b6378:	2001      	movne	r0, #1
   b637a:	2006      	moveq	r0, #6
   b637c:	4770      	bx	lr
	...

000b6380 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6380:	b510      	push	{r4, lr}
   b6382:	4b03      	ldr	r3, [pc, #12]	; (b6390 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6384:	6003      	str	r3, [r0, #0]
   b6386:	4604      	mov	r4, r0
   b6388:	f000 f8cd 	bl	b6526 <_ZNSt9type_infoD1Ev>
   b638c:	4620      	mov	r0, r4
   b638e:	bd10      	pop	{r4, pc}
   b6390:	000b6d40 	.word	0x000b6d40

000b6394 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6394:	b510      	push	{r4, lr}
   b6396:	4604      	mov	r4, r0
   b6398:	f7ff fff2 	bl	b6380 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b639c:	4620      	mov	r0, r4
   b639e:	2108      	movs	r1, #8
   b63a0:	f7fe f849 	bl	b4436 <_ZdlPvj>
   b63a4:	4620      	mov	r0, r4
   b63a6:	bd10      	pop	{r4, pc}

000b63a8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b63a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b63ac:	461f      	mov	r7, r3
   b63ae:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b63b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b63b6:	4598      	cmp	r8, r3
   b63b8:	4606      	mov	r6, r0
   b63ba:	4615      	mov	r5, r2
   b63bc:	d107      	bne.n	b63ce <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b63be:	9907      	ldr	r1, [sp, #28]
   b63c0:	f000 f8b4 	bl	b652c <_ZNKSt9type_infoeqERKS_>
   b63c4:	b118      	cbz	r0, b63ce <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b63c6:	7165      	strb	r5, [r4, #5]
   b63c8:	2000      	movs	r0, #0
   b63ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b63ce:	4639      	mov	r1, r7
   b63d0:	4630      	mov	r0, r6
   b63d2:	f000 f8ab 	bl	b652c <_ZNKSt9type_infoeqERKS_>
   b63d6:	2800      	cmp	r0, #0
   b63d8:	d0f6      	beq.n	b63c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b63da:	2301      	movs	r3, #1
   b63dc:	f8c4 8000 	str.w	r8, [r4]
   b63e0:	7125      	strb	r5, [r4, #4]
   b63e2:	71a3      	strb	r3, [r4, #6]
   b63e4:	e7f0      	b.n	b63c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b63e6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b63e6:	b538      	push	{r3, r4, r5, lr}
   b63e8:	4615      	mov	r5, r2
   b63ea:	461c      	mov	r4, r3
   b63ec:	f000 f89e 	bl	b652c <_ZNKSt9type_infoeqERKS_>
   b63f0:	b120      	cbz	r0, b63fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b63f2:	2308      	movs	r3, #8
   b63f4:	60e3      	str	r3, [r4, #12]
   b63f6:	2306      	movs	r3, #6
   b63f8:	6025      	str	r5, [r4, #0]
   b63fa:	7123      	strb	r3, [r4, #4]
   b63fc:	bd38      	pop	{r3, r4, r5, pc}

000b63fe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b63fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6400:	4605      	mov	r5, r0
   b6402:	460c      	mov	r4, r1
   b6404:	9201      	str	r2, [sp, #4]
   b6406:	461e      	mov	r6, r3
   b6408:	f000 f890 	bl	b652c <_ZNKSt9type_infoeqERKS_>
   b640c:	b950      	cbnz	r0, b6424 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b640e:	2e03      	cmp	r6, #3
   b6410:	d808      	bhi.n	b6424 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6412:	6823      	ldr	r3, [r4, #0]
   b6414:	9a01      	ldr	r2, [sp, #4]
   b6416:	695b      	ldr	r3, [r3, #20]
   b6418:	4629      	mov	r1, r5
   b641a:	4620      	mov	r0, r4
   b641c:	b002      	add	sp, #8
   b641e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6422:	4718      	bx	r3
   b6424:	b002      	add	sp, #8
   b6426:	bd70      	pop	{r4, r5, r6, pc}

000b6428 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6428:	b510      	push	{r4, lr}
   b642a:	4b03      	ldr	r3, [pc, #12]	; (b6438 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b642c:	6003      	str	r3, [r0, #0]
   b642e:	4604      	mov	r4, r0
   b6430:	f7ff ffa6 	bl	b6380 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6434:	4620      	mov	r0, r4
   b6436:	bd10      	pop	{r4, pc}
   b6438:	000b6da0 	.word	0x000b6da0

000b643c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b643c:	b510      	push	{r4, lr}
   b643e:	4604      	mov	r4, r0
   b6440:	f7ff fff2 	bl	b6428 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6444:	4620      	mov	r0, r4
   b6446:	210c      	movs	r1, #12
   b6448:	f7fd fff5 	bl	b4436 <_ZdlPvj>
   b644c:	4620      	mov	r0, r4
   b644e:	bd10      	pop	{r4, pc}

000b6450 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6452:	9f08      	ldr	r7, [sp, #32]
   b6454:	4297      	cmp	r7, r2
   b6456:	4605      	mov	r5, r0
   b6458:	460e      	mov	r6, r1
   b645a:	4614      	mov	r4, r2
   b645c:	d00a      	beq.n	b6474 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b645e:	68a8      	ldr	r0, [r5, #8]
   b6460:	6802      	ldr	r2, [r0, #0]
   b6462:	9708      	str	r7, [sp, #32]
   b6464:	6a15      	ldr	r5, [r2, #32]
   b6466:	4631      	mov	r1, r6
   b6468:	4622      	mov	r2, r4
   b646a:	46ac      	mov	ip, r5
   b646c:	b003      	add	sp, #12
   b646e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6472:	4760      	bx	ip
   b6474:	4619      	mov	r1, r3
   b6476:	9301      	str	r3, [sp, #4]
   b6478:	f000 f858 	bl	b652c <_ZNKSt9type_infoeqERKS_>
   b647c:	9b01      	ldr	r3, [sp, #4]
   b647e:	2800      	cmp	r0, #0
   b6480:	d0ed      	beq.n	b645e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6482:	2006      	movs	r0, #6
   b6484:	b003      	add	sp, #12
   b6486:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6488 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6488:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b648c:	460d      	mov	r5, r1
   b648e:	4619      	mov	r1, r3
   b6490:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6494:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6498:	4681      	mov	r9, r0
   b649a:	4617      	mov	r7, r2
   b649c:	4698      	mov	r8, r3
   b649e:	f000 f845 	bl	b652c <_ZNKSt9type_infoeqERKS_>
   b64a2:	b190      	cbz	r0, b64ca <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b64a4:	2d00      	cmp	r5, #0
   b64a6:	6034      	str	r4, [r6, #0]
   b64a8:	7137      	strb	r7, [r6, #4]
   b64aa:	db09      	blt.n	b64c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b64ac:	1961      	adds	r1, r4, r5
   b64ae:	458a      	cmp	sl, r1
   b64b0:	bf0c      	ite	eq
   b64b2:	2106      	moveq	r1, #6
   b64b4:	2101      	movne	r1, #1
   b64b6:	71b1      	strb	r1, [r6, #6]
   b64b8:	2000      	movs	r0, #0
   b64ba:	b001      	add	sp, #4
   b64bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b64c0:	3502      	adds	r5, #2
   b64c2:	d1f9      	bne.n	b64b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b64c4:	2301      	movs	r3, #1
   b64c6:	71b3      	strb	r3, [r6, #6]
   b64c8:	e7f6      	b.n	b64b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b64ca:	4554      	cmp	r4, sl
   b64cc:	d106      	bne.n	b64dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b64ce:	4659      	mov	r1, fp
   b64d0:	4648      	mov	r0, r9
   b64d2:	f000 f82b 	bl	b652c <_ZNKSt9type_infoeqERKS_>
   b64d6:	b108      	cbz	r0, b64dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b64d8:	7177      	strb	r7, [r6, #5]
   b64da:	e7ed      	b.n	b64b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b64dc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b64e0:	6803      	ldr	r3, [r0, #0]
   b64e2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b64e6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b64ea:	69dc      	ldr	r4, [r3, #28]
   b64ec:	463a      	mov	r2, r7
   b64ee:	4643      	mov	r3, r8
   b64f0:	4629      	mov	r1, r5
   b64f2:	46a4      	mov	ip, r4
   b64f4:	b001      	add	sp, #4
   b64f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b64fa:	4760      	bx	ip

000b64fc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b64fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6500:	4607      	mov	r7, r0
   b6502:	460c      	mov	r4, r1
   b6504:	4615      	mov	r5, r2
   b6506:	461e      	mov	r6, r3
   b6508:	f7ff ff6d 	bl	b63e6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b650c:	b948      	cbnz	r0, b6522 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b650e:	68b8      	ldr	r0, [r7, #8]
   b6510:	6803      	ldr	r3, [r0, #0]
   b6512:	699f      	ldr	r7, [r3, #24]
   b6514:	462a      	mov	r2, r5
   b6516:	4633      	mov	r3, r6
   b6518:	4621      	mov	r1, r4
   b651a:	46bc      	mov	ip, r7
   b651c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6520:	4760      	bx	ip
   b6522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6526 <_ZNSt9type_infoD1Ev>:
   b6526:	4770      	bx	lr

000b6528 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6528:	2000      	movs	r0, #0
   b652a:	4770      	bx	lr

000b652c <_ZNKSt9type_infoeqERKS_>:
   b652c:	4281      	cmp	r1, r0
   b652e:	b508      	push	{r3, lr}
   b6530:	d00e      	beq.n	b6550 <_ZNKSt9type_infoeqERKS_+0x24>
   b6532:	6840      	ldr	r0, [r0, #4]
   b6534:	7803      	ldrb	r3, [r0, #0]
   b6536:	2b2a      	cmp	r3, #42	; 0x2a
   b6538:	d00c      	beq.n	b6554 <_ZNKSt9type_infoeqERKS_+0x28>
   b653a:	6849      	ldr	r1, [r1, #4]
   b653c:	780b      	ldrb	r3, [r1, #0]
   b653e:	2b2a      	cmp	r3, #42	; 0x2a
   b6540:	bf08      	it	eq
   b6542:	3101      	addeq	r1, #1
   b6544:	f7fd ff26 	bl	b4394 <strcmp>
   b6548:	fab0 f080 	clz	r0, r0
   b654c:	0940      	lsrs	r0, r0, #5
   b654e:	bd08      	pop	{r3, pc}
   b6550:	2001      	movs	r0, #1
   b6552:	e7fc      	b.n	b654e <_ZNKSt9type_infoeqERKS_+0x22>
   b6554:	2000      	movs	r0, #0
   b6556:	e7fa      	b.n	b654e <_ZNKSt9type_infoeqERKS_+0x22>

000b6558 <logf>:
   b6558:	b508      	push	{r3, lr}
   b655a:	ed2d 8b02 	vpush	{d8}
   b655e:	eeb0 8a40 	vmov.f32	s16, s0
   b6562:	f000 f82f 	bl	b65c4 <__ieee754_logf>
   b6566:	4b14      	ldr	r3, [pc, #80]	; (b65b8 <logf+0x60>)
   b6568:	f993 3000 	ldrsb.w	r3, [r3]
   b656c:	3301      	adds	r3, #1
   b656e:	d014      	beq.n	b659a <logf+0x42>
   b6570:	eeb4 8a48 	vcmp.f32	s16, s16
   b6574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6578:	d60f      	bvs.n	b659a <logf+0x42>
   b657a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b657e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6582:	dc0a      	bgt.n	b659a <logf+0x42>
   b6584:	eeb5 8a40 	vcmp.f32	s16, #0.0
   b6588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b658c:	d108      	bne.n	b65a0 <logf+0x48>
   b658e:	f7fe fc23 	bl	b4dd8 <__errno>
   b6592:	2322      	movs	r3, #34	; 0x22
   b6594:	ed9f 0a09 	vldr	s0, [pc, #36]	; b65bc <logf+0x64>
   b6598:	6003      	str	r3, [r0, #0]
   b659a:	ecbd 8b02 	vpop	{d8}
   b659e:	bd08      	pop	{r3, pc}
   b65a0:	f7fe fc1a 	bl	b4dd8 <__errno>
   b65a4:	ecbd 8b02 	vpop	{d8}
   b65a8:	4603      	mov	r3, r0
   b65aa:	2221      	movs	r2, #33	; 0x21
   b65ac:	601a      	str	r2, [r3, #0]
   b65ae:	4804      	ldr	r0, [pc, #16]	; (b65c0 <logf+0x68>)
   b65b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b65b4:	f000 b906 	b.w	b67c4 <nanf>
   b65b8:	2003e5bc 	.word	0x2003e5bc
   b65bc:	ff800000 	.word	0xff800000
   b65c0:	000b6ddc 	.word	0x000b6ddc

000b65c4 <__ieee754_logf>:
   b65c4:	ee10 3a10 	vmov	r3, s0
   b65c8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   b65cc:	d02e      	beq.n	b662c <__ieee754_logf+0x68>
   b65ce:	2b00      	cmp	r3, #0
   b65d0:	db33      	blt.n	b663a <__ieee754_logf+0x76>
   b65d2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   b65d6:	da40      	bge.n	b665a <__ieee754_logf+0x96>
   b65d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   b65dc:	db34      	blt.n	b6648 <__ieee754_logf+0x84>
   b65de:	f04f 0c00 	mov.w	ip, #0
   b65e2:	4868      	ldr	r0, [pc, #416]	; (b6784 <__ieee754_logf+0x1c0>)
   b65e4:	f3c3 0116 	ubfx	r1, r3, #0, #23
   b65e8:	4408      	add	r0, r1
   b65ea:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   b65ee:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   b65f2:	430a      	orrs	r2, r1
   b65f4:	15db      	asrs	r3, r3, #23
   b65f6:	ee00 2a10 	vmov	s0, r2
   b65fa:	3b7f      	subs	r3, #127	; 0x7f
   b65fc:	4a62      	ldr	r2, [pc, #392]	; (b6788 <__ieee754_logf+0x1c4>)
   b65fe:	4463      	add	r3, ip
   b6600:	f101 0c0f 	add.w	ip, r1, #15
   b6604:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b6608:	ea0c 0202 	and.w	r2, ip, r2
   b660c:	ee30 0a67 	vsub.f32	s0, s0, s15
   b6610:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   b6614:	bb22      	cbnz	r2, b6660 <__ieee754_logf+0x9c>
   b6616:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b661a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b661e:	d160      	bne.n	b66e2 <__ieee754_logf+0x11e>
   b6620:	2b00      	cmp	r3, #0
   b6622:	f040 8092 	bne.w	b674a <__ieee754_logf+0x186>
   b6626:	ed9f 0a59 	vldr	s0, [pc, #356]	; b678c <__ieee754_logf+0x1c8>
   b662a:	4770      	bx	lr
   b662c:	ed9f 7a58 	vldr	s14, [pc, #352]	; b6790 <__ieee754_logf+0x1cc>
   b6630:	eddf 7a56 	vldr	s15, [pc, #344]	; b678c <__ieee754_logf+0x1c8>
   b6634:	ee87 0a27 	vdiv.f32	s0, s14, s15
   b6638:	4770      	bx	lr
   b663a:	ee70 7a40 	vsub.f32	s15, s0, s0
   b663e:	ed9f 7a53 	vldr	s14, [pc, #332]	; b678c <__ieee754_logf+0x1c8>
   b6642:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b6646:	4770      	bx	lr
   b6648:	eddf 7a52 	vldr	s15, [pc, #328]	; b6794 <__ieee754_logf+0x1d0>
   b664c:	ee60 7a27 	vmul.f32	s15, s0, s15
   b6650:	f06f 0c18 	mvn.w	ip, #24
   b6654:	ee17 3a90 	vmov	r3, s15
   b6658:	e7c3      	b.n	b65e2 <__ieee754_logf+0x1e>
   b665a:	ee30 0a00 	vadd.f32	s0, s0, s0
   b665e:	4770      	bx	lr
   b6660:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   b6664:	ee70 7a27 	vadd.f32	s15, s0, s15
   b6668:	ee07 3a10 	vmov	s14, r3
   b666c:	ee80 4a27 	vdiv.f32	s8, s0, s15
   b6670:	4849      	ldr	r0, [pc, #292]	; (b6798 <__ieee754_logf+0x1d4>)
   b6672:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   b6676:	4408      	add	r0, r1
   b6678:	f502 7222 	add.w	r2, r2, #648	; 0x288
   b667c:	4302      	orrs	r2, r0
   b667e:	2a00      	cmp	r2, #0
   b6680:	ed9f 3a46 	vldr	s6, [pc, #280]	; b679c <__ieee754_logf+0x1d8>
   b6684:	eddf 4a46 	vldr	s9, [pc, #280]	; b67a0 <__ieee754_logf+0x1dc>
   b6688:	eddf 5a46 	vldr	s11, [pc, #280]	; b67a4 <__ieee754_logf+0x1e0>
   b668c:	eddf 3a46 	vldr	s7, [pc, #280]	; b67a8 <__ieee754_logf+0x1e4>
   b6690:	ed9f 5a46 	vldr	s10, [pc, #280]	; b67ac <__ieee754_logf+0x1e8>
   b6694:	eddf 7a46 	vldr	s15, [pc, #280]	; b67b0 <__ieee754_logf+0x1ec>
   b6698:	eddf 6a46 	vldr	s13, [pc, #280]	; b67b4 <__ieee754_logf+0x1f0>
   b669c:	ee24 6a04 	vmul.f32	s12, s8, s8
   b66a0:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   b66a4:	ee26 7a06 	vmul.f32	s14, s12, s12
   b66a8:	eee7 4a03 	vfma.f32	s9, s14, s6
   b66ac:	eea7 5a23 	vfma.f32	s10, s14, s7
   b66b0:	eee4 5a87 	vfma.f32	s11, s9, s14
   b66b4:	eee5 6a07 	vfma.f32	s13, s10, s14
   b66b8:	eee5 7a87 	vfma.f32	s15, s11, s14
   b66bc:	ee67 7a86 	vmul.f32	s15, s15, s12
   b66c0:	eee6 7a87 	vfma.f32	s15, s13, s14
   b66c4:	dd2a      	ble.n	b671c <__ieee754_logf+0x158>
   b66c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   b66ca:	ee20 7a07 	vmul.f32	s14, s0, s14
   b66ce:	ee27 7a00 	vmul.f32	s14, s14, s0
   b66d2:	bb4b      	cbnz	r3, b6728 <__ieee754_logf+0x164>
   b66d4:	ee77 7a87 	vadd.f32	s15, s15, s14
   b66d8:	eea7 7ac4 	vfms.f32	s14, s15, s8
   b66dc:	ee30 0a47 	vsub.f32	s0, s0, s14
   b66e0:	4770      	bx	lr
   b66e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   b66e6:	eddf 6a34 	vldr	s13, [pc, #208]	; b67b8 <__ieee754_logf+0x1f4>
   b66ea:	eef0 7a47 	vmov.f32	s15, s14
   b66ee:	eee0 7a66 	vfms.f32	s15, s0, s13
   b66f2:	ee20 7a00 	vmul.f32	s14, s0, s0
   b66f6:	ee27 7a27 	vmul.f32	s14, s14, s15
   b66fa:	2b00      	cmp	r3, #0
   b66fc:	d0ee      	beq.n	b66dc <__ieee754_logf+0x118>
   b66fe:	ee07 3a90 	vmov	s15, r3
   b6702:	ed9f 6a2e 	vldr	s12, [pc, #184]	; b67bc <__ieee754_logf+0x1f8>
   b6706:	eddf 6a2e 	vldr	s13, [pc, #184]	; b67c0 <__ieee754_logf+0x1fc>
   b670a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b670e:	eea7 7ac6 	vfms.f32	s14, s15, s12
   b6712:	ee37 0a40 	vsub.f32	s0, s14, s0
   b6716:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   b671a:	4770      	bx	lr
   b671c:	bb13      	cbnz	r3, b6764 <__ieee754_logf+0x1a0>
   b671e:	ee70 7a67 	vsub.f32	s15, s0, s15
   b6722:	eea7 0ac4 	vfms.f32	s0, s15, s8
   b6726:	4770      	bx	lr
   b6728:	eddf 6a24 	vldr	s13, [pc, #144]	; b67bc <__ieee754_logf+0x1f8>
   b672c:	ed9f 6a24 	vldr	s12, [pc, #144]	; b67c0 <__ieee754_logf+0x1fc>
   b6730:	ee77 7a87 	vadd.f32	s15, s15, s14
   b6734:	ee62 6aa6 	vmul.f32	s13, s5, s13
   b6738:	eee7 6a84 	vfma.f32	s13, s15, s8
   b673c:	ee37 7a66 	vsub.f32	s14, s14, s13
   b6740:	ee37 0a40 	vsub.f32	s0, s14, s0
   b6744:	ee92 0a86 	vfnms.f32	s0, s5, s12
   b6748:	4770      	bx	lr
   b674a:	ee07 3a90 	vmov	s15, r3
   b674e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; b67bc <__ieee754_logf+0x1f8>
   b6752:	ed9f 7a1b 	vldr	s14, [pc, #108]	; b67c0 <__ieee754_logf+0x1fc>
   b6756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b675a:	ee27 0a80 	vmul.f32	s0, s15, s0
   b675e:	eea7 0a87 	vfma.f32	s0, s15, s14
   b6762:	4770      	bx	lr
   b6764:	ed9f 7a15 	vldr	s14, [pc, #84]	; b67bc <__ieee754_logf+0x1f8>
   b6768:	eddf 6a15 	vldr	s13, [pc, #84]	; b67c0 <__ieee754_logf+0x1fc>
   b676c:	ee70 7a67 	vsub.f32	s15, s0, s15
   b6770:	ee27 7a62 	vnmul.f32	s14, s14, s5
   b6774:	eea7 7a84 	vfma.f32	s14, s15, s8
   b6778:	ee37 0a40 	vsub.f32	s0, s14, s0
   b677c:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   b6780:	4770      	bx	lr
   b6782:	bf00      	nop
   b6784:	004afb20 	.word	0x004afb20
   b6788:	007ffff0 	.word	0x007ffff0
   b678c:	00000000 	.word	0x00000000
   b6790:	cc000000 	.word	0xcc000000
   b6794:	4c000000 	.word	0x4c000000
   b6798:	ffcf5c30 	.word	0xffcf5c30
   b679c:	3e178897 	.word	0x3e178897
   b67a0:	3e3a3325 	.word	0x3e3a3325
   b67a4:	3e924925 	.word	0x3e924925
   b67a8:	3e1cd04f 	.word	0x3e1cd04f
   b67ac:	3e638e29 	.word	0x3e638e29
   b67b0:	3f2aaaab 	.word	0x3f2aaaab
   b67b4:	3ecccccd 	.word	0x3ecccccd
   b67b8:	3eaaaaab 	.word	0x3eaaaaab
   b67bc:	3717f7d1 	.word	0x3717f7d1
   b67c0:	3f317180 	.word	0x3f317180

000b67c4 <nanf>:
   b67c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; b67cc <nanf+0x8>
   b67c8:	4770      	bx	lr
   b67ca:	bf00      	nop
   b67cc:	7fc00000 	.word	0x7fc00000

000b67d0 <atexit>:
   b67d0:	2300      	movs	r3, #0
   b67d2:	4601      	mov	r1, r0
   b67d4:	461a      	mov	r2, r3
   b67d6:	4618      	mov	r0, r3
   b67d8:	f000 b84c 	b.w	b6874 <__register_exitproc>

000b67dc <memcpy>:
   b67dc:	440a      	add	r2, r1
   b67de:	4291      	cmp	r1, r2
   b67e0:	f100 33ff 	add.w	r3, r0, #4294967295
   b67e4:	d100      	bne.n	b67e8 <memcpy+0xc>
   b67e6:	4770      	bx	lr
   b67e8:	b510      	push	{r4, lr}
   b67ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   b67ee:	f803 4f01 	strb.w	r4, [r3, #1]!
   b67f2:	4291      	cmp	r1, r2
   b67f4:	d1f9      	bne.n	b67ea <memcpy+0xe>
   b67f6:	bd10      	pop	{r4, pc}

000b67f8 <memset>:
   b67f8:	4402      	add	r2, r0
   b67fa:	4603      	mov	r3, r0
   b67fc:	4293      	cmp	r3, r2
   b67fe:	d100      	bne.n	b6802 <memset+0xa>
   b6800:	4770      	bx	lr
   b6802:	f803 1b01 	strb.w	r1, [r3], #1
   b6806:	e7f9      	b.n	b67fc <memset+0x4>

000b6808 <srand>:
   b6808:	b538      	push	{r3, r4, r5, lr}
   b680a:	4b10      	ldr	r3, [pc, #64]	; (b684c <srand+0x44>)
   b680c:	681d      	ldr	r5, [r3, #0]
   b680e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6810:	4604      	mov	r4, r0
   b6812:	b9b3      	cbnz	r3, b6842 <srand+0x3a>
   b6814:	2018      	movs	r0, #24
   b6816:	f7fe fabf 	bl	b4d98 <malloc>
   b681a:	4602      	mov	r2, r0
   b681c:	63a8      	str	r0, [r5, #56]	; 0x38
   b681e:	b920      	cbnz	r0, b682a <srand+0x22>
   b6820:	4b0b      	ldr	r3, [pc, #44]	; (b6850 <srand+0x48>)
   b6822:	480c      	ldr	r0, [pc, #48]	; (b6854 <srand+0x4c>)
   b6824:	2142      	movs	r1, #66	; 0x42
   b6826:	f7fe fadf 	bl	b4de8 <__assert_func>
   b682a:	490b      	ldr	r1, [pc, #44]	; (b6858 <srand+0x50>)
   b682c:	4b0b      	ldr	r3, [pc, #44]	; (b685c <srand+0x54>)
   b682e:	e9c0 1300 	strd	r1, r3, [r0]
   b6832:	4b0b      	ldr	r3, [pc, #44]	; (b6860 <srand+0x58>)
   b6834:	6083      	str	r3, [r0, #8]
   b6836:	230b      	movs	r3, #11
   b6838:	8183      	strh	r3, [r0, #12]
   b683a:	2100      	movs	r1, #0
   b683c:	2001      	movs	r0, #1
   b683e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6842:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6844:	2200      	movs	r2, #0
   b6846:	611c      	str	r4, [r3, #16]
   b6848:	615a      	str	r2, [r3, #20]
   b684a:	bd38      	pop	{r3, r4, r5, pc}
   b684c:	2003e5c0 	.word	0x2003e5c0
   b6850:	000b6ddd 	.word	0x000b6ddd
   b6854:	000b6df4 	.word	0x000b6df4
   b6858:	abcd330e 	.word	0xabcd330e
   b685c:	e66d1234 	.word	0xe66d1234
   b6860:	0005deec 	.word	0x0005deec

000b6864 <strcpy>:
   b6864:	4603      	mov	r3, r0
   b6866:	f811 2b01 	ldrb.w	r2, [r1], #1
   b686a:	f803 2b01 	strb.w	r2, [r3], #1
   b686e:	2a00      	cmp	r2, #0
   b6870:	d1f9      	bne.n	b6866 <strcpy+0x2>
   b6872:	4770      	bx	lr

000b6874 <__register_exitproc>:
   b6874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6878:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6934 <__register_exitproc+0xc0>
   b687c:	4606      	mov	r6, r0
   b687e:	f8d8 0000 	ldr.w	r0, [r8]
   b6882:	461f      	mov	r7, r3
   b6884:	460d      	mov	r5, r1
   b6886:	4691      	mov	r9, r2
   b6888:	f000 f856 	bl	b6938 <__retarget_lock_acquire_recursive>
   b688c:	4b25      	ldr	r3, [pc, #148]	; (b6924 <__register_exitproc+0xb0>)
   b688e:	681c      	ldr	r4, [r3, #0]
   b6890:	b934      	cbnz	r4, b68a0 <__register_exitproc+0x2c>
   b6892:	4c25      	ldr	r4, [pc, #148]	; (b6928 <__register_exitproc+0xb4>)
   b6894:	601c      	str	r4, [r3, #0]
   b6896:	4b25      	ldr	r3, [pc, #148]	; (b692c <__register_exitproc+0xb8>)
   b6898:	b113      	cbz	r3, b68a0 <__register_exitproc+0x2c>
   b689a:	681b      	ldr	r3, [r3, #0]
   b689c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b68a0:	6863      	ldr	r3, [r4, #4]
   b68a2:	2b1f      	cmp	r3, #31
   b68a4:	dd07      	ble.n	b68b6 <__register_exitproc+0x42>
   b68a6:	f8d8 0000 	ldr.w	r0, [r8]
   b68aa:	f000 f847 	bl	b693c <__retarget_lock_release_recursive>
   b68ae:	f04f 30ff 	mov.w	r0, #4294967295
   b68b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b68b6:	b34e      	cbz	r6, b690c <__register_exitproc+0x98>
   b68b8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b68bc:	b988      	cbnz	r0, b68e2 <__register_exitproc+0x6e>
   b68be:	4b1c      	ldr	r3, [pc, #112]	; (b6930 <__register_exitproc+0xbc>)
   b68c0:	b923      	cbnz	r3, b68cc <__register_exitproc+0x58>
   b68c2:	f8d8 0000 	ldr.w	r0, [r8]
   b68c6:	f000 f838 	bl	b693a <__retarget_lock_release>
   b68ca:	e7f0      	b.n	b68ae <__register_exitproc+0x3a>
   b68cc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b68d0:	f7fe fa62 	bl	b4d98 <malloc>
   b68d4:	2800      	cmp	r0, #0
   b68d6:	d0f4      	beq.n	b68c2 <__register_exitproc+0x4e>
   b68d8:	2300      	movs	r3, #0
   b68da:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b68de:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b68e2:	6863      	ldr	r3, [r4, #4]
   b68e4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b68e8:	2201      	movs	r2, #1
   b68ea:	409a      	lsls	r2, r3
   b68ec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b68f0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b68f4:	4313      	orrs	r3, r2
   b68f6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b68fa:	2e02      	cmp	r6, #2
   b68fc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6900:	bf02      	ittt	eq
   b6902:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6906:	4313      	orreq	r3, r2
   b6908:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b690c:	6863      	ldr	r3, [r4, #4]
   b690e:	f8d8 0000 	ldr.w	r0, [r8]
   b6912:	1c5a      	adds	r2, r3, #1
   b6914:	3302      	adds	r3, #2
   b6916:	6062      	str	r2, [r4, #4]
   b6918:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b691c:	f000 f80e 	bl	b693c <__retarget_lock_release_recursive>
   b6920:	2000      	movs	r0, #0
   b6922:	e7c6      	b.n	b68b2 <__register_exitproc+0x3e>
   b6924:	2003e7e8 	.word	0x2003e7e8
   b6928:	2003e75c 	.word	0x2003e75c
   b692c:	00000000 	.word	0x00000000
   b6930:	000b4d99 	.word	0x000b4d99
   b6934:	2003e624 	.word	0x2003e624

000b6938 <__retarget_lock_acquire_recursive>:
   b6938:	4770      	bx	lr

000b693a <__retarget_lock_release>:
   b693a:	4770      	bx	lr

000b693c <__retarget_lock_release_recursive>:
   b693c:	4770      	bx	lr

000b693e <link_code_end>:
	...

000b6940 <dynalib_user>:
   b6940:	43b9 000b 43f5 000b 441d 000b 4421 000b     .C...C...D..!D..
   b6950:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b6960:	7620 7269 7574 6c61 6c00 636f 6c61 5049      virtual.localIP
   b6970:	253d 0073 7573 6e62 7465 614d 6b73 253d     =%s.subnetMask=%
   b6980:	0073 6167 6574 6177 4979 3d50 7325 0a00     s.gatewayIP=%s..
   b6990:	6554 706d 7265 7461 7275 2065 3025 6932     Temperature %02i
   b69a0:	203a 3325 312e c266 43b0 0a00 4354 2050     : %3.1f..C..TCP 
   b69b0:	6f63 6e6e 6365 6574 0064 4354 2050 7962     connected.TCP by
   b69c0:	6574 7220 6365 6965 6576 3a64 2520 0a69     te received: %i.
   b69d0:	5400 5043 6553 7672 7265 3a3a 7277 7469     .TCPServer::writ
   b69e0:	2865 2029 6166 6c69 6465 2820 7265 6f72     e() failed (erro
   b69f0:	2072 203d 6425 2c29 6e20 6d75 6562 2072     r = %d), number 
   b6a00:	666f 6220 7479 7365 7720 6972 7474 6e65     of bytes written
   b6a10:	203a 6425 000a 002e                         : %d....

000b6a18 <_ZTVN5spark13EthernetClassE>:
	...
   b6a20:	4e67 000b 4e5d 000b 4e53 000b 4e49 000b     gN..]N..SN..IN..
   b6a30:	4e3d 000b 4e31 000b 5fdd 000b 5fe5 000b     =N..1N..._..._..
   b6a40:	4e25 000b 4e1d 000b 4e13 000b 4e09 000b     %N...N...N...N..
   b6a50:	610d 000b 6015 000b 601d 000b               .a...`...`..

000b6a5c <_ZTV21StringPrintableHelper>:
	...
   b6a64:	4ebd 000b 4ebf 000b 4f77 000b 4f49 000b     .N...N..wO..IO..

000b6a74 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b6a7c:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b6a8c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b6a9c <_ZTV6Stream>:
	...
   b6aac:	443d 000b 4fc5 000b 443d 000b 443d 000b     =D...O..=D..=D..
   b6abc:	443d 000b 443d 000b                         =D..=D..

000b6ac4 <_ZTV15TCPServerClient>:
	...
   b6acc:	524d 000b 5261 000b 597d 000b 5997 000b     MR..aR..}Y...Y..
   b6adc:	5da5 000b 59c1 000b 5c1b 000b 59f5 000b     .]...Y...\...Y..
   b6aec:	5cad 000b 5aed 000b 5c49 000b 5e59 000b     .\...Z..I\..Y^..
   b6afc:	5be9 000b 59f7 000b 59a9 000b 5a39 000b     .[...Y...Y..9Z..
   b6b0c:	518b 000b                                   .Q..

000b6b10 <_ZTV9TCPServer>:
	...
   b6b18:	52e1 000b 5301 000b 512f 000b 5147 000b     .R...S../Q..GQ..
   b6b28:	5315 000b 5117 000b 5159 000b               .S...Q..YQ..

000b6b34 <_ZTV9IPAddress>:
	...
   b6b3c:	5629 000b 5619 000b 561b 000b               )V...V...V..

000b6b48 <_ZTV9USBSerial>:
	...
   b6b50:	573b 000b 57a3 000b 5779 000b 4fc5 000b     ;W...W..yW...O..
   b6b60:	576b 000b 573d 000b 574d 000b 579d 000b     kW..=W..MW...W..
   b6b70:	575d 000b 5735 000b                         ]W..5W..

000b6b78 <_ZTV11USARTSerial>:
	...
   b6b80:	5845 000b 58b1 000b 5889 000b 4fc5 000b     EX...X...X...O..
   b6b90:	5859 000b 5875 000b 5867 000b 5883 000b     YX..uX..gX...X..
   b6ba0:	5847 000b 584b 000b                         GX..KX..

000b6ba8 <_ZTV7TwoWire>:
	...
   b6bb0:	58e9 000b 5933 000b 590b 000b 58eb 000b     .X..3Y...Y...X..
   b6bc0:	5913 000b 591b 000b 5923 000b 592b 000b     .Y...Y..#Y..+Y..
   b6bd0:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b6be0:	2072 203d 6425 0000                         r = %d..

000b6be8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6bf0:	5a01 000b 5a25 000b 5f1b 000b 5a33 000b     .Z..%Z..._..3Z..
   b6c00:	5a05 000b                                   .Z..

000b6c04 <_ZTV9TCPClient>:
	...
   b6c0c:	44b5 000b 44cd 000b 597d 000b 5997 000b     .D...D..}Y...Y..
   b6c1c:	5da5 000b 59c1 000b 5c1b 000b 59f5 000b     .]...Y...\...Y..
   b6c2c:	5cad 000b 5aed 000b 5c49 000b 5e59 000b     .\...Z..I\..Y^..
   b6c3c:	5be9 000b 59f7 000b 59a9 000b 5a39 000b     .[...Y...Y..9Z..
   b6c4c:	5acd 000b                                   .Z..

000b6c50 <_ZTVN5spark9WiFiClassE>:
	...
   b6c58:	5f7f 000b 5f75 000b 5f6b 000b 5f21 000b     ._..u_..k_..!_..
   b6c68:	5f5f 000b 5f53 000b 5fdd 000b 5fe5 000b     __..S_..._..._..
   b6c78:	5f47 000b 5f3f 000b 5f35 000b 5f2b 000b     G_..?_..5_..+_..
   b6c88:	610d 000b 6015 000b 601d 000b               .a...`...`..

000b6c94 <CSWTCH.109>:
   b6c94:	e6b4 2003 e70c 2003 e714 2003               ... ... ... 

000b6ca0 <_ZTVN5spark12NetworkClassE>:
	...
   b6ca8:	5f9d 000b 5fa7 000b 5fb1 000b 5fbb 000b     ._..._..._..._..
   b6cb8:	5fc5 000b 5fd1 000b 5fdd 000b 5fe5 000b     ._..._..._..._..
   b6cc8:	5fed 000b 5ff9 000b 6001 000b 600b 000b     ._..._...`...`..
   b6cd8:	610d 000b 6015 000b 601d 000b               .a...`...`..

000b6ce4 <_ZSt7nothrow>:
	...

000b6ce5 <_ZTSSt19_Sp_make_shared_tag>:
   b6ce5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b6cf5:	6572 5f64 6174 0067 0000                     red_tag....

000b6d00 <_ZTISt19_Sp_make_shared_tag>:
   b6d00:	6d40 000b 6ce5 000b                         @m...l..

000b6d08 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b6d08:	6da0 000b 6d14 000b 6dc4 000b               .m...m...m..

000b6d14 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b6d14:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b6d24:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b6d34:	0045 0000                                   E...

000b6d38 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b6d38:	0000 0000 6d08 000b 6381 000b 6395 000b     .....m...c...c..
   b6d48:	6529 000b 6529 000b 63ff 000b 6341 000b     )e..)e...c..Ac..
   b6d58:	63e7 000b 63a9 000b 6373 000b               .c...c..sc..

000b6d64 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b6d64:	6da0 000b 6d70 000b 6d08 000b               .m..pm...m..

000b6d70 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b6d70:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b6d80:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b6d90:	666e 456f 0000 0000                         nfoE....

000b6d98 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b6d98:	0000 0000 6d64 000b 6429 000b 643d 000b     ....dm..)d..=d..
   b6da8:	6529 000b 6529 000b 63ff 000b 6341 000b     )e..)e...c..Ac..
   b6db8:	64fd 000b 6489 000b 6451 000b               .d...d..Qd..

000b6dc4 <_ZTISt9type_info>:
   b6dc4:	6d40 000b 6dcc 000b                         @m...m..

000b6dcc <_ZTSSt9type_info>:
   b6dcc:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   b6ddc:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b6dec:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b6dfc:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b6e0c:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b6e1c:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b6e2c:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b6e3c:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b6e4c:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b6e5c:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b6e6c:	646e 632e                                    nd.c.

000b6e71 <link_const_data_end>:
   b6e71:	00          	.byte	0x00
	...

000b6e74 <link_constructors_location>:
   b6e74:	000b4899 	.word	0x000b4899
   b6e78:	000b4e71 	.word	0x000b4e71
   b6e7c:	000b4e99 	.word	0x000b4e99
   b6e80:	000b4fb5 	.word	0x000b4fb5
   b6e84:	000b50ed 	.word	0x000b50ed
   b6e88:	000b50fd 	.word	0x000b50fd
   b6e8c:	000b54d5 	.word	0x000b54d5
   b6e90:	000b5f89 	.word	0x000b5f89
   b6e94:	000b6121 	.word	0x000b6121
