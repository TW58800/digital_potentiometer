
c:/Users/timwh/Projects/ntc_temperature_sensor/target/5.0.0-alpha.1/argon/ntc_temperature_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003580  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b75a0  000b75a0  000075a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000000a0  2003e580  000b75c4  0000e580  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001d0  2003e620  2003e620  0001e620  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000b7664  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b7668  000b7668  00017668  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b766e  000b766e  0001766e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b7692  000b7692  00017692  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0010b279  00000000  00000000  00017696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000121c4  00000000  00000000  0012290f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00037cb4  00000000  00000000  00134ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002dc8  00000000  00000000  0016c787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a528  00000000  00000000  0016f54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037d6d  00000000  00000000  00179a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003b42a  00000000  00000000  001b17e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001313de  00000000  00000000  001ecc0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008270  00000000  00000000  0031dfec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <strcmp>:
   b48f8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b48fc:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4900:	2a01      	cmp	r2, #1
   b4902:	bf28      	it	cs
   b4904:	429a      	cmpcs	r2, r3
   b4906:	d0f7      	beq.n	b48f8 <strcmp>
   b4908:	1ad0      	subs	r0, r2, r3
   b490a:	4770      	bx	lr

000b490c <strlen>:
   b490c:	4603      	mov	r3, r0
   b490e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4912:	2a00      	cmp	r2, #0
   b4914:	d1fb      	bne.n	b490e <strlen+0x2>
   b4916:	1a18      	subs	r0, r3, r0
   b4918:	3801      	subs	r0, #1
   b491a:	4770      	bx	lr

000b491c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b491c:	4809      	ldr	r0, [pc, #36]	; (b4944 <module_user_pre_init+0x28>)
   b491e:	490a      	ldr	r1, [pc, #40]	; (b4948 <module_user_pre_init+0x2c>)
   b4920:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4922:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4924:	d005      	beq.n	b4932 <module_user_pre_init+0x16>
   b4926:	4a09      	ldr	r2, [pc, #36]	; (b494c <module_user_pre_init+0x30>)
   b4928:	4282      	cmp	r2, r0
   b492a:	d002      	beq.n	b4932 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b492c:	1a12      	subs	r2, r2, r0
   b492e:	f002 faf1 	bl	b6f14 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4932:	4807      	ldr	r0, [pc, #28]	; (b4950 <module_user_pre_init+0x34>)
   b4934:	4a07      	ldr	r2, [pc, #28]	; (b4954 <module_user_pre_init+0x38>)
   b4936:	2100      	movs	r1, #0
   b4938:	1a12      	subs	r2, r2, r0
   b493a:	f002 faf9 	bl	b6f30 <memset>
    return &link_global_data_start;
}
   b493e:	4801      	ldr	r0, [pc, #4]	; (b4944 <module_user_pre_init+0x28>)
   b4940:	bd08      	pop	{r3, pc}
   b4942:	bf00      	nop
   b4944:	2003e580 	.word	0x2003e580
   b4948:	000b75c4 	.word	0x000b75c4
   b494c:	2003e620 	.word	0x2003e620
   b4950:	2003e620 	.word	0x2003e620
   b4954:	2003e7f0 	.word	0x2003e7f0

000b4958 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4958:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b495a:	4e07      	ldr	r6, [pc, #28]	; (b4978 <module_user_init+0x20>)
   b495c:	4c07      	ldr	r4, [pc, #28]	; (b497c <module_user_init+0x24>)
    module_user_init_hook();
   b495e:	f001 f8bf 	bl	b5ae0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4962:	1ba4      	subs	r4, r4, r6
   b4964:	08a4      	lsrs	r4, r4, #2
   b4966:	2500      	movs	r5, #0
   b4968:	42ac      	cmp	r4, r5
   b496a:	d100      	bne.n	b496e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b496c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b496e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4972:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4974:	3501      	adds	r5, #1
   b4976:	e7f7      	b.n	b4968 <module_user_init+0x10>
   b4978:	000b757c 	.word	0x000b757c
   b497c:	000b75a0 	.word	0x000b75a0

000b4980 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4980:	f000 b860 	b.w	b4a44 <setup>

000b4984 <module_user_loop>:
}

void module_user_loop() {
   b4984:	b508      	push	{r3, lr}
    loop();
   b4986:	f000 f8eb 	bl	b4b60 <loop>
    _post_loop();
}
   b498a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b498e:	f001 b85f 	b.w	b5a50 <_post_loop>

000b4992 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4992:	f000 bc9b 	b.w	b52cc <malloc>

000b4996 <_Znaj>:
   b4996:	f000 bc99 	b.w	b52cc <malloc>

000b499a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b499a:	f000 bc9f 	b.w	b52dc <free>
	...

000b49a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b49a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b49a2:	4a03      	ldr	r2, [pc, #12]	; (b49b0 <__cxa_pure_virtual+0x10>)
   b49a4:	4903      	ldr	r1, [pc, #12]	; (b49b4 <__cxa_pure_virtual+0x14>)
   b49a6:	200c      	movs	r0, #12
   b49a8:	f000 fbe4 	bl	b5174 <panic_>
  while (1);
   b49ac:	e7fe      	b.n	b49ac <__cxa_pure_virtual+0xc>
   b49ae:	bf00      	nop
   b49b0:	000b4eb5 	.word	0x000b4eb5
   b49b4:	000b709c 	.word	0x000b709c

000b49b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b49b8:	7800      	ldrb	r0, [r0, #0]
   b49ba:	fab0 f080 	clz	r0, r0
   b49be:	0940      	lsrs	r0, r0, #5
   b49c0:	4770      	bx	lr

000b49c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b49c2:	2301      	movs	r3, #1
   b49c4:	7003      	strb	r3, [r0, #0]
   b49c6:	4770      	bx	lr

000b49c8 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b49c8:	b40e      	push	{r1, r2, r3}
   b49ca:	b503      	push	{r0, r1, lr}
   b49cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b49ce:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b49d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b49d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b49d6:	f000 fdee 	bl	b55b6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b49da:	b002      	add	sp, #8
   b49dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b49e0:	b003      	add	sp, #12
   b49e2:	4770      	bx	lr

000b49e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b49e4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b49e6:	6843      	ldr	r3, [r0, #4]
   b49e8:	3b01      	subs	r3, #1
    {
   b49ea:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b49ec:	6043      	str	r3, [r0, #4]
   b49ee:	b963      	cbnz	r3, b4a0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b49f0:	6803      	ldr	r3, [r0, #0]
   b49f2:	689b      	ldr	r3, [r3, #8]
   b49f4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b49f6:	68a3      	ldr	r3, [r4, #8]
   b49f8:	3b01      	subs	r3, #1
   b49fa:	60a3      	str	r3, [r4, #8]
   b49fc:	b92b      	cbnz	r3, b4a0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b49fe:	6823      	ldr	r3, [r4, #0]
   b4a00:	4620      	mov	r0, r4
   b4a02:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4a08:	4718      	bx	r3
    }
   b4a0a:	bd10      	pop	{r4, pc}

000b4a0c <_ZN5spark9WiFiClass11wifi_configEv>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   b4a0c:	2200      	movs	r2, #0
   b4a0e:	6840      	ldr	r0, [r0, #4]
   b4a10:	4611      	mov	r1, r2
   b4a12:	f000 bbe3 	b.w	b51dc <network_config>
	...

000b4a18 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4a18:	b510      	push	{r4, lr}
   b4a1a:	4b04      	ldr	r3, [pc, #16]	; (b4a2c <_ZN9TCPClientD1Ev+0x14>)
   b4a1c:	6003      	str	r3, [r0, #0]
   b4a1e:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4a20:	6980      	ldr	r0, [r0, #24]
   b4a22:	b108      	cbz	r0, b4a28 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b4a24:	f7ff ffde 	bl	b49e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b4a28:	4620      	mov	r0, r4
   b4a2a:	bd10      	pop	{r4, pc}
   b4a2c:	000b7330 	.word	0x000b7330

000b4a30 <_ZN9TCPClientD0Ev>:
   b4a30:	b510      	push	{r4, lr}
   b4a32:	4604      	mov	r4, r0
   b4a34:	f7ff fff0 	bl	b4a18 <_ZN9TCPClientD1Ev>
   b4a38:	4620      	mov	r0, r4
   b4a3a:	211c      	movs	r1, #28
   b4a3c:	f7ff ffad 	bl	b499a <_ZdlPvj>
   b4a40:	4620      	mov	r0, r4
   b4a42:	bd10      	pop	{r4, pc}

000b4a44 <setup>:
int counter = 0;
double R1 = 10000.0;
double logR2, R2, T, Tc, Tf, Ta;
double c1 = 0.001125308852122, c2 = 0.000234711863267, c3 = 0.000000085663516;

void setup() {
   b4a44:	b530      	push	{r4, r5, lr}

	pinMode(LED, OUTPUT);   
   b4a46:	4b3f      	ldr	r3, [pc, #252]	; (b4b44 <setup+0x100>)
void setup() {
   b4a48:	b08b      	sub	sp, #44	; 0x2c
	pinMode(LED, OUTPUT);   
   b4a4a:	8818      	ldrh	r0, [r3, #0]
   b4a4c:	2101      	movs	r1, #1
   b4a4e:	f001 fe1f 	bl	b6690 <pinMode>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b4a52:	483d      	ldr	r0, [pc, #244]	; (b4b48 <setup+0x104>)
   b4a54:	2300      	movs	r3, #0
   b4a56:	4619      	mov	r1, r3
   b4a58:	461a      	mov	r2, r3
   b4a5a:	6840      	ldr	r0, [r0, #4]
   b4a5c:	f000 fbc6 	bl	b51ec <network_connect>
	WiFi.connect();
	Serial.begin(9600);
   b4a60:	f001 f960 	bl	b5d24 <_Z16_fetch_usbserialv>
   b4a64:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4a68:	f001 f94c 	bl	b5d04 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b4a6c:	2000      	movs	r0, #0
   b4a6e:	f000 fa31 	bl	b4ed4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4a72:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b4a76:	4604      	mov	r4, r0
   b4a78:	2000      	movs	r0, #0
   b4a7a:	f000 fa2b 	bl	b4ed4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4a7e:	1b00      	subs	r0, r0, r4
   b4a80:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4a84:	42a8      	cmp	r0, r5
   b4a86:	f171 0300 	sbcs.w	r3, r1, #0
   b4a8a:	d207      	bcs.n	b4a9c <setup+0x58>
	waitFor(Serial.isConnected, 15000);
   b4a8c:	f001 f94a 	bl	b5d24 <_Z16_fetch_usbserialv>
   b4a90:	f001 f93c 	bl	b5d0c <_ZN9USBSerial11isConnectedEv>
   b4a94:	b910      	cbnz	r0, b4a9c <setup+0x58>
            spark_process();
   b4a96:	f000 fc09 	bl	b52ac <spark_process>
        while (_while() && !_condition()) {
   b4a9a:	e7ed      	b.n	b4a78 <setup+0x34>
   b4a9c:	f001 f942 	bl	b5d24 <_Z16_fetch_usbserialv>
   b4aa0:	f001 f934 	bl	b5d0c <_ZN9USBSerial11isConnectedEv>
  Serial.println("connected");
   b4aa4:	f001 f93e 	bl	b5d24 <_Z16_fetch_usbserialv>
   b4aa8:	4928      	ldr	r1, [pc, #160]	; (b4b4c <setup+0x108>)
   b4aaa:	f000 fd5c 	bl	b5566 <_ZN5Print7printlnEPKc>
  Serial.printlnf("localIP=%s", WiFi.localIP().toString().c_str());
   b4aae:	f001 f939 	bl	b5d24 <_Z16_fetch_usbserialv>
   b4ab2:	4604      	mov	r4, r0
        return IPAddress(wifi_config()->nw.aucIP);
   b4ab4:	4824      	ldr	r0, [pc, #144]	; (b4b48 <setup+0x104>)
   b4ab6:	f7ff ffa9 	bl	b4a0c <_ZN5spark9WiFiClass11wifi_configEv>
   b4aba:	1c81      	adds	r1, r0, #2
   b4abc:	a804      	add	r0, sp, #16
   b4abe:	f001 f889 	bl	b5bd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   b4ac2:	a904      	add	r1, sp, #16
   b4ac4:	4668      	mov	r0, sp
   b4ac6:	f000 fcf5 	bl	b54b4 <_ZN6StringC1ERK9Printable>
   b4aca:	9a00      	ldr	r2, [sp, #0]
   b4acc:	4920      	ldr	r1, [pc, #128]	; (b4b50 <setup+0x10c>)
   b4ace:	4620      	mov	r0, r4
   b4ad0:	f7ff ff7a 	bl	b49c8 <_ZN5Print8printlnfEPKcz>
   b4ad4:	4668      	mov	r0, sp
   b4ad6:	f000 fc93 	bl	b5400 <_ZN6StringD1Ev>
  Serial.printlnf("subnetMask=%s", WiFi.subnetMask().toString().c_str());
   b4ada:	f001 f923 	bl	b5d24 <_Z16_fetch_usbserialv>
   b4ade:	4604      	mov	r4, r0
        return IPAddress(wifi_config()->nw.aucSubnetMask);
   b4ae0:	4819      	ldr	r0, [pc, #100]	; (b4b48 <setup+0x104>)
   b4ae2:	f7ff ff93 	bl	b4a0c <_ZN5spark9WiFiClass11wifi_configEv>
   b4ae6:	f100 0113 	add.w	r1, r0, #19
   b4aea:	a804      	add	r0, sp, #16
   b4aec:	f001 f872 	bl	b5bd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4af0:	a904      	add	r1, sp, #16
   b4af2:	4668      	mov	r0, sp
   b4af4:	f000 fcde 	bl	b54b4 <_ZN6StringC1ERK9Printable>
   b4af8:	9a00      	ldr	r2, [sp, #0]
   b4afa:	4916      	ldr	r1, [pc, #88]	; (b4b54 <setup+0x110>)
   b4afc:	4620      	mov	r0, r4
   b4afe:	f7ff ff63 	bl	b49c8 <_ZN5Print8printlnfEPKcz>
   b4b02:	4668      	mov	r0, sp
   b4b04:	f000 fc7c 	bl	b5400 <_ZN6StringD1Ev>
  Serial.printlnf("gatewayIP=%s", WiFi.gatewayIP().toString().c_str());
   b4b08:	f001 f90c 	bl	b5d24 <_Z16_fetch_usbserialv>
   b4b0c:	4604      	mov	r4, r0
        return IPAddress(wifi_config()->nw.aucDefaultGateway);
   b4b0e:	480e      	ldr	r0, [pc, #56]	; (b4b48 <setup+0x104>)
   b4b10:	f7ff ff7c 	bl	b4a0c <_ZN5spark9WiFiClass11wifi_configEv>
   b4b14:	f100 0124 	add.w	r1, r0, #36	; 0x24
   b4b18:	a804      	add	r0, sp, #16
   b4b1a:	f001 f85b 	bl	b5bd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4b1e:	a904      	add	r1, sp, #16
   b4b20:	4668      	mov	r0, sp
   b4b22:	f000 fcc7 	bl	b54b4 <_ZN6StringC1ERK9Printable>
   b4b26:	9a00      	ldr	r2, [sp, #0]
   b4b28:	490b      	ldr	r1, [pc, #44]	; (b4b58 <setup+0x114>)
   b4b2a:	4620      	mov	r0, r4
   b4b2c:	f7ff ff4c 	bl	b49c8 <_ZN5Print8printlnfEPKcz>
   b4b30:	4668      	mov	r0, sp
   b4b32:	f000 fc65 	bl	b5400 <_ZN6StringD1Ev>
  server.begin();
   b4b36:	4809      	ldr	r0, [pc, #36]	; (b4b5c <setup+0x118>)
}
   b4b38:	b00b      	add	sp, #44	; 0x2c
   b4b3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  server.begin();
   b4b3e:	f000 be7f 	b.w	b5840 <_ZN9TCPServer5beginEv>
   b4b42:	bf00      	nop
   b4b44:	2003e580 	.word	0x2003e580
   b4b48:	2003e70c 	.word	0x2003e70c
   b4b4c:	000b70b1 	.word	0x000b70b1
   b4b50:	000b70bb 	.word	0x000b70bb
   b4b54:	000b70c6 	.word	0x000b70c6
   b4b58:	000b70d4 	.word	0x000b70d4
   b4b5c:	2003e680 	.word	0x2003e680

000b4b60 <loop>:


uint8_t buf[256];

void loop() {
   b4b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  Vo = analogRead(ThermistorPin);  
   b4b64:	4b88      	ldr	r3, [pc, #544]	; (b4d88 <loop+0x228>)
void loop() {
   b4b66:	b08d      	sub	sp, #52	; 0x34
  Vo = analogRead(ThermistorPin);  
   b4b68:	8818      	ldrh	r0, [r3, #0]
   b4b6a:	f001 fdbb 	bl	b66e4 <analogRead>
   b4b6e:	4b87      	ldr	r3, [pc, #540]	; (b4d8c <loop+0x22c>)
   b4b70:	6018      	str	r0, [r3, #0]
  R2 = R1 * (4095.0 / (double)Vo - 1.0);
   b4b72:	f7ff fba7 	bl	b42c4 <__aeabi_i2d>
   b4b76:	4602      	mov	r2, r0
   b4b78:	460b      	mov	r3, r1
   b4b7a:	a17f      	add	r1, pc, #508	; (adr r1, b4d78 <loop+0x218>)
   b4b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4b80:	f7ff fd34 	bl	b45ec <__aeabi_ddiv>
   b4b84:	4b82      	ldr	r3, [pc, #520]	; (b4d90 <loop+0x230>)
   b4b86:	2200      	movs	r2, #0
   b4b88:	f7ff fa4e 	bl	b4028 <__aeabi_dsub>
   b4b8c:	4b81      	ldr	r3, [pc, #516]	; (b4d94 <loop+0x234>)
   b4b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4b92:	f7ff fc01 	bl	b4398 <__aeabi_dmul>
   b4b96:	4b80      	ldr	r3, [pc, #512]	; (b4d98 <loop+0x238>)
   b4b98:	ec41 0b10 	vmov	d0, r0, r1
   b4b9c:	e9c3 0100 	strd	r0, r1, [r3]
  //Serial.println(R2);
  logR2 = log(R2);
   b4ba0:	f001 ff46 	bl	b6a30 <log>
   b4ba4:	4b7d      	ldr	r3, [pc, #500]	; (b4d9c <loop+0x23c>)
   b4ba6:	ed83 0b00 	vstr	d0, [r3]
   b4baa:	ec55 4b10 	vmov	r4, r5, d0
  T = (1.0 / (c1 + (c2*logR2) + (c3*logR2*logR2*logR2)));
   b4bae:	4b7c      	ldr	r3, [pc, #496]	; (b4da0 <loop+0x240>)
   b4bb0:	ee10 0a10 	vmov	r0, s0
   b4bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4bb8:	4629      	mov	r1, r5
   b4bba:	f7ff fbed 	bl	b4398 <__aeabi_dmul>
   b4bbe:	4b79      	ldr	r3, [pc, #484]	; (b4da4 <loop+0x244>)
   b4bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4bc4:	f7ff fa32 	bl	b402c <__adddf3>
   b4bc8:	4b77      	ldr	r3, [pc, #476]	; (b4da8 <loop+0x248>)
   b4bca:	4606      	mov	r6, r0
   b4bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4bd0:	460f      	mov	r7, r1
   b4bd2:	4620      	mov	r0, r4
   b4bd4:	4629      	mov	r1, r5
   b4bd6:	f7ff fbdf 	bl	b4398 <__aeabi_dmul>
   b4bda:	4622      	mov	r2, r4
   b4bdc:	462b      	mov	r3, r5
   b4bde:	f7ff fbdb 	bl	b4398 <__aeabi_dmul>
   b4be2:	4622      	mov	r2, r4
   b4be4:	462b      	mov	r3, r5
   b4be6:	f7ff fbd7 	bl	b4398 <__aeabi_dmul>
   b4bea:	4602      	mov	r2, r0
   b4bec:	460b      	mov	r3, r1
   b4bee:	4630      	mov	r0, r6
   b4bf0:	4639      	mov	r1, r7
   b4bf2:	f7ff fa1b 	bl	b402c <__adddf3>
   b4bf6:	4602      	mov	r2, r0
   b4bf8:	460b      	mov	r3, r1
   b4bfa:	2000      	movs	r0, #0
   b4bfc:	4964      	ldr	r1, [pc, #400]	; (b4d90 <loop+0x230>)
  Tc = T - 273.15;
  Ta = Ta + Tc; 
  if (counter >= 100) {
   b4bfe:	4e6b      	ldr	r6, [pc, #428]	; (b4dac <loop+0x24c>)
  T = (1.0 / (c1 + (c2*logR2) + (c3*logR2*logR2*logR2)));
   b4c00:	f7ff fcf4 	bl	b45ec <__aeabi_ddiv>
   b4c04:	4b6a      	ldr	r3, [pc, #424]	; (b4db0 <loop+0x250>)
   b4c06:	4604      	mov	r4, r0
   b4c08:	460d      	mov	r5, r1
   b4c0a:	e9c3 4500 	strd	r4, r5, [r3]
  Tc = T - 273.15;
   b4c0e:	a35c      	add	r3, pc, #368	; (adr r3, b4d80 <loop+0x220>)
   b4c10:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c14:	f7ff fa08 	bl	b4028 <__aeabi_dsub>
   b4c18:	4b66      	ldr	r3, [pc, #408]	; (b4db4 <loop+0x254>)
   b4c1a:	460d      	mov	r5, r1
   b4c1c:	4604      	mov	r4, r0
   b4c1e:	e9c3 4500 	strd	r4, r5, [r3]
  Ta = Ta + Tc; 
   b4c22:	4d65      	ldr	r5, [pc, #404]	; (b4db8 <loop+0x258>)
   b4c24:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4c28:	f7ff fa00 	bl	b402c <__adddf3>
   b4c2c:	4680      	mov	r8, r0
  if (counter >= 100) {
   b4c2e:	6830      	ldr	r0, [r6, #0]
  Ta = Ta + Tc; 
   b4c30:	4689      	mov	r9, r1
  if (counter >= 100) {
   b4c32:	2863      	cmp	r0, #99	; 0x63
  Ta = Ta + Tc; 
   b4c34:	e9c5 8900 	strd	r8, r9, [r5]
  if (counter >= 100) {
   b4c38:	dd74      	ble.n	b4d24 <loop+0x1c4>
    Ta = Ta / counter;
   b4c3a:	f7ff fb43 	bl	b42c4 <__aeabi_i2d>
   b4c3e:	4602      	mov	r2, r0
   b4c40:	460b      	mov	r3, r1
   b4c42:	4640      	mov	r0, r8
   b4c44:	4649      	mov	r1, r9
   b4c46:	f7ff fcd1 	bl	b45ec <__aeabi_ddiv>
   b4c4a:	e9c5 0100 	strd	r0, r1, [r5]
    Serial.printlnf("Temperature: %4.1f°C\n", Ta); 
   b4c4e:	f001 f869 	bl	b5d24 <_Z16_fetch_usbserialv>
   b4c52:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4c56:	4959      	ldr	r1, [pc, #356]	; (b4dbc <loop+0x25c>)
   b4c58:	f7ff feb6 	bl	b49c8 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf("localIP=%s\n", WiFi.localIP().toString().c_str());
   b4c5c:	f001 f862 	bl	b5d24 <_Z16_fetch_usbserialv>
   b4c60:	4604      	mov	r4, r0
        return IPAddress(wifi_config()->nw.aucIP);
   b4c62:	4857      	ldr	r0, [pc, #348]	; (b4dc0 <loop+0x260>)
   b4c64:	f7ff fed2 	bl	b4a0c <_ZN5spark9WiFiClass11wifi_configEv>
   b4c68:	1c81      	adds	r1, r0, #2
   b4c6a:	a805      	add	r0, sp, #20
   b4c6c:	f000 ffb2 	bl	b5bd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4c70:	a905      	add	r1, sp, #20
   b4c72:	a801      	add	r0, sp, #4
   b4c74:	f000 fc1e 	bl	b54b4 <_ZN6StringC1ERK9Printable>
   b4c78:	9a01      	ldr	r2, [sp, #4]
   b4c7a:	4952      	ldr	r1, [pc, #328]	; (b4dc4 <loop+0x264>)
   b4c7c:	4620      	mov	r0, r4
    Ta = 0;
    counter = 0;
  	digitalWrite(LED, HIGH); 
   b4c7e:	4c52      	ldr	r4, [pc, #328]	; (b4dc8 <loop+0x268>)
    Serial.printlnf("localIP=%s\n", WiFi.localIP().toString().c_str());
   b4c80:	f7ff fea2 	bl	b49c8 <_ZN5Print8printlnfEPKcz>
   b4c84:	a801      	add	r0, sp, #4
   b4c86:	f000 fbbb 	bl	b5400 <_ZN6StringD1Ev>
    counter = 0;
   b4c8a:	2700      	movs	r7, #0
    Ta = 0;
   b4c8c:	2200      	movs	r2, #0
   b4c8e:	2300      	movs	r3, #0
  	digitalWrite(LED, HIGH); 
   b4c90:	8820      	ldrh	r0, [r4, #0]
    counter = 0;
   b4c92:	6037      	str	r7, [r6, #0]
  	digitalWrite(LED, HIGH); 
   b4c94:	2101      	movs	r1, #1
    Ta = 0;
   b4c96:	e9c5 2300 	strd	r2, r3, [r5]
  	digitalWrite(LED, HIGH); 
   b4c9a:	f001 fd0a 	bl	b66b2 <digitalWrite>
  	delay(200);              
   b4c9e:	20c8      	movs	r0, #200	; 0xc8
   b4ca0:	f000 fccc 	bl	b563c <delay>
  	digitalWrite(LED, LOW);  
   b4ca4:	8820      	ldrh	r0, [r4, #0]
  	if (client.status()) { 
   b4ca6:	4c49      	ldr	r4, [pc, #292]	; (b4dcc <loop+0x26c>)
  	digitalWrite(LED, LOW);  
   b4ca8:	4639      	mov	r1, r7
   b4caa:	f001 fd02 	bl	b66b2 <digitalWrite>
  	if (client.status()) { 
   b4cae:	4620      	mov	r0, r4
   b4cb0:	f001 fb73 	bl	b639a <_ZN9TCPClient6statusEv>
   b4cb4:	2800      	cmp	r0, #0
   b4cb6:	d03e      	beq.n	b4d36 <loop+0x1d6>
    	byte payload = client.read(); 
   b4cb8:	4620      	mov	r0, r4
   b4cba:	f001 f90b 	bl	b5ed4 <_ZN9TCPClient4readEv>
   b4cbe:	4604      	mov	r4, r0
    	Serial.printlnf("TCP bytes received: %i\n", payload);
   b4cc0:	f001 f830 	bl	b5d24 <_Z16_fetch_usbserialv>
   b4cc4:	b2e2      	uxtb	r2, r4
   b4cc6:	4942      	ldr	r1, [pc, #264]	; (b4dd0 <loop+0x270>)
   b4cc8:	f7ff fe7e 	bl	b49c8 <_ZN5Print8printlnfEPKcz>
		byte* ta = reinterpret_cast<byte*>(&Ta);
		uint8_t data[14] = {0,0,0,0,0,0,0,0,0,0};
   b4ccc:	4a41      	ldr	r2, [pc, #260]	; (b4dd4 <loop+0x274>)
   b4cce:	6810      	ldr	r0, [r2, #0]
   b4cd0:	6851      	ldr	r1, [r2, #4]
   b4cd2:	ab05      	add	r3, sp, #20
   b4cd4:	c303      	stmia	r3!, {r0, r1}
   b4cd6:	8911      	ldrh	r1, [r2, #8]
   b4cd8:	7a92      	ldrb	r2, [r2, #10]
   b4cda:	8019      	strh	r1, [r3, #0]
   b4cdc:	709a      	strb	r2, [r3, #2]
		data[0] = ta[0];
   b4cde:	782b      	ldrb	r3, [r5, #0]
   b4ce0:	f88d 3014 	strb.w	r3, [sp, #20]
		data[1] = ta[1];
   b4ce4:	786b      	ldrb	r3, [r5, #1]
   b4ce6:	f88d 3015 	strb.w	r3, [sp, #21]
		data[2] = ta[2];
   b4cea:	78ab      	ldrb	r3, [r5, #2]
   b4cec:	f88d 3016 	strb.w	r3, [sp, #22]
		data[3] = ta[3];
   b4cf0:	78eb      	ldrb	r3, [r5, #3]
   b4cf2:	f88d 3017 	strb.w	r3, [sp, #23]
		//data[9] = rssi[0];
		//data[10] = buf[0];
		//data[11] = buf[1];
		//data[12] = buf[2];
		//data[13] = buf[3];
		int err = server.write(data, 14, 5000);
   b4cf6:	4838      	ldr	r0, [pc, #224]	; (b4dd8 <loop+0x278>)
		uint8_t data[14] = {0,0,0,0,0,0,0,0,0,0};
   b4cf8:	f8ad 701f 	strh.w	r7, [sp, #31]
		int err = server.write(data, 14, 5000);
   b4cfc:	f241 3388 	movw	r3, #5000	; 0x1388
   b4d00:	220e      	movs	r2, #14
   b4d02:	a905      	add	r1, sp, #20
		uint8_t data[14] = {0,0,0,0,0,0,0,0,0,0};
   b4d04:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
		int err = server.write(data, 14, 5000);
   b4d08:	f000 fcbc 	bl	b5684 <_ZN9TCPServer5writeEPKhjm>
		if (err != 0) {
   b4d0c:	4604      	mov	r4, r0
   b4d0e:	b128      	cbz	r0, b4d1c <loop+0x1bc>
  			Serial.printlnf("TCPServer::write() failed (error = %d)", err); // number of bytes written: %d", err, bytes);
   b4d10:	f001 f808 	bl	b5d24 <_Z16_fetch_usbserialv>
   b4d14:	4931      	ldr	r1, [pc, #196]	; (b4ddc <loop+0x27c>)
   b4d16:	4622      	mov	r2, r4
   b4d18:	f7ff fe56 	bl	b49c8 <_ZN5Print8printlnfEPKcz>
		}
      	delay(800);              
   b4d1c:	f44f 7048 	mov.w	r0, #800	; 0x320
   b4d20:	f000 fc8c 	bl	b563c <delay>
	else {
		// if no client is yet connected, check for a new connection
		client = server.available();
	}
  }   
  counter++;
   b4d24:	6833      	ldr	r3, [r6, #0]
  delay(10);
   b4d26:	200a      	movs	r0, #10
  counter++;
   b4d28:	3301      	adds	r3, #1
   b4d2a:	6033      	str	r3, [r6, #0]
   b4d2c:	b00d      	add	sp, #52	; 0x34
   b4d2e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  delay(10);
   b4d32:	f000 bc83 	b.w	b563c <delay>
		client = server.available();
   b4d36:	4928      	ldr	r1, [pc, #160]	; (b4dd8 <loop+0x278>)
   b4d38:	a805      	add	r0, sp, #20
   b4d3a:	f000 fe03 	bl	b5944 <_ZN9TCPServer9availableEv>
class Print
   b4d3e:	9b06      	ldr	r3, [sp, #24]
   b4d40:	6063      	str	r3, [r4, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   b4d42:	9b07      	ldr	r3, [sp, #28]
   b4d44:	60a3      	str	r3, [r4, #8]
   b4d46:	9b08      	ldr	r3, [sp, #32]
   b4d48:	60e3      	str	r3, [r4, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b4d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4d4c:	6123      	str	r3, [r4, #16]
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4d50:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   b4d52:	6163      	str	r3, [r4, #20]
	if (__tmp != _M_pi)
   b4d54:	69a3      	ldr	r3, [r4, #24]
   b4d56:	429d      	cmp	r5, r3
   b4d58:	d008      	beq.n	b4d6c <loop+0x20c>
	    if (__tmp != 0)
   b4d5a:	b115      	cbz	r5, b4d62 <loop+0x202>
    { ++_M_use_count; }
   b4d5c:	686b      	ldr	r3, [r5, #4]
   b4d5e:	3301      	adds	r3, #1
   b4d60:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b4d62:	69a0      	ldr	r0, [r4, #24]
   b4d64:	b108      	cbz	r0, b4d6a <loop+0x20a>
	      _M_pi->_M_release();
   b4d66:	f7ff fe3d 	bl	b49e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b4d6a:	61a5      	str	r5, [r4, #24]
   b4d6c:	a805      	add	r0, sp, #20
   b4d6e:	f7ff fe53 	bl	b4a18 <_ZN9TCPClientD1Ev>
   b4d72:	e7d7      	b.n	b4d24 <loop+0x1c4>
   b4d74:	f3af 8000 	nop.w
   b4d78:	00000000 	.word	0x00000000
   b4d7c:	40affe00 	.word	0x40affe00
   b4d80:	66666666 	.word	0x66666666
   b4d84:	40711266 	.word	0x40711266
   b4d88:	2003e590 	.word	0x2003e590
   b4d8c:	2003e650 	.word	0x2003e650
   b4d90:	3ff00000 	.word	0x3ff00000
   b4d94:	2003e588 	.word	0x2003e588
   b4d98:	2003e620 	.word	0x2003e620
   b4d9c:	2003e678 	.word	0x2003e678
   b4da0:	2003e5a0 	.word	0x2003e5a0
   b4da4:	2003e598 	.word	0x2003e598
   b4da8:	2003e5a8 	.word	0x2003e5a8
   b4dac:	2003e670 	.word	0x2003e670
   b4db0:	2003e638 	.word	0x2003e638
   b4db4:	2003e648 	.word	0x2003e648
   b4db8:	2003e640 	.word	0x2003e640
   b4dbc:	000b70e1 	.word	0x000b70e1
   b4dc0:	2003e70c 	.word	0x2003e70c
   b4dc4:	000b70f8 	.word	0x000b70f8
   b4dc8:	2003e580 	.word	0x2003e580
   b4dcc:	2003e654 	.word	0x2003e654
   b4dd0:	000b7104 	.word	0x000b7104
   b4dd4:	000b7078 	.word	0x000b7078
   b4dd8:	2003e680 	.word	0x2003e680
   b4ddc:	000b711c 	.word	0x000b711c

000b4de0 <_GLOBAL__sub_I_SystemMode>:
              error_(SYSTEM_ERROR_NONE) {
   b4de0:	4b0b      	ldr	r3, [pc, #44]	; (b4e10 <_GLOBAL__sub_I_SystemMode+0x30>)
    SleepResult() {}
   b4de2:	4a0c      	ldr	r2, [pc, #48]	; (b4e14 <_GLOBAL__sub_I_SystemMode+0x34>)
   b4de4:	b510      	push	{r4, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4de6:	2400      	movs	r4, #0
   b4de8:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b4dec:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b4dee:	2001      	movs	r0, #1
   b4df0:	f000 f9d0 	bl	b5194 <set_system_mode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4df4:	f000 f866 	bl	b4ec4 <HAL_Timer_Get_Milli_Seconds>
uint32_t timer = millis();
   b4df8:	4b07      	ldr	r3, [pc, #28]	; (b4e18 <_GLOBAL__sub_I_SystemMode+0x38>)
TCPServer server = TCPServer(23);
   b4dfa:	4622      	mov	r2, r4
uint32_t timer = millis();
   b4dfc:	6018      	str	r0, [r3, #0]
TCPServer server = TCPServer(23);
   b4dfe:	2117      	movs	r1, #23
   b4e00:	4806      	ldr	r0, [pc, #24]	; (b4e1c <_GLOBAL__sub_I_SystemMode+0x3c>)
   b4e02:	f000 fccd 	bl	b57a0 <_ZN9TCPServerC1Etm>
   b4e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
TCPClient client;
   b4e0a:	4805      	ldr	r0, [pc, #20]	; (b4e20 <_GLOBAL__sub_I_SystemMode+0x40>)
   b4e0c:	f001 bafe 	b.w	b640c <_ZN9TCPClientC1Ev>
   b4e10:	2003e628 	.word	0x2003e628
   b4e14:	ffff0000 	.word	0xffff0000
   b4e18:	2003e6b0 	.word	0x2003e6b0
   b4e1c:	2003e680 	.word	0x2003e680
   b4e20:	2003e654 	.word	0x2003e654

000b4e24 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4e24:	b508      	push	{r3, lr}
   b4e26:	4b02      	ldr	r3, [pc, #8]	; (b4e30 <netdb_freeaddrinfo+0xc>)
   b4e28:	681b      	ldr	r3, [r3, #0]
   b4e2a:	689b      	ldr	r3, [r3, #8]
   b4e2c:	9301      	str	r3, [sp, #4]
   b4e2e:	bd08      	pop	{r3, pc}
   b4e30:	00030268 	.word	0x00030268

000b4e34 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4e34:	b508      	push	{r3, lr}
   b4e36:	4b02      	ldr	r3, [pc, #8]	; (b4e40 <netdb_getaddrinfo+0xc>)
   b4e38:	681b      	ldr	r3, [r3, #0]
   b4e3a:	68db      	ldr	r3, [r3, #12]
   b4e3c:	9301      	str	r3, [sp, #4]
   b4e3e:	bd08      	pop	{r3, pc}
   b4e40:	00030268 	.word	0x00030268

000b4e44 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b4e44:	b508      	push	{r3, lr}
   b4e46:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <hal_pin_validate_function+0xc>)
   b4e48:	681b      	ldr	r3, [r3, #0]
   b4e4a:	685b      	ldr	r3, [r3, #4]
   b4e4c:	9301      	str	r3, [sp, #4]
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	0003022c 	.word	0x0003022c

000b4e54 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b4e54:	b508      	push	{r3, lr}
   b4e56:	4b02      	ldr	r3, [pc, #8]	; (b4e60 <hal_gpio_mode+0xc>)
   b4e58:	681b      	ldr	r3, [r3, #0]
   b4e5a:	689b      	ldr	r3, [r3, #8]
   b4e5c:	9301      	str	r3, [sp, #4]
   b4e5e:	bd08      	pop	{r3, pc}
   b4e60:	0003022c 	.word	0x0003022c

000b4e64 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b4e64:	b508      	push	{r3, lr}
   b4e66:	4b02      	ldr	r3, [pc, #8]	; (b4e70 <hal_gpio_get_mode+0xc>)
   b4e68:	681b      	ldr	r3, [r3, #0]
   b4e6a:	68db      	ldr	r3, [r3, #12]
   b4e6c:	9301      	str	r3, [sp, #4]
   b4e6e:	bd08      	pop	{r3, pc}
   b4e70:	0003022c 	.word	0x0003022c

000b4e74 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b4e74:	b508      	push	{r3, lr}
   b4e76:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <hal_gpio_write+0xc>)
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	691b      	ldr	r3, [r3, #16]
   b4e7c:	9301      	str	r3, [sp, #4]
   b4e7e:	bd08      	pop	{r3, pc}
   b4e80:	0003022c 	.word	0x0003022c

000b4e84 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4e84:	b508      	push	{r3, lr}
   b4e86:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <hal_adc_read+0xc>)
   b4e88:	681b      	ldr	r3, [r3, #0]
   b4e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e8c:	9301      	str	r3, [sp, #4]
   b4e8e:	bd08      	pop	{r3, pc}
   b4e90:	0003022c 	.word	0x0003022c

000b4e94 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <if_index_to_name+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	695b      	ldr	r3, [r3, #20]
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	0003026c 	.word	0x0003026c

000b4ea4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4ea4:	b508      	push	{r3, lr}
   b4ea6:	4b02      	ldr	r3, [pc, #8]	; (b4eb0 <HAL_RNG_GetRandomNumber+0xc>)
   b4ea8:	681b      	ldr	r3, [r3, #0]
   b4eaa:	685b      	ldr	r3, [r3, #4]
   b4eac:	9301      	str	r3, [sp, #4]
   b4eae:	bd08      	pop	{r3, pc}
   b4eb0:	00030218 	.word	0x00030218

000b4eb4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4eb4:	b508      	push	{r3, lr}
   b4eb6:	4b02      	ldr	r3, [pc, #8]	; (b4ec0 <HAL_Delay_Microseconds+0xc>)
   b4eb8:	681b      	ldr	r3, [r3, #0]
   b4eba:	68db      	ldr	r3, [r3, #12]
   b4ebc:	9301      	str	r3, [sp, #4]
   b4ebe:	bd08      	pop	{r3, pc}
   b4ec0:	00030218 	.word	0x00030218

000b4ec4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	695b      	ldr	r3, [r3, #20]
   b4ecc:	9301      	str	r3, [sp, #4]
   b4ece:	bd08      	pop	{r3, pc}
   b4ed0:	00030218 	.word	0x00030218

000b4ed4 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4ed4:	b508      	push	{r3, lr}
   b4ed6:	4b02      	ldr	r3, [pc, #8]	; (b4ee0 <hal_timer_millis+0xc>)
   b4ed8:	681b      	ldr	r3, [r3, #0]
   b4eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4edc:	9301      	str	r3, [sp, #4]
   b4ede:	bd08      	pop	{r3, pc}
   b4ee0:	00030218 	.word	0x00030218

000b4ee4 <os_thread_scheduling>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b4ee4:	b508      	push	{r3, lr}
   b4ee6:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <os_thread_scheduling+0xc>)
   b4ee8:	681b      	ldr	r3, [r3, #0]
   b4eea:	69db      	ldr	r3, [r3, #28]
   b4eec:	9301      	str	r3, [sp, #4]
   b4eee:	bd08      	pop	{r3, pc}
   b4ef0:	00030248 	.word	0x00030248

000b4ef4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4ef4:	b508      	push	{r3, lr}
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <os_mutex_recursive_create+0xc>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4efc:	9301      	str	r3, [sp, #4]
   b4efe:	bd08      	pop	{r3, pc}
   b4f00:	00030248 	.word	0x00030248

000b4f04 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b02      	ldr	r3, [pc, #8]	; (b4f10 <inet_inet_ntop+0xc>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	695b      	ldr	r3, [r3, #20]
   b4f0c:	9301      	str	r3, [sp, #4]
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	00030264 	.word	0x00030264

000b4f14 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b02      	ldr	r3, [pc, #8]	; (b4f20 <inet_htonl+0xc>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	6a1b      	ldr	r3, [r3, #32]
   b4f1c:	9301      	str	r3, [sp, #4]
   b4f1e:	bd08      	pop	{r3, pc}
   b4f20:	00030264 	.word	0x00030264

000b4f24 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <inet_htons+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	00030264 	.word	0x00030264

000b4f34 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b02      	ldr	r3, [pc, #8]	; (b4f40 <hal_usart_write+0xc>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	68db      	ldr	r3, [r3, #12]
   b4f3c:	9301      	str	r3, [sp, #4]
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	0003023c 	.word	0x0003023c

000b4f44 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <hal_usart_available+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	691b      	ldr	r3, [r3, #16]
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	0003023c 	.word	0x0003023c

000b4f54 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <hal_usart_read+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	695b      	ldr	r3, [r3, #20]
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	0003023c 	.word	0x0003023c

000b4f64 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <hal_usart_peek+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	699b      	ldr	r3, [r3, #24]
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	0003023c 	.word	0x0003023c

000b4f74 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <hal_usart_flush+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	69db      	ldr	r3, [r3, #28]
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	0003023c 	.word	0x0003023c

000b4f84 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <hal_usart_is_enabled+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	6a1b      	ldr	r3, [r3, #32]
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	0003023c 	.word	0x0003023c

000b4f94 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <hal_usart_available_data_for_write+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	0003023c 	.word	0x0003023c

000b4fa4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <hal_usart_init_ex+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	0003023c 	.word	0x0003023c

000b4fb4 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4fb4:	b508      	push	{r3, lr}
   b4fb6:	4b02      	ldr	r3, [pc, #8]	; (b4fc0 <hal_i2c_write+0xc>)
   b4fb8:	681b      	ldr	r3, [r3, #0]
   b4fba:	6a1b      	ldr	r3, [r3, #32]
   b4fbc:	9301      	str	r3, [sp, #4]
   b4fbe:	bd08      	pop	{r3, pc}
   b4fc0:	00030228 	.word	0x00030228

000b4fc4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4fc4:	b508      	push	{r3, lr}
   b4fc6:	4b02      	ldr	r3, [pc, #8]	; (b4fd0 <hal_i2c_available+0xc>)
   b4fc8:	681b      	ldr	r3, [r3, #0]
   b4fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4fcc:	9301      	str	r3, [sp, #4]
   b4fce:	bd08      	pop	{r3, pc}
   b4fd0:	00030228 	.word	0x00030228

000b4fd4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4fd4:	b508      	push	{r3, lr}
   b4fd6:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <hal_i2c_read+0xc>)
   b4fd8:	681b      	ldr	r3, [r3, #0]
   b4fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4fdc:	9301      	str	r3, [sp, #4]
   b4fde:	bd08      	pop	{r3, pc}
   b4fe0:	00030228 	.word	0x00030228

000b4fe4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b02      	ldr	r3, [pc, #8]	; (b4ff0 <hal_i2c_peek+0xc>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4fec:	9301      	str	r3, [sp, #4]
   b4fee:	bd08      	pop	{r3, pc}
   b4ff0:	00030228 	.word	0x00030228

000b4ff4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4ff4:	b508      	push	{r3, lr}
   b4ff6:	4b02      	ldr	r3, [pc, #8]	; (b5000 <hal_i2c_flush+0xc>)
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ffc:	9301      	str	r3, [sp, #4]
   b4ffe:	bd08      	pop	{r3, pc}
   b5000:	00030228 	.word	0x00030228

000b5004 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5004:	b508      	push	{r3, lr}
   b5006:	4b02      	ldr	r3, [pc, #8]	; (b5010 <hal_i2c_is_enabled+0xc>)
   b5008:	681b      	ldr	r3, [r3, #0]
   b500a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b500c:	9301      	str	r3, [sp, #4]
   b500e:	bd08      	pop	{r3, pc}
   b5010:	00030228 	.word	0x00030228

000b5014 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5014:	b508      	push	{r3, lr}
   b5016:	4b02      	ldr	r3, [pc, #8]	; (b5020 <hal_i2c_init+0xc>)
   b5018:	681b      	ldr	r3, [r3, #0]
   b501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b501c:	9301      	str	r3, [sp, #4]
   b501e:	bd08      	pop	{r3, pc}
   b5020:	00030228 	.word	0x00030228

000b5024 <sock_accept>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
   b5024:	b508      	push	{r3, lr}
   b5026:	4b02      	ldr	r3, [pc, #8]	; (b5030 <sock_accept+0xc>)
   b5028:	681b      	ldr	r3, [r3, #0]
   b502a:	681b      	ldr	r3, [r3, #0]
   b502c:	9301      	str	r3, [sp, #4]
   b502e:	bd08      	pop	{r3, pc}
   b5030:	00030238 	.word	0x00030238

000b5034 <sock_bind>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b5034:	b508      	push	{r3, lr}
   b5036:	4b02      	ldr	r3, [pc, #8]	; (b5040 <sock_bind+0xc>)
   b5038:	681b      	ldr	r3, [r3, #0]
   b503a:	685b      	ldr	r3, [r3, #4]
   b503c:	9301      	str	r3, [sp, #4]
   b503e:	bd08      	pop	{r3, pc}
   b5040:	00030238 	.word	0x00030238

000b5044 <sock_getpeername>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
   b5044:	b508      	push	{r3, lr}
   b5046:	4b02      	ldr	r3, [pc, #8]	; (b5050 <sock_getpeername+0xc>)
   b5048:	681b      	ldr	r3, [r3, #0]
   b504a:	68db      	ldr	r3, [r3, #12]
   b504c:	9301      	str	r3, [sp, #4]
   b504e:	bd08      	pop	{r3, pc}
   b5050:	00030238 	.word	0x00030238

000b5054 <sock_setsockopt>:
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5054:	b508      	push	{r3, lr}
   b5056:	4b02      	ldr	r3, [pc, #8]	; (b5060 <sock_setsockopt+0xc>)
   b5058:	681b      	ldr	r3, [r3, #0]
   b505a:	699b      	ldr	r3, [r3, #24]
   b505c:	9301      	str	r3, [sp, #4]
   b505e:	bd08      	pop	{r3, pc}
   b5060:	00030238 	.word	0x00030238

000b5064 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5064:	b508      	push	{r3, lr}
   b5066:	4b02      	ldr	r3, [pc, #8]	; (b5070 <sock_close+0xc>)
   b5068:	681b      	ldr	r3, [r3, #0]
   b506a:	69db      	ldr	r3, [r3, #28]
   b506c:	9301      	str	r3, [sp, #4]
   b506e:	bd08      	pop	{r3, pc}
   b5070:	00030238 	.word	0x00030238

000b5074 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5074:	b508      	push	{r3, lr}
   b5076:	4b02      	ldr	r3, [pc, #8]	; (b5080 <sock_connect+0xc>)
   b5078:	681b      	ldr	r3, [r3, #0]
   b507a:	6a1b      	ldr	r3, [r3, #32]
   b507c:	9301      	str	r3, [sp, #4]
   b507e:	bd08      	pop	{r3, pc}
   b5080:	00030238 	.word	0x00030238

000b5084 <sock_listen>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
   b5084:	b508      	push	{r3, lr}
   b5086:	4b02      	ldr	r3, [pc, #8]	; (b5090 <sock_listen+0xc>)
   b5088:	681b      	ldr	r3, [r3, #0]
   b508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b508c:	9301      	str	r3, [sp, #4]
   b508e:	bd08      	pop	{r3, pc}
   b5090:	00030238 	.word	0x00030238

000b5094 <sock_recv>:
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5094:	b508      	push	{r3, lr}
   b5096:	4b02      	ldr	r3, [pc, #8]	; (b50a0 <sock_recv+0xc>)
   b5098:	681b      	ldr	r3, [r3, #0]
   b509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b509c:	9301      	str	r3, [sp, #4]
   b509e:	bd08      	pop	{r3, pc}
   b50a0:	00030238 	.word	0x00030238

000b50a4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b50a4:	b508      	push	{r3, lr}
   b50a6:	4b02      	ldr	r3, [pc, #8]	; (b50b0 <sock_send+0xc>)
   b50a8:	681b      	ldr	r3, [r3, #0]
   b50aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b50ac:	9301      	str	r3, [sp, #4]
   b50ae:	bd08      	pop	{r3, pc}
   b50b0:	00030238 	.word	0x00030238

000b50b4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b50b4:	b508      	push	{r3, lr}
   b50b6:	4b02      	ldr	r3, [pc, #8]	; (b50c0 <sock_socket+0xc>)
   b50b8:	681b      	ldr	r3, [r3, #0]
   b50ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b50bc:	9301      	str	r3, [sp, #4]
   b50be:	bd08      	pop	{r3, pc}
   b50c0:	00030238 	.word	0x00030238

000b50c4 <sock_fcntl>:
DYNALIB_FN(15, hal_socket, sock_fcntl, int(int, int, ...))
   b50c4:	b508      	push	{r3, lr}
   b50c6:	4b02      	ldr	r3, [pc, #8]	; (b50d0 <sock_fcntl+0xc>)
   b50c8:	681b      	ldr	r3, [r3, #0]
   b50ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b50cc:	9301      	str	r3, [sp, #4]
   b50ce:	bd08      	pop	{r3, pc}
   b50d0:	00030238 	.word	0x00030238

000b50d4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b50d4:	b508      	push	{r3, lr}
   b50d6:	4b02      	ldr	r3, [pc, #8]	; (b50e0 <hal_spi_init+0xc>)
   b50d8:	681b      	ldr	r3, [r3, #0]
   b50da:	69db      	ldr	r3, [r3, #28]
   b50dc:	9301      	str	r3, [sp, #4]
   b50de:	bd08      	pop	{r3, pc}
   b50e0:	00030230 	.word	0x00030230

000b50e4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b50e4:	b508      	push	{r3, lr}
   b50e6:	4b02      	ldr	r3, [pc, #8]	; (b50f0 <hal_spi_is_enabled+0xc>)
   b50e8:	681b      	ldr	r3, [r3, #0]
   b50ea:	6a1b      	ldr	r3, [r3, #32]
   b50ec:	9301      	str	r3, [sp, #4]
   b50ee:	bd08      	pop	{r3, pc}
   b50f0:	00030230 	.word	0x00030230

000b50f4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b50f4:	b508      	push	{r3, lr}
   b50f6:	4b02      	ldr	r3, [pc, #8]	; (b5100 <HAL_USB_USART_Init+0xc>)
   b50f8:	681b      	ldr	r3, [r3, #0]
   b50fa:	681b      	ldr	r3, [r3, #0]
   b50fc:	9301      	str	r3, [sp, #4]
   b50fe:	bd08      	pop	{r3, pc}
   b5100:	0003024c 	.word	0x0003024c

000b5104 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5104:	b508      	push	{r3, lr}
   b5106:	4b02      	ldr	r3, [pc, #8]	; (b5110 <HAL_USB_USART_Begin+0xc>)
   b5108:	681b      	ldr	r3, [r3, #0]
   b510a:	685b      	ldr	r3, [r3, #4]
   b510c:	9301      	str	r3, [sp, #4]
   b510e:	bd08      	pop	{r3, pc}
   b5110:	0003024c 	.word	0x0003024c

000b5114 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5114:	b508      	push	{r3, lr}
   b5116:	4b02      	ldr	r3, [pc, #8]	; (b5120 <HAL_USB_USART_Available_Data+0xc>)
   b5118:	681b      	ldr	r3, [r3, #0]
   b511a:	691b      	ldr	r3, [r3, #16]
   b511c:	9301      	str	r3, [sp, #4]
   b511e:	bd08      	pop	{r3, pc}
   b5120:	0003024c 	.word	0x0003024c

000b5124 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5124:	b508      	push	{r3, lr}
   b5126:	4b02      	ldr	r3, [pc, #8]	; (b5130 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5128:	681b      	ldr	r3, [r3, #0]
   b512a:	695b      	ldr	r3, [r3, #20]
   b512c:	9301      	str	r3, [sp, #4]
   b512e:	bd08      	pop	{r3, pc}
   b5130:	0003024c 	.word	0x0003024c

000b5134 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5134:	b508      	push	{r3, lr}
   b5136:	4b02      	ldr	r3, [pc, #8]	; (b5140 <HAL_USB_USART_Receive_Data+0xc>)
   b5138:	681b      	ldr	r3, [r3, #0]
   b513a:	699b      	ldr	r3, [r3, #24]
   b513c:	9301      	str	r3, [sp, #4]
   b513e:	bd08      	pop	{r3, pc}
   b5140:	0003024c 	.word	0x0003024c

000b5144 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5144:	b508      	push	{r3, lr}
   b5146:	4b02      	ldr	r3, [pc, #8]	; (b5150 <HAL_USB_USART_Send_Data+0xc>)
   b5148:	681b      	ldr	r3, [r3, #0]
   b514a:	69db      	ldr	r3, [r3, #28]
   b514c:	9301      	str	r3, [sp, #4]
   b514e:	bd08      	pop	{r3, pc}
   b5150:	0003024c 	.word	0x0003024c

000b5154 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5154:	b508      	push	{r3, lr}
   b5156:	4b02      	ldr	r3, [pc, #8]	; (b5160 <HAL_USB_USART_Flush_Data+0xc>)
   b5158:	681b      	ldr	r3, [r3, #0]
   b515a:	6a1b      	ldr	r3, [r3, #32]
   b515c:	9301      	str	r3, [sp, #4]
   b515e:	bd08      	pop	{r3, pc}
   b5160:	0003024c 	.word	0x0003024c

000b5164 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b5164:	b508      	push	{r3, lr}
   b5166:	4b02      	ldr	r3, [pc, #8]	; (b5170 <HAL_USB_USART_Is_Connected+0xc>)
   b5168:	681b      	ldr	r3, [r3, #0]
   b516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b516c:	9301      	str	r3, [sp, #4]
   b516e:	bd08      	pop	{r3, pc}
   b5170:	0003024c 	.word	0x0003024c

000b5174 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5174:	b508      	push	{r3, lr}
   b5176:	4b02      	ldr	r3, [pc, #8]	; (b5180 <panic_+0xc>)
   b5178:	681b      	ldr	r3, [r3, #0]
   b517a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b517c:	9301      	str	r3, [sp, #4]
   b517e:	bd08      	pop	{r3, pc}
   b5180:	00030260 	.word	0x00030260

000b5184 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5184:	b508      	push	{r3, lr}
   b5186:	4b02      	ldr	r3, [pc, #8]	; (b5190 <log_message+0xc>)
   b5188:	681b      	ldr	r3, [r3, #0]
   b518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b518c:	9301      	str	r3, [sp, #4]
   b518e:	bd08      	pop	{r3, pc}
   b5190:	00030260 	.word	0x00030260

000b5194 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5194:	b508      	push	{r3, lr}
   b5196:	4b02      	ldr	r3, [pc, #8]	; (b51a0 <set_system_mode+0xc>)
   b5198:	681b      	ldr	r3, [r3, #0]
   b519a:	685b      	ldr	r3, [r3, #4]
   b519c:	9301      	str	r3, [sp, #4]
   b519e:	bd08      	pop	{r3, pc}
   b51a0:	00030220 	.word	0x00030220

000b51a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b51a4:	b508      	push	{r3, lr}
   b51a6:	4b02      	ldr	r3, [pc, #8]	; (b51b0 <system_delay_ms+0xc>)
   b51a8:	681b      	ldr	r3, [r3, #0]
   b51aa:	695b      	ldr	r3, [r3, #20]
   b51ac:	9301      	str	r3, [sp, #4]
   b51ae:	bd08      	pop	{r3, pc}
   b51b0:	00030220 	.word	0x00030220

000b51b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b51b4:	b508      	push	{r3, lr}
   b51b6:	4b03      	ldr	r3, [pc, #12]	; (b51c4 <system_ctrl_set_app_request_handler+0x10>)
   b51b8:	681b      	ldr	r3, [r3, #0]
   b51ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b51be:	9301      	str	r3, [sp, #4]
   b51c0:	bd08      	pop	{r3, pc}
   b51c2:	0000      	.short	0x0000
   b51c4:	00030220 	.word	0x00030220

000b51c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b51c8:	b508      	push	{r3, lr}
   b51ca:	4b03      	ldr	r3, [pc, #12]	; (b51d8 <system_ctrl_set_result+0x10>)
   b51cc:	681b      	ldr	r3, [r3, #0]
   b51ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b51d2:	9301      	str	r3, [sp, #4]
   b51d4:	bd08      	pop	{r3, pc}
   b51d6:	0000      	.short	0x0000
   b51d8:	00030220 	.word	0x00030220

000b51dc <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   b51dc:	b508      	push	{r3, lr}
   b51de:	4b02      	ldr	r3, [pc, #8]	; (b51e8 <network_config+0xc>)
   b51e0:	681b      	ldr	r3, [r3, #0]
   b51e2:	681b      	ldr	r3, [r3, #0]
   b51e4:	9301      	str	r3, [sp, #4]
   b51e6:	bd08      	pop	{r3, pc}
   b51e8:	00030240 	.word	0x00030240

000b51ec <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b51ec:	b508      	push	{r3, lr}
   b51ee:	4b02      	ldr	r3, [pc, #8]	; (b51f8 <network_connect+0xc>)
   b51f0:	681b      	ldr	r3, [r3, #0]
   b51f2:	685b      	ldr	r3, [r3, #4]
   b51f4:	9301      	str	r3, [sp, #4]
   b51f6:	bd08      	pop	{r3, pc}
   b51f8:	00030240 	.word	0x00030240

000b51fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b51fc:	b508      	push	{r3, lr}
   b51fe:	4b02      	ldr	r3, [pc, #8]	; (b5208 <network_connecting+0xc>)
   b5200:	681b      	ldr	r3, [r3, #0]
   b5202:	689b      	ldr	r3, [r3, #8]
   b5204:	9301      	str	r3, [sp, #4]
   b5206:	bd08      	pop	{r3, pc}
   b5208:	00030240 	.word	0x00030240

000b520c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b520c:	b508      	push	{r3, lr}
   b520e:	4b02      	ldr	r3, [pc, #8]	; (b5218 <network_disconnect+0xc>)
   b5210:	681b      	ldr	r3, [r3, #0]
   b5212:	68db      	ldr	r3, [r3, #12]
   b5214:	9301      	str	r3, [sp, #4]
   b5216:	bd08      	pop	{r3, pc}
   b5218:	00030240 	.word	0x00030240

000b521c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b521c:	b508      	push	{r3, lr}
   b521e:	4b02      	ldr	r3, [pc, #8]	; (b5228 <network_ready+0xc>)
   b5220:	681b      	ldr	r3, [r3, #0]
   b5222:	691b      	ldr	r3, [r3, #16]
   b5224:	9301      	str	r3, [sp, #4]
   b5226:	bd08      	pop	{r3, pc}
   b5228:	00030240 	.word	0x00030240

000b522c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b522c:	b508      	push	{r3, lr}
   b522e:	4b02      	ldr	r3, [pc, #8]	; (b5238 <network_on+0xc>)
   b5230:	681b      	ldr	r3, [r3, #0]
   b5232:	695b      	ldr	r3, [r3, #20]
   b5234:	9301      	str	r3, [sp, #4]
   b5236:	bd08      	pop	{r3, pc}
   b5238:	00030240 	.word	0x00030240

000b523c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b523c:	b508      	push	{r3, lr}
   b523e:	4b02      	ldr	r3, [pc, #8]	; (b5248 <network_off+0xc>)
   b5240:	681b      	ldr	r3, [r3, #0]
   b5242:	699b      	ldr	r3, [r3, #24]
   b5244:	9301      	str	r3, [sp, #4]
   b5246:	bd08      	pop	{r3, pc}
   b5248:	00030240 	.word	0x00030240

000b524c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b524c:	b508      	push	{r3, lr}
   b524e:	4b02      	ldr	r3, [pc, #8]	; (b5258 <network_listen+0xc>)
   b5250:	681b      	ldr	r3, [r3, #0]
   b5252:	69db      	ldr	r3, [r3, #28]
   b5254:	9301      	str	r3, [sp, #4]
   b5256:	bd08      	pop	{r3, pc}
   b5258:	00030240 	.word	0x00030240

000b525c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b525c:	b508      	push	{r3, lr}
   b525e:	4b02      	ldr	r3, [pc, #8]	; (b5268 <network_listening+0xc>)
   b5260:	681b      	ldr	r3, [r3, #0]
   b5262:	6a1b      	ldr	r3, [r3, #32]
   b5264:	9301      	str	r3, [sp, #4]
   b5266:	bd08      	pop	{r3, pc}
   b5268:	00030240 	.word	0x00030240

000b526c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b526c:	b508      	push	{r3, lr}
   b526e:	4b02      	ldr	r3, [pc, #8]	; (b5278 <network_set_listen_timeout+0xc>)
   b5270:	681b      	ldr	r3, [r3, #0]
   b5272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5274:	9301      	str	r3, [sp, #4]
   b5276:	bd08      	pop	{r3, pc}
   b5278:	00030240 	.word	0x00030240

000b527c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b527c:	b508      	push	{r3, lr}
   b527e:	4b02      	ldr	r3, [pc, #8]	; (b5288 <network_get_listen_timeout+0xc>)
   b5280:	681b      	ldr	r3, [r3, #0]
   b5282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5284:	9301      	str	r3, [sp, #4]
   b5286:	bd08      	pop	{r3, pc}
   b5288:	00030240 	.word	0x00030240

000b528c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b528c:	b508      	push	{r3, lr}
   b528e:	4b02      	ldr	r3, [pc, #8]	; (b5298 <network_is_on+0xc>)
   b5290:	681b      	ldr	r3, [r3, #0]
   b5292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5294:	9301      	str	r3, [sp, #4]
   b5296:	bd08      	pop	{r3, pc}
   b5298:	00030240 	.word	0x00030240

000b529c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b529c:	b508      	push	{r3, lr}
   b529e:	4b02      	ldr	r3, [pc, #8]	; (b52a8 <network_is_off+0xc>)
   b52a0:	681b      	ldr	r3, [r3, #0]
   b52a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b52a4:	9301      	str	r3, [sp, #4]
   b52a6:	bd08      	pop	{r3, pc}
   b52a8:	00030240 	.word	0x00030240

000b52ac <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b52ac:	b508      	push	{r3, lr}
   b52ae:	4b02      	ldr	r3, [pc, #8]	; (b52b8 <spark_process+0xc>)
   b52b0:	681b      	ldr	r3, [r3, #0]
   b52b2:	689b      	ldr	r3, [r3, #8]
   b52b4:	9301      	str	r3, [sp, #4]
   b52b6:	bd08      	pop	{r3, pc}
   b52b8:	00030244 	.word	0x00030244

000b52bc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b52bc:	b508      	push	{r3, lr}
   b52be:	4b02      	ldr	r3, [pc, #8]	; (b52c8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b52c0:	681b      	ldr	r3, [r3, #0]
   b52c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b52c4:	9301      	str	r3, [sp, #4]
   b52c6:	bd08      	pop	{r3, pc}
   b52c8:	00030244 	.word	0x00030244

000b52cc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b52cc:	b508      	push	{r3, lr}
   b52ce:	4b02      	ldr	r3, [pc, #8]	; (b52d8 <malloc+0xc>)
   b52d0:	681b      	ldr	r3, [r3, #0]
   b52d2:	681b      	ldr	r3, [r3, #0]
   b52d4:	9301      	str	r3, [sp, #4]
   b52d6:	bd08      	pop	{r3, pc}
   b52d8:	0003021c 	.word	0x0003021c

000b52dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b52dc:	b508      	push	{r3, lr}
   b52de:	4b02      	ldr	r3, [pc, #8]	; (b52e8 <free+0xc>)
   b52e0:	681b      	ldr	r3, [r3, #0]
   b52e2:	685b      	ldr	r3, [r3, #4]
   b52e4:	9301      	str	r3, [sp, #4]
   b52e6:	bd08      	pop	{r3, pc}
   b52e8:	0003021c 	.word	0x0003021c

000b52ec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b52ec:	b508      	push	{r3, lr}
   b52ee:	4b02      	ldr	r3, [pc, #8]	; (b52f8 <realloc+0xc>)
   b52f0:	681b      	ldr	r3, [r3, #0]
   b52f2:	689b      	ldr	r3, [r3, #8]
   b52f4:	9301      	str	r3, [sp, #4]
   b52f6:	bd08      	pop	{r3, pc}
   b52f8:	0003021c 	.word	0x0003021c

000b52fc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b52fc:	b508      	push	{r3, lr}
   b52fe:	4b02      	ldr	r3, [pc, #8]	; (b5308 <vsnprintf+0xc>)
   b5300:	681b      	ldr	r3, [r3, #0]
   b5302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5304:	9301      	str	r3, [sp, #4]
   b5306:	bd08      	pop	{r3, pc}
   b5308:	0003021c 	.word	0x0003021c

000b530c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b530c:	b508      	push	{r3, lr}
   b530e:	4b02      	ldr	r3, [pc, #8]	; (b5318 <__errno+0xc>)
   b5310:	681b      	ldr	r3, [r3, #0]
   b5312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5314:	9301      	str	r3, [sp, #4]
   b5316:	bd08      	pop	{r3, pc}
   b5318:	0003021c 	.word	0x0003021c

000b531c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b531c:	b508      	push	{r3, lr}
   b531e:	4b02      	ldr	r3, [pc, #8]	; (b5328 <__assert_func+0xc>)
   b5320:	681b      	ldr	r3, [r3, #0]
   b5322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5324:	9301      	str	r3, [sp, #4]
   b5326:	bd08      	pop	{r3, pc}
   b5328:	0003021c 	.word	0x0003021c

000b532c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b532c:	b508      	push	{r3, lr}
   b532e:	4b02      	ldr	r3, [pc, #8]	; (b5338 <newlib_impure_ptr_callback+0xc>)
   b5330:	681b      	ldr	r3, [r3, #0]
   b5332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5334:	9301      	str	r3, [sp, #4]
   b5336:	bd08      	pop	{r3, pc}
   b5338:	0003021c 	.word	0x0003021c

000b533c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b533c:	2200      	movs	r2, #0
   b533e:	6840      	ldr	r0, [r0, #4]
   b5340:	4611      	mov	r1, r2
   b5342:	f7ff bf8b 	b.w	b525c <network_listening>

000b5346 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5346:	2200      	movs	r2, #0
   b5348:	6840      	ldr	r0, [r0, #4]
   b534a:	4611      	mov	r1, r2
   b534c:	f7ff bf96 	b.w	b527c <network_get_listen_timeout>

000b5350 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5350:	6840      	ldr	r0, [r0, #4]
   b5352:	2200      	movs	r2, #0
   b5354:	f7ff bf8a 	b.w	b526c <network_set_listen_timeout>

000b5358 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5358:	6840      	ldr	r0, [r0, #4]
   b535a:	2200      	movs	r2, #0
   b535c:	f081 0101 	eor.w	r1, r1, #1
   b5360:	f7ff bf74 	b.w	b524c <network_listen>

000b5364 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5364:	2300      	movs	r3, #0
   b5366:	6840      	ldr	r0, [r0, #4]
   b5368:	461a      	mov	r2, r3
   b536a:	4619      	mov	r1, r3
   b536c:	f7ff bf66 	b.w	b523c <network_off>

000b5370 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5370:	2300      	movs	r3, #0
   b5372:	6840      	ldr	r0, [r0, #4]
   b5374:	461a      	mov	r2, r3
   b5376:	4619      	mov	r1, r3
   b5378:	f7ff bf58 	b.w	b522c <network_on>

000b537c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b537c:	2200      	movs	r2, #0
   b537e:	6840      	ldr	r0, [r0, #4]
   b5380:	4611      	mov	r1, r2
   b5382:	f7ff bf4b 	b.w	b521c <network_ready>

000b5386 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5386:	2200      	movs	r2, #0
   b5388:	6840      	ldr	r0, [r0, #4]
   b538a:	4611      	mov	r1, r2
   b538c:	f7ff bf36 	b.w	b51fc <network_connecting>

000b5390 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5390:	6840      	ldr	r0, [r0, #4]
   b5392:	2200      	movs	r2, #0
   b5394:	2102      	movs	r1, #2
   b5396:	f7ff bf39 	b.w	b520c <network_disconnect>

000b539a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b539a:	2300      	movs	r3, #0
   b539c:	6840      	ldr	r0, [r0, #4]
   b539e:	461a      	mov	r2, r3
   b53a0:	f7ff bf24 	b.w	b51ec <network_connect>

000b53a4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b53a4:	4b02      	ldr	r3, [pc, #8]	; (b53b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b53a6:	2203      	movs	r2, #3
   b53a8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b53aa:	4a02      	ldr	r2, [pc, #8]	; (b53b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b53ac:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b53ae:	4770      	bx	lr
   b53b0:	2003e6b4 	.word	0x2003e6b4
   b53b4:	000b714c 	.word	0x000b714c

000b53b8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b53b8:	b510      	push	{r4, lr}
   b53ba:	4604      	mov	r4, r0
   b53bc:	4608      	mov	r0, r1
{
    _spi = spi;
   b53be:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b53c0:	f7ff fe88 	bl	b50d4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b53c4:	2300      	movs	r3, #0
   b53c6:	6063      	str	r3, [r4, #4]
}
   b53c8:	4620      	mov	r0, r4
   b53ca:	bd10      	pop	{r4, pc}

000b53cc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b53cc:	4b05      	ldr	r3, [pc, #20]	; (b53e4 <_GLOBAL__sub_I_System+0x18>)
   b53ce:	2202      	movs	r2, #2
   b53d0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b53d2:	4b05      	ldr	r3, [pc, #20]	; (b53e8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b53d4:	4a05      	ldr	r2, [pc, #20]	; (b53ec <_GLOBAL__sub_I_System+0x20>)
   b53d6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b53d8:	2000      	movs	r0, #0
   b53da:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b53de:	f7ff bed9 	b.w	b5194 <set_system_mode>
   b53e2:	bf00      	nop
   b53e4:	2003e6c8 	.word	0x2003e6c8
   b53e8:	2003e6bc 	.word	0x2003e6bc
   b53ec:	ffff0000 	.word	0xffff0000

000b53f0 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   b53f0:	4770      	bx	lr

000b53f2 <_ZN21StringPrintableHelperD0Ev>:
   b53f2:	b510      	push	{r4, lr}
   b53f4:	210c      	movs	r1, #12
   b53f6:	4604      	mov	r4, r0
   b53f8:	f7ff facf 	bl	b499a <_ZdlPvj>
   b53fc:	4620      	mov	r0, r4
   b53fe:	bd10      	pop	{r4, pc}

000b5400 <_ZN6StringD1Ev>:
String::~String()
   b5400:	b510      	push	{r4, lr}
   b5402:	4604      	mov	r4, r0
	free(buffer);
   b5404:	6800      	ldr	r0, [r0, #0]
   b5406:	f7ff ff69 	bl	b52dc <free>
}
   b540a:	4620      	mov	r0, r4
   b540c:	bd10      	pop	{r4, pc}

000b540e <_ZN6String12changeBufferEj>:
{
   b540e:	b538      	push	{r3, r4, r5, lr}
   b5410:	4604      	mov	r4, r0
   b5412:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5414:	6800      	ldr	r0, [r0, #0]
   b5416:	3101      	adds	r1, #1
   b5418:	f7ff ff68 	bl	b52ec <realloc>
	if (newbuffer) {
   b541c:	b110      	cbz	r0, b5424 <_ZN6String12changeBufferEj+0x16>
		capacity = maxStrLen;
   b541e:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5422:	2001      	movs	r0, #1
}
   b5424:	bd38      	pop	{r3, r4, r5, pc}

000b5426 <_ZN6String7reserveEj>:
{
   b5426:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5428:	6803      	ldr	r3, [r0, #0]
{
   b542a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b542c:	b123      	cbz	r3, b5438 <_ZN6String7reserveEj+0x12>
   b542e:	6843      	ldr	r3, [r0, #4]
   b5430:	428b      	cmp	r3, r1
   b5432:	d301      	bcc.n	b5438 <_ZN6String7reserveEj+0x12>
   b5434:	2001      	movs	r0, #1
}
   b5436:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5438:	4620      	mov	r0, r4
   b543a:	f7ff ffe8 	bl	b540e <_ZN6String12changeBufferEj>
   b543e:	2800      	cmp	r0, #0
   b5440:	d0f9      	beq.n	b5436 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5442:	68a3      	ldr	r3, [r4, #8]
   b5444:	2b00      	cmp	r3, #0
   b5446:	d1f5      	bne.n	b5434 <_ZN6String7reserveEj+0xe>
   b5448:	6822      	ldr	r2, [r4, #0]
   b544a:	7013      	strb	r3, [r2, #0]
   b544c:	e7f2      	b.n	b5434 <_ZN6String7reserveEj+0xe>

000b544e <_ZN6String6concatEPKcj>:
{
   b544e:	b570      	push	{r4, r5, r6, lr}
   b5450:	4605      	mov	r5, r0
	if (!cstr) return 0;
   b5452:	460e      	mov	r6, r1
   b5454:	b909      	cbnz	r1, b545a <_ZN6String6concatEPKcj+0xc>
   b5456:	2000      	movs	r0, #0
}
   b5458:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b545a:	b16a      	cbz	r2, b5478 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b545c:	6884      	ldr	r4, [r0, #8]
   b545e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5460:	4621      	mov	r1, r4
   b5462:	f7ff ffe0 	bl	b5426 <_ZN6String7reserveEj>
   b5466:	2800      	cmp	r0, #0
   b5468:	d0f5      	beq.n	b5456 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b546a:	6828      	ldr	r0, [r5, #0]
   b546c:	68ab      	ldr	r3, [r5, #8]
   b546e:	4631      	mov	r1, r6
   b5470:	4418      	add	r0, r3
   b5472:	f001 fd93 	bl	b6f9c <strcpy>
	len = newlen;
   b5476:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b5478:	2001      	movs	r0, #1
   b547a:	e7ed      	b.n	b5458 <_ZN6String6concatEPKcj+0xa>

000b547c <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   b547c:	b538      	push	{r3, r4, r5, lr}
   b547e:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   b5480:	6880      	ldr	r0, [r0, #8]
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b5482:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   b5484:	f7ff ffe3 	bl	b544e <_ZN6String6concatEPKcj>
   b5488:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   b548a:	6898      	ldr	r0, [r3, #8]
    }
   b548c:	1b40      	subs	r0, r0, r5
   b548e:	bd38      	pop	{r3, r4, r5, pc}

000b5490 <_ZN6String6concatEc>:
{
   b5490:	b507      	push	{r0, r1, r2, lr}
	buf[1] = 0;
   b5492:	2300      	movs	r3, #0
	buf[0] = c;
   b5494:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b5498:	2201      	movs	r2, #1
   b549a:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b549c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b54a0:	f7ff ffd5 	bl	b544e <_ZN6String6concatEPKcj>
}
   b54a4:	b003      	add	sp, #12
   b54a6:	f85d fb04 	ldr.w	pc, [sp], #4

000b54aa <_ZN21StringPrintableHelper5writeEh>:

    virtual size_t write(uint8_t c) override
   b54aa:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   b54ac:	6880      	ldr	r0, [r0, #8]
   b54ae:	f7ff ffef 	bl	b5490 <_ZN6String6concatEc>
    }
   b54b2:	bd08      	pop	{r3, pc}

000b54b4 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   b54b4:	b530      	push	{r4, r5, lr}
   b54b6:	b085      	sub	sp, #20
	buffer = NULL;
   b54b8:	2300      	movs	r3, #0
String::String(const Printable& printable)
   b54ba:	460d      	mov	r5, r1
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b54bc:	9302      	str	r3, [sp, #8]
	capacity = 0;
   b54be:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b54c2:	6083      	str	r3, [r0, #8]
	flags = 0;
   b54c4:	7303      	strb	r3, [r0, #12]
        s.reserve(20);
   b54c6:	2114      	movs	r1, #20
    StringPrintableHelper(String& s_) : s(s_) {
   b54c8:	4b06      	ldr	r3, [pc, #24]	; (b54e4 <_ZN6StringC1ERK9Printable+0x30>)
   b54ca:	9301      	str	r3, [sp, #4]
String::String(const Printable& printable)
   b54cc:	4604      	mov	r4, r0
    StringPrintableHelper(String& s_) : s(s_) {
   b54ce:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   b54d0:	f7ff ffa9 	bl	b5426 <_ZN6String7reserveEj>
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   b54d4:	682b      	ldr	r3, [r5, #0]
   b54d6:	a901      	add	r1, sp, #4
   b54d8:	681b      	ldr	r3, [r3, #0]
   b54da:	4628      	mov	r0, r5
   b54dc:	4798      	blx	r3
}
   b54de:	4620      	mov	r0, r4
   b54e0:	b005      	add	sp, #20
   b54e2:	bd30      	pop	{r4, r5, pc}
   b54e4:	000b7188 	.word	0x000b7188

000b54e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b54e8:	4802      	ldr	r0, [pc, #8]	; (b54f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b54ea:	2300      	movs	r3, #0
   b54ec:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b54ee:	f7ff bd01 	b.w	b4ef4 <os_mutex_recursive_create>
   b54f2:	bf00      	nop
   b54f4:	2003e6cc 	.word	0x2003e6cc

000b54f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b54f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54fa:	4606      	mov	r6, r0
   b54fc:	460d      	mov	r5, r1
  size_t n = 0;
   b54fe:	188f      	adds	r7, r1, r2
   b5500:	2400      	movs	r4, #0
  while (size--) {
   b5502:	42bd      	cmp	r5, r7
   b5504:	d00c      	beq.n	b5520 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5506:	6833      	ldr	r3, [r6, #0]
   b5508:	f815 1b01 	ldrb.w	r1, [r5], #1
   b550c:	689b      	ldr	r3, [r3, #8]
   b550e:	4630      	mov	r0, r6
   b5510:	4798      	blx	r3
     if (chunk>=0)
   b5512:	1e03      	subs	r3, r0, #0
   b5514:	db01      	blt.n	b551a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5516:	441c      	add	r4, r3
  while (size--) {
   b5518:	e7f3      	b.n	b5502 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b551a:	2c00      	cmp	r4, #0
   b551c:	bf08      	it	eq
   b551e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5520:	4620      	mov	r0, r4
   b5522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5524 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5524:	b513      	push	{r0, r1, r4, lr}
   b5526:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5528:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b552a:	b159      	cbz	r1, b5544 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b552c:	9101      	str	r1, [sp, #4]
   b552e:	f7ff f9ed 	bl	b490c <strlen>
   b5532:	6823      	ldr	r3, [r4, #0]
   b5534:	9901      	ldr	r1, [sp, #4]
   b5536:	68db      	ldr	r3, [r3, #12]
   b5538:	4602      	mov	r2, r0
   b553a:	4620      	mov	r0, r4
    }
   b553c:	b002      	add	sp, #8
   b553e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5542:	4718      	bx	r3
    }
   b5544:	b002      	add	sp, #8
   b5546:	bd10      	pop	{r4, pc}

000b5548 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5548:	6803      	ldr	r3, [r0, #0]
   b554a:	689b      	ldr	r3, [r3, #8]
   b554c:	4718      	bx	r3

000b554e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b554e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5550:	210d      	movs	r1, #13
{
   b5552:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5554:	f7ff fff8 	bl	b5548 <_ZN5Print5printEc>
  n += print('\n');
   b5558:	210a      	movs	r1, #10
  size_t n = print('\r');
   b555a:	4604      	mov	r4, r0
  n += print('\n');
   b555c:	4628      	mov	r0, r5
   b555e:	f7ff fff3 	bl	b5548 <_ZN5Print5printEc>
  return n;
}
   b5562:	4420      	add	r0, r4
   b5564:	bd38      	pop	{r3, r4, r5, pc}

000b5566 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5566:	b538      	push	{r3, r4, r5, lr}
   b5568:	4605      	mov	r5, r0
  return write(str);
   b556a:	f7ff ffdb 	bl	b5524 <_ZN5Print5writeEPKc>
   b556e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5570:	4628      	mov	r0, r5
   b5572:	f7ff ffec 	bl	b554e <_ZN5Print7printlnEv>
  return n;
}
   b5576:	4420      	add	r0, r4
   b5578:	bd38      	pop	{r3, r4, r5, pc}

000b557a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b557a:	b530      	push	{r4, r5, lr}
   b557c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b557e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5580:	2a01      	cmp	r2, #1
  *str = '\0';
   b5582:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5586:	bf98      	it	ls
   b5588:	220a      	movls	r2, #10
   b558a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b558c:	460d      	mov	r5, r1
   b558e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5592:	fb01 5312 	mls	r3, r1, r2, r5
   b5596:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b559a:	2b09      	cmp	r3, #9
   b559c:	bf94      	ite	ls
   b559e:	3330      	addls	r3, #48	; 0x30
   b55a0:	3337      	addhi	r3, #55	; 0x37
   b55a2:	b2db      	uxtb	r3, r3
  } while(n);
   b55a4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b55a6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b55aa:	d9ef      	bls.n	b558c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b55ac:	4621      	mov	r1, r4
   b55ae:	f7ff ffb9 	bl	b5524 <_ZN5Print5writeEPKc>
}
   b55b2:	b00b      	add	sp, #44	; 0x2c
   b55b4:	bd30      	pop	{r4, r5, pc}

000b55b6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b55b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b55ba:	b086      	sub	sp, #24
   b55bc:	af00      	add	r7, sp, #0
   b55be:	4605      	mov	r5, r0
   b55c0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b55c2:	1d38      	adds	r0, r7, #4
   b55c4:	2114      	movs	r1, #20
{
   b55c6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b55c8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b55ca:	f7ff fe97 	bl	b52fc <vsnprintf>

    if (n<bufsize)
   b55ce:	2813      	cmp	r0, #19
   b55d0:	d80e      	bhi.n	b55f0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b55d2:	1d39      	adds	r1, r7, #4
   b55d4:	4628      	mov	r0, r5
   b55d6:	f7ff ffa5 	bl	b5524 <_ZN5Print5writeEPKc>
   b55da:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b55dc:	b11e      	cbz	r6, b55e6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b55de:	4628      	mov	r0, r5
   b55e0:	f7ff ffb5 	bl	b554e <_ZN5Print7printlnEv>
   b55e4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b55e6:	4620      	mov	r0, r4
   b55e8:	3718      	adds	r7, #24
   b55ea:	46bd      	mov	sp, r7
   b55ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b55f0:	f100 0308 	add.w	r3, r0, #8
   b55f4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b55f8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b55fa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b55fe:	4622      	mov	r2, r4
   b5600:	1c41      	adds	r1, r0, #1
   b5602:	683b      	ldr	r3, [r7, #0]
   b5604:	4668      	mov	r0, sp
   b5606:	f7ff fe79 	bl	b52fc <vsnprintf>
  return write(str);
   b560a:	4669      	mov	r1, sp
   b560c:	4628      	mov	r0, r5
   b560e:	f7ff ff89 	bl	b5524 <_ZN5Print5writeEPKc>
   b5612:	4604      	mov	r4, r0
   b5614:	46c5      	mov	sp, r8
   b5616:	e7e1      	b.n	b55dc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5618 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5618:	4b01      	ldr	r3, [pc, #4]	; (b5620 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b561a:	4a02      	ldr	r2, [pc, #8]	; (b5624 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b561c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b561e:	4770      	bx	lr
   b5620:	2003e6d0 	.word	0x2003e6d0
   b5624:	000b71a0 	.word	0x000b71a0

000b5628 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5628:	4b02      	ldr	r3, [pc, #8]	; (b5634 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b562a:	681a      	ldr	r2, [r3, #0]
   b562c:	4b02      	ldr	r3, [pc, #8]	; (b5638 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b562e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5630:	4770      	bx	lr
   b5632:	bf00      	nop
   b5634:	2003e5b0 	.word	0x2003e5b0
   b5638:	2003e6d4 	.word	0x2003e6d4

000b563c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b563c:	2100      	movs	r1, #0
   b563e:	f7ff bdb1 	b.w	b51a4 <system_delay_ms>

000b5642 <_ZN9TCPServer5writeEhm>:
    }

    return _client;
}

size_t TCPServer::write(uint8_t b, system_tick_t timeout) {
   b5642:	b513      	push	{r0, r1, r4, lr}
   b5644:	4613      	mov	r3, r2
    return write(&b, sizeof(b), timeout);
   b5646:	6802      	ldr	r2, [r0, #0]
size_t TCPServer::write(uint8_t b, system_tick_t timeout) {
   b5648:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, sizeof(b), timeout);
   b564c:	6994      	ldr	r4, [r2, #24]
   b564e:	f10d 0107 	add.w	r1, sp, #7
   b5652:	2201      	movs	r2, #1
   b5654:	47a0      	blx	r4
}
   b5656:	b002      	add	sp, #8
   b5658:	bd10      	pop	{r4, pc}

000b565a <_ZN9TCPServer5writeEh>:
    size_t ret = _client.write(buf, size, timeout);
    setWriteError(_client.getWriteError());
    return ret;
}

size_t TCPServer::write(uint8_t b) {
   b565a:	b507      	push	{r0, r1, r2, lr}
    return write(&b, 1);
   b565c:	6803      	ldr	r3, [r0, #0]
size_t TCPServer::write(uint8_t b) {
   b565e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1);
   b5662:	68db      	ldr	r3, [r3, #12]
   b5664:	2201      	movs	r2, #1
   b5666:	f10d 0107 	add.w	r1, sp, #7
   b566a:	4798      	blx	r3
}
   b566c:	b003      	add	sp, #12
   b566e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5672 <_ZN9TCPServer5writeEPKhj>:

size_t TCPServer::write(const uint8_t *buffer, size_t size) {
   b5672:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5674:	6803      	ldr	r3, [r0, #0]
   b5676:	699c      	ldr	r4, [r3, #24]
   b5678:	f04f 33ff 	mov.w	r3, #4294967295
   b567c:	46a4      	mov	ip, r4
}
   b567e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5682:	4760      	bx	ip

000b5684 <_ZN9TCPServer5writeEPKhjm>:
size_t TCPServer::write(const uint8_t *buf, size_t size, system_tick_t timeout) {
   b5684:	b510      	push	{r4, lr}
   b5686:	4604      	mov	r4, r0
    void setWriteError(int err = 1) { write_error = err; }
   b5688:	2000      	movs	r0, #0
   b568a:	61a0      	str	r0, [r4, #24]
    size_t ret = _client.write(buf, size, timeout);
   b568c:	f104 0014 	add.w	r0, r4, #20
   b5690:	f000 fc5c 	bl	b5f4c <_ZN9TCPClient5writeEPKhjm>
   b5694:	69a3      	ldr	r3, [r4, #24]
   b5696:	6063      	str	r3, [r4, #4]
}
   b5698:	bd10      	pop	{r4, pc}

000b569a <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b569a:	b530      	push	{r4, r5, lr}
   b569c:	b087      	sub	sp, #28
   b569e:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b56a0:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b56a2:	4668      	mov	r0, sp
   b56a4:	f000 facc 	bl	b5c40 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b56a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b56aa:	3404      	adds	r4, #4
   b56ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b56ae:	682b      	ldr	r3, [r5, #0]
   b56b0:	7023      	strb	r3, [r4, #0]
    }
   b56b2:	b007      	add	sp, #28
   b56b4:	bd30      	pop	{r4, r5, pc}

000b56b6 <_ZN15TCPServerClient8remoteIPEv>:
    virtual IPAddress remoteIP() override {
   b56b6:	b570      	push	{r4, r5, r6, lr}
   b56b8:	460c      	mov	r4, r1
   b56ba:	b094      	sub	sp, #80	; 0x50
        struct sockaddr_storage saddr = {};
   b56bc:	251c      	movs	r5, #28
    virtual IPAddress remoteIP() override {
   b56be:	4606      	mov	r6, r0
        IPAddress addr;
   b56c0:	f000 fa7a 	bl	b5bb8 <_ZN9IPAddressC1Ev>
        struct sockaddr_storage saddr = {};
   b56c4:	462a      	mov	r2, r5
   b56c6:	2100      	movs	r1, #0
   b56c8:	a80d      	add	r0, sp, #52	; 0x34
   b56ca:	f001 fc31 	bl	b6f30 <memset>
    friend class TCPServer;

    using Print::write;

protected:
    inline sock_handle_t sock_handle() { return d_->sock; }
   b56ce:	6963      	ldr	r3, [r4, #20]
        socklen_t len = sizeof(saddr);
   b56d0:	9501      	str	r5, [sp, #4]
        if (!sock_getpeername(sock_handle(), (struct sockaddr*)&saddr, &len)) {
   b56d2:	a90d      	add	r1, sp, #52	; 0x34
   b56d4:	6818      	ldr	r0, [r3, #0]
   b56d6:	aa01      	add	r2, sp, #4
   b56d8:	f7ff fcb4 	bl	b5044 <sock_getpeername>
   b56dc:	4601      	mov	r1, r0
   b56de:	bb20      	cbnz	r0, b572a <_ZN15TCPServerClient8remoteIPEv+0x74>
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b56e0:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   b56e4:	2b02      	cmp	r3, #2
   b56e6:	d104      	bne.n	b56f2 <_ZN15TCPServerClient8remoteIPEv+0x3c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b56e8:	a90e      	add	r1, sp, #56	; 0x38
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b56ea:	4630      	mov	r0, r6
   b56ec:	f7ff ffd5 	bl	b569a <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        return addr;
   b56f0:	e01b      	b.n	b572a <_ZN15TCPServerClient8remoteIPEv+0x74>
    else if (saddr->sa_family == AF_INET6) {
   b56f2:	2b0a      	cmp	r3, #10
   b56f4:	d119      	bne.n	b572a <_ZN15TCPServerClient8remoteIPEv+0x74>
        HAL_IPAddress a = {};
   b56f6:	ac02      	add	r4, sp, #8
   b56f8:	2211      	movs	r2, #17
   b56fa:	4620      	mov	r0, r4
   b56fc:	f001 fc18 	bl	b6f30 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5700:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
   b5704:	4313      	orrs	r3, r2
   b5706:	d013      	beq.n	b5730 <_ZN15TCPServerClient8remoteIPEv+0x7a>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5708:	ab0f      	add	r3, sp, #60	; 0x3c
   b570a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
class IPAddress : public Printable {
   b570c:	ad08      	add	r5, sp, #32
   b570e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            a.v = 6;
   b5712:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5714:	4621      	mov	r1, r4
   b5716:	a807      	add	r0, sp, #28
            a.v = 6;
   b5718:	f88d 3018 	strb.w	r3, [sp, #24]
            addr = IPAddress(a);
   b571c:	f000 fa5a 	bl	b5bd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5722:	1d34      	adds	r4, r6, #4
   b5724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5726:	682b      	ldr	r3, [r5, #0]
   b5728:	7023      	strb	r3, [r4, #0]
    }
   b572a:	4630      	mov	r0, r6
   b572c:	b014      	add	sp, #80	; 0x50
   b572e:	bd70      	pop	{r4, r5, r6, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5730:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5734:	9d11      	ldr	r5, [sp, #68]	; 0x44
   b5736:	f7ff fbed 	bl	b4f14 <inet_htonl>
   b573a:	4285      	cmp	r5, r0
   b573c:	d1e4      	bne.n	b5708 <_ZN15TCPServerClient8remoteIPEv+0x52>
            addr = (const uint8_t*)(&ptr[3]);
   b573e:	a912      	add	r1, sp, #72	; 0x48
   b5740:	e7d3      	b.n	b56ea <_ZN15TCPServerClient8remoteIPEv+0x34>

000b5742 <_ZN9TCPClientaSERKS_.isra.0>:
class TCPClient : public Client {
   b5742:	b538      	push	{r3, r4, r5, lr}
class Print
   b5744:	684b      	ldr	r3, [r1, #4]
   b5746:	6043      	str	r3, [r0, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   b5748:	688b      	ldr	r3, [r1, #8]
   b574a:	6083      	str	r3, [r0, #8]
   b574c:	68cb      	ldr	r3, [r1, #12]
   b574e:	60c3      	str	r3, [r0, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5750:	690b      	ldr	r3, [r1, #16]
   b5752:	6103      	str	r3, [r0, #16]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5754:	694b      	ldr	r3, [r1, #20]
   b5756:	6143      	str	r3, [r0, #20]
   b5758:	698d      	ldr	r5, [r1, #24]
	if (__tmp != _M_pi)
   b575a:	6983      	ldr	r3, [r0, #24]
   b575c:	429d      	cmp	r5, r3
   b575e:	4604      	mov	r4, r0
   b5760:	d008      	beq.n	b5774 <_ZN9TCPClientaSERKS_.isra.0+0x32>
	    if (__tmp != 0)
   b5762:	b115      	cbz	r5, b576a <_ZN9TCPClientaSERKS_.isra.0+0x28>
    { ++_M_use_count; }
   b5764:	686b      	ldr	r3, [r5, #4]
   b5766:	3301      	adds	r3, #1
   b5768:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b576a:	69a0      	ldr	r0, [r4, #24]
   b576c:	b108      	cbz	r0, b5772 <_ZN9TCPClientaSERKS_.isra.0+0x30>
	      _M_pi->_M_release();
   b576e:	f7ff f939 	bl	b49e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5772:	61a5      	str	r5, [r4, #24]
   b5774:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5778 <_ZN15TCPServerClientD1Ev>:
class TCPServerClient : public TCPClient {
   b5778:	b510      	push	{r4, lr}
   b577a:	4b03      	ldr	r3, [pc, #12]	; (b5788 <_ZN15TCPServerClientD1Ev+0x10>)
   b577c:	6003      	str	r3, [r0, #0]
   b577e:	4604      	mov	r4, r0
   b5780:	f7ff f94a 	bl	b4a18 <_ZN9TCPClientD1Ev>
   b5784:	4620      	mov	r0, r4
   b5786:	bd10      	pop	{r4, pc}
   b5788:	000b71f0 	.word	0x000b71f0

000b578c <_ZN15TCPServerClientD0Ev>:
   b578c:	b510      	push	{r4, lr}
   b578e:	4604      	mov	r4, r0
   b5790:	f7ff fff2 	bl	b5778 <_ZN15TCPServerClientD1Ev>
   b5794:	4620      	mov	r0, r4
   b5796:	211c      	movs	r1, #28
   b5798:	f7ff f8ff 	bl	b499a <_ZdlPvj>
   b579c:	4620      	mov	r0, r4
   b579e:	bd10      	pop	{r4, pc}

000b57a0 <_ZN9TCPServerC1Etm>:
TCPServer::TCPServer(uint16_t port, network_interface_t nif)
   b57a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
          _client(-1) {
   b57a2:	4b12      	ldr	r3, [pc, #72]	; (b57ec <_ZN9TCPServerC1Etm+0x4c>)
   b57a4:	6003      	str	r3, [r0, #0]
    Print() : write_error(0) {}
   b57a6:	2500      	movs	r5, #0
   b57a8:	f04f 36ff 	mov.w	r6, #4294967295
   b57ac:	8101      	strh	r1, [r0, #8]
   b57ae:	60c2      	str	r2, [r0, #12]
   b57b0:	6045      	str	r5, [r0, #4]
   b57b2:	6106      	str	r6, [r0, #16]
   b57b4:	4631      	mov	r1, r6
        if (!s_invalid_client) {
   b57b6:	4f0e      	ldr	r7, [pc, #56]	; (b57f0 <_ZN9TCPServerC1Etm+0x50>)
TCPServer::TCPServer(uint16_t port, network_interface_t nif)
   b57b8:	4604      	mov	r4, r0
          _client(-1) {
   b57ba:	3014      	adds	r0, #20
   b57bc:	f000 fdfe 	bl	b63bc <_ZN9TCPClientC1Ei>
        os_thread_scheduling(false, NULL);
   b57c0:	4629      	mov	r1, r5
   b57c2:	4628      	mov	r0, r5
   b57c4:	f7ff fb8e 	bl	b4ee4 <os_thread_scheduling>
        if (!s_invalid_client) {
   b57c8:	683b      	ldr	r3, [r7, #0]
   b57ca:	b943      	cbnz	r3, b57de <_ZN9TCPServerC1Etm+0x3e>
            s_invalid_client = new TCPClient(-1);
   b57cc:	201c      	movs	r0, #28
   b57ce:	f7ff f8e0 	bl	b4992 <_Znwj>
   b57d2:	4605      	mov	r5, r0
   b57d4:	b110      	cbz	r0, b57dc <_ZN9TCPServerC1Etm+0x3c>
   b57d6:	4631      	mov	r1, r6
   b57d8:	f000 fdf0 	bl	b63bc <_ZN9TCPClientC1Ei>
   b57dc:	603d      	str	r5, [r7, #0]
        os_thread_scheduling(true, NULL);
   b57de:	2100      	movs	r1, #0
   b57e0:	2001      	movs	r0, #1
   b57e2:	f7ff fb7f 	bl	b4ee4 <os_thread_scheduling>
}
   b57e6:	4620      	mov	r0, r4
   b57e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b57ea:	bf00      	nop
   b57ec:	000b723c 	.word	0x000b723c
   b57f0:	2003e6d8 	.word	0x2003e6d8

000b57f4 <_ZN9TCPServer4stopEv>:
void TCPServer::stop() {
   b57f4:	b510      	push	{r4, lr}
   b57f6:	4604      	mov	r4, r0
    _client.stop();
   b57f8:	3014      	adds	r0, #20
   b57fa:	f000 fdb7 	bl	b636c <_ZN9TCPClient4stopEv>
    sock_close(_sock);
   b57fe:	6920      	ldr	r0, [r4, #16]
   b5800:	f7ff fc30 	bl	b5064 <sock_close>
    _sock = -1;
   b5804:	f04f 33ff 	mov.w	r3, #4294967295
   b5808:	6123      	str	r3, [r4, #16]
}
   b580a:	bd10      	pop	{r4, pc}

000b580c <_ZN9TCPServerD1Ev>:
    sock_handle_t _sock;
    TCPClient _client;

public:
    TCPServer(uint16_t, network_interface_t nif=0);
    ~TCPServer() { stop(); }
   b580c:	b538      	push	{r3, r4, r5, lr}
   b580e:	4605      	mov	r5, r0
   b5810:	4b05      	ldr	r3, [pc, #20]	; (b5828 <_ZN9TCPServerD1Ev+0x1c>)
   b5812:	f845 3b14 	str.w	r3, [r5], #20
   b5816:	4604      	mov	r4, r0
   b5818:	f7ff ffec 	bl	b57f4 <_ZN9TCPServer4stopEv>
   b581c:	4628      	mov	r0, r5
   b581e:	f7ff f8fb 	bl	b4a18 <_ZN9TCPClientD1Ev>
   b5822:	4620      	mov	r0, r4
   b5824:	bd38      	pop	{r3, r4, r5, pc}
   b5826:	bf00      	nop
   b5828:	000b723c 	.word	0x000b723c

000b582c <_ZN9TCPServerD0Ev>:
   b582c:	b510      	push	{r4, lr}
   b582e:	4604      	mov	r4, r0
   b5830:	f7ff ffec 	bl	b580c <_ZN9TCPServerD1Ev>
   b5834:	4620      	mov	r0, r4
   b5836:	2130      	movs	r1, #48	; 0x30
   b5838:	f7ff f8af 	bl	b499a <_ZdlPvj>
   b583c:	4620      	mov	r0, r4
   b583e:	bd10      	pop	{r4, pc}

000b5840 <_ZN9TCPServer5beginEv>:
bool TCPServer::begin() {
   b5840:	b570      	push	{r4, r5, r6, lr}
   b5842:	4604      	mov	r4, r0
   b5844:	b08c      	sub	sp, #48	; 0x30
    stop();
   b5846:	f7ff ffd5 	bl	b57f4 <_ZN9TCPServer4stopEv>
    if (socket_handle_valid(_sock)) {
   b584a:	6923      	ldr	r3, [r4, #16]
   b584c:	2b00      	cmp	r3, #0
   b584e:	da5c      	bge.n	b590a <_ZN9TCPServer5beginEv+0xca>
    struct sockaddr_in6 saddr = {};
   b5850:	221c      	movs	r2, #28
   b5852:	2100      	movs	r1, #0
   b5854:	a805      	add	r0, sp, #20
   b5856:	f001 fb6b 	bl	b6f30 <memset>
    saddr.sin6_len = sizeof(saddr);
   b585a:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(_port);
   b585e:	8920      	ldrh	r0, [r4, #8]
    saddr.sin6_len = sizeof(saddr);
   b5860:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(_port);
   b5864:	f7ff fb5e 	bl	b4f24 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   b5868:	2206      	movs	r2, #6
    saddr.sin6_port = htons(_port);
   b586a:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   b586e:	2101      	movs	r1, #1
   b5870:	200a      	movs	r0, #10
   b5872:	f7ff fc1f 	bl	b50b4 <sock_socket>
    CHECK_TRUE(_sock >= 0, false);
   b5876:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   b5878:	6120      	str	r0, [r4, #16]
    CHECK_TRUE(_sock >= 0, false);
   b587a:	da06      	bge.n	b588a <_ZN9TCPServer5beginEv+0x4a>
    NAMED_SCOPE_GUARD(done, {
   b587c:	4620      	mov	r0, r4
            return false;
   b587e:	2500      	movs	r5, #0
    NAMED_SCOPE_GUARD(done, {
   b5880:	f7ff ffb8 	bl	b57f4 <_ZN9TCPServer4stopEv>
}
   b5884:	4628      	mov	r0, r5
   b5886:	b00c      	add	sp, #48	; 0x30
   b5888:	bd70      	pop	{r4, r5, r6, pc}
    const int one = 1;
   b588a:	2301      	movs	r3, #1
    CHECK_TRUE(sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one)) == 0, false);
   b588c:	2604      	movs	r6, #4
    const int one = 1;
   b588e:	9302      	str	r3, [sp, #8]
    CHECK_TRUE(sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one)) == 0, false);
   b5890:	9600      	str	r6, [sp, #0]
   b5892:	ab02      	add	r3, sp, #8
   b5894:	4632      	mov	r2, r6
   b5896:	f640 71ff 	movw	r1, #4095	; 0xfff
   b589a:	f7ff fbdb 	bl	b5054 <sock_setsockopt>
   b589e:	4605      	mov	r5, r0
   b58a0:	2800      	cmp	r0, #0
   b58a2:	d1eb      	bne.n	b587c <_ZN9TCPServer5beginEv+0x3c>
    int flags = sock_fcntl(_sock, F_GETFL, 0);
   b58a4:	4602      	mov	r2, r0
   b58a6:	2103      	movs	r1, #3
   b58a8:	6920      	ldr	r0, [r4, #16]
   b58aa:	f7ff fc0b 	bl	b50c4 <sock_fcntl>
    CHECK_TRUE(flags >= 0, false);
   b58ae:	1e02      	subs	r2, r0, #0
   b58b0:	dbe4      	blt.n	b587c <_ZN9TCPServer5beginEv+0x3c>
    CHECK_TRUE(sock_fcntl(_sock, F_SETFL, flags) >= 0, false);
   b58b2:	6920      	ldr	r0, [r4, #16]
   b58b4:	f042 0201 	orr.w	r2, r2, #1
   b58b8:	4631      	mov	r1, r6
   b58ba:	f7ff fc03 	bl	b50c4 <sock_fcntl>
   b58be:	2800      	cmp	r0, #0
   b58c0:	dbdc      	blt.n	b587c <_ZN9TCPServer5beginEv+0x3c>
    if (_nif != 0) {
   b58c2:	68e0      	ldr	r0, [r4, #12]
   b58c4:	b1a0      	cbz	r0, b58f0 <_ZN9TCPServer5beginEv+0xb0>
        if (if_index_to_name(_nif, ifr.ifr_name)) {
   b58c6:	a903      	add	r1, sp, #12
   b58c8:	b2c0      	uxtb	r0, r0
        struct ifreq ifr = {};
   b58ca:	9503      	str	r5, [sp, #12]
   b58cc:	f8ad 5010 	strh.w	r5, [sp, #16]
        if (if_index_to_name(_nif, ifr.ifr_name)) {
   b58d0:	f7ff fae0 	bl	b4e94 <if_index_to_name>
   b58d4:	2800      	cmp	r0, #0
   b58d6:	d1d1      	bne.n	b587c <_ZN9TCPServer5beginEv+0x3c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b58d8:	2306      	movs	r3, #6
   b58da:	9300      	str	r3, [sp, #0]
   b58dc:	6920      	ldr	r0, [r4, #16]
   b58de:	ab03      	add	r3, sp, #12
   b58e0:	f241 020b 	movw	r2, #4107	; 0x100b
   b58e4:	f640 71ff 	movw	r1, #4095	; 0xfff
   b58e8:	f7ff fbb4 	bl	b5054 <sock_setsockopt>
   b58ec:	2800      	cmp	r0, #0
   b58ee:	d1c5      	bne.n	b587c <_ZN9TCPServer5beginEv+0x3c>
    int r = sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr));
   b58f0:	6920      	ldr	r0, [r4, #16]
   b58f2:	221c      	movs	r2, #28
   b58f4:	a905      	add	r1, sp, #20
   b58f6:	f7ff fb9d 	bl	b5034 <sock_bind>
    CHECK_TRUE(!r, false);
   b58fa:	2800      	cmp	r0, #0
   b58fc:	d1be      	bne.n	b587c <_ZN9TCPServer5beginEv+0x3c>
    r = sock_listen(_sock, 5);
   b58fe:	6920      	ldr	r0, [r4, #16]
   b5900:	2105      	movs	r1, #5
   b5902:	f7ff fbbf 	bl	b5084 <sock_listen>
    CHECK_TRUE(!r, false);
   b5906:	2800      	cmp	r0, #0
   b5908:	d1b8      	bne.n	b587c <_ZN9TCPServer5beginEv+0x3c>
        return true;
   b590a:	2501      	movs	r5, #1
   b590c:	e7ba      	b.n	b5884 <_ZN9TCPServer5beginEv+0x44>
	...

000b5910 <_ZN9TCPClientC1ERKS_>:
class Print
   b5910:	684b      	ldr	r3, [r1, #4]
   b5912:	6043      	str	r3, [r0, #4]
   b5914:	4b09      	ldr	r3, [pc, #36]	; (b593c <_ZN9TCPClientC1ERKS_+0x2c>)
   b5916:	6003      	str	r3, [r0, #0]
   b5918:	688b      	ldr	r3, [r1, #8]
   b591a:	6083      	str	r3, [r0, #8]
   b591c:	68cb      	ldr	r3, [r1, #12]
   b591e:	60c3      	str	r3, [r0, #12]
   b5920:	690b      	ldr	r3, [r1, #16]
   b5922:	6103      	str	r3, [r0, #16]
   b5924:	4b06      	ldr	r3, [pc, #24]	; (b5940 <_ZN9TCPClientC1ERKS_+0x30>)
   b5926:	6003      	str	r3, [r0, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5928:	694b      	ldr	r3, [r1, #20]
   b592a:	6143      	str	r3, [r0, #20]
      : _M_pi(__r._M_pi)
   b592c:	698b      	ldr	r3, [r1, #24]
   b592e:	6183      	str	r3, [r0, #24]
	if (_M_pi != 0)
   b5930:	b113      	cbz	r3, b5938 <_ZN9TCPClientC1ERKS_+0x28>
    { ++_M_use_count; }
   b5932:	685a      	ldr	r2, [r3, #4]
   b5934:	3201      	adds	r2, #1
   b5936:	605a      	str	r2, [r3, #4]
   b5938:	4770      	bx	lr
   b593a:	bf00      	nop
   b593c:	000b71c8 	.word	0x000b71c8
   b5940:	000b7330 	.word	0x000b7330

000b5944 <_ZN9TCPServer9availableEv>:
TCPClient TCPServer::available() {
   b5944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sock < 0) {
   b5948:	690b      	ldr	r3, [r1, #16]
   b594a:	2b00      	cmp	r3, #0
TCPClient TCPServer::available() {
   b594c:	b096      	sub	sp, #88	; 0x58
   b594e:	4606      	mov	r6, r0
   b5950:	460c      	mov	r4, r1
    if (_sock < 0) {
   b5952:	da03      	bge.n	b595c <_ZN9TCPServer9availableEv+0x18>
        begin();
   b5954:	680b      	ldr	r3, [r1, #0]
   b5956:	4608      	mov	r0, r1
   b5958:	691b      	ldr	r3, [r3, #16]
   b595a:	4798      	blx	r3
    if (_sock < 0) {
   b595c:	6925      	ldr	r5, [r4, #16]
   b595e:	2d00      	cmp	r5, #0
        _client = *s_invalid_client;
   b5960:	f104 0714 	add.w	r7, r4, #20
    if (_sock < 0) {
   b5964:	da0c      	bge.n	b5980 <_ZN9TCPServer9availableEv+0x3c>
        _client = *s_invalid_client;
   b5966:	4b24      	ldr	r3, [pc, #144]	; (b59f8 <_ZN9TCPServer9availableEv+0xb4>)
   b5968:	4638      	mov	r0, r7
   b596a:	6819      	ldr	r1, [r3, #0]
   b596c:	f7ff fee9 	bl	b5742 <_ZN9TCPClientaSERKS_.isra.0>
    return _client;
   b5970:	4639      	mov	r1, r7
   b5972:	4630      	mov	r0, r6
   b5974:	f7ff ffcc 	bl	b5910 <_ZN9TCPClientC1ERKS_>
}
   b5978:	4630      	mov	r0, r6
   b597a:	b016      	add	sp, #88	; 0x58
   b597c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    struct sockaddr_storage saddr = {};
   b5980:	f04f 081c 	mov.w	r8, #28
   b5984:	4642      	mov	r2, r8
   b5986:	2100      	movs	r1, #0
   b5988:	a808      	add	r0, sp, #32
   b598a:	f001 fad1 	bl	b6f30 <memset>
    int s = sock_accept(_sock, (struct sockaddr*)&saddr, &slen);
   b598e:	a908      	add	r1, sp, #32
   b5990:	aa01      	add	r2, sp, #4
   b5992:	4628      	mov	r0, r5
    socklen_t slen = sizeof(saddr);
   b5994:	f8cd 8004 	str.w	r8, [sp, #4]
    int s = sock_accept(_sock, (struct sockaddr*)&saddr, &slen);
   b5998:	f7ff fb44 	bl	b5024 <sock_accept>
    if (s < 0) {
   b599c:	1e01      	subs	r1, r0, #0
   b599e:	da12      	bge.n	b59c6 <_ZN9TCPServer9availableEv+0x82>
        _client = *s_invalid_client;
   b59a0:	4b15      	ldr	r3, [pc, #84]	; (b59f8 <_ZN9TCPServer9availableEv+0xb4>)
   b59a2:	4638      	mov	r0, r7
   b59a4:	6819      	ldr	r1, [r3, #0]
   b59a6:	f7ff fecc 	bl	b5742 <_ZN9TCPClientaSERKS_.isra.0>
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b59aa:	f7ff fcaf 	bl	b530c <__errno>
   b59ae:	6803      	ldr	r3, [r0, #0]
   b59b0:	2b0b      	cmp	r3, #11
   b59b2:	d0dd      	beq.n	b5970 <_ZN9TCPServer9availableEv+0x2c>
   b59b4:	f7ff fcaa 	bl	b530c <__errno>
   b59b8:	6803      	ldr	r3, [r0, #0]
   b59ba:	2b0b      	cmp	r3, #11
   b59bc:	d0d8      	beq.n	b5970 <_ZN9TCPServer9availableEv+0x2c>
            stop();
   b59be:	4620      	mov	r0, r4
   b59c0:	f7ff ff18 	bl	b57f4 <_ZN9TCPServer4stopEv>
   b59c4:	e7d4      	b.n	b5970 <_ZN9TCPServer9availableEv+0x2c>
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {
   b59c6:	a80f      	add	r0, sp, #60	; 0x3c
   b59c8:	f000 fcf8 	bl	b63bc <_ZN9TCPClientC1Ei>
   b59cc:	ad03      	add	r5, sp, #12
   b59ce:	4b0b      	ldr	r3, [pc, #44]	; (b59fc <_ZN9TCPServer9availableEv+0xb8>)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b59d0:	9c14      	ldr	r4, [sp, #80]	; 0x50
   b59d2:	930f      	str	r3, [sp, #60]	; 0x3c
        client.d_->remoteIP = client.remoteIP(); // fetch the peer IP ready for the copy operator
   b59d4:	a90f      	add	r1, sp, #60	; 0x3c
   b59d6:	a802      	add	r0, sp, #8
   b59d8:	f7ff fe6d 	bl	b56b6 <_ZN15TCPServerClient8remoteIPEv>
   b59dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b59de:	348c      	adds	r4, #140	; 0x8c
   b59e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b59e2:	682b      	ldr	r3, [r5, #0]
   b59e4:	7023      	strb	r3, [r4, #0]
        _client = client;
   b59e6:	4638      	mov	r0, r7
   b59e8:	a90f      	add	r1, sp, #60	; 0x3c
   b59ea:	f7ff feaa 	bl	b5742 <_ZN9TCPClientaSERKS_.isra.0>
        TCPServerClient client = TCPServerClient(s);
   b59ee:	a80f      	add	r0, sp, #60	; 0x3c
   b59f0:	f7ff fec2 	bl	b5778 <_ZN15TCPServerClientD1Ev>
   b59f4:	e7bc      	b.n	b5970 <_ZN9TCPServer9availableEv+0x2c>
   b59f6:	bf00      	nop
   b59f8:	2003e6d8 	.word	0x2003e6d8
   b59fc:	000b71f0 	.word	0x000b71f0

000b5a00 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5a00:	4b01      	ldr	r3, [pc, #4]	; (b5a08 <_GLOBAL__sub_I_RGB+0x8>)
   b5a02:	2200      	movs	r2, #0
   b5a04:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5a06:	4770      	bx	lr
   b5a08:	2003e6dc 	.word	0x2003e6dc

000b5a0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5a0c:	4b01      	ldr	r3, [pc, #4]	; (b5a14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5a0e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5a10:	4770      	bx	lr
   b5a12:	bf00      	nop
   b5a14:	2003e5b8 	.word	0x2003e5b8

000b5a18 <serialEventRun>:
{
   b5a18:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5a1a:	4b0b      	ldr	r3, [pc, #44]	; (b5a48 <serialEventRun+0x30>)
   b5a1c:	b143      	cbz	r3, b5a30 <serialEventRun+0x18>
   b5a1e:	f000 f981 	bl	b5d24 <_Z16_fetch_usbserialv>
   b5a22:	6803      	ldr	r3, [r0, #0]
   b5a24:	691b      	ldr	r3, [r3, #16]
   b5a26:	4798      	blx	r3
   b5a28:	2800      	cmp	r0, #0
   b5a2a:	dd01      	ble.n	b5a30 <serialEventRun+0x18>
        serialEvent();
   b5a2c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5a30:	4b06      	ldr	r3, [pc, #24]	; (b5a4c <serialEventRun+0x34>)
   b5a32:	b143      	cbz	r3, b5a46 <serialEventRun+0x2e>
   b5a34:	f000 fe88 	bl	b6748 <_Z22__fetch_global_Serial1v>
   b5a38:	6803      	ldr	r3, [r0, #0]
   b5a3a:	691b      	ldr	r3, [r3, #16]
   b5a3c:	4798      	blx	r3
   b5a3e:	2800      	cmp	r0, #0
   b5a40:	dd01      	ble.n	b5a46 <serialEventRun+0x2e>
        serialEvent1();
   b5a42:	f3af 8000 	nop.w
}
   b5a46:	bd08      	pop	{r3, pc}
	...

000b5a50 <_post_loop>:
{
   b5a50:	b508      	push	{r3, lr}
	serialEventRun();
   b5a52:	f7ff ffe1 	bl	b5a18 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5a56:	f7ff fa35 	bl	b4ec4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5a5a:	4b01      	ldr	r3, [pc, #4]	; (b5a60 <_post_loop+0x10>)
   b5a5c:	6018      	str	r0, [r3, #0]
}
   b5a5e:	bd08      	pop	{r3, pc}
   b5a60:	2003e740 	.word	0x2003e740

000b5a64 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5a64:	4805      	ldr	r0, [pc, #20]	; (b5a7c <_Z33system_initialize_user_backup_ramv+0x18>)
   b5a66:	4a06      	ldr	r2, [pc, #24]	; (b5a80 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5a68:	4906      	ldr	r1, [pc, #24]	; (b5a84 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5a6a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5a6c:	1a12      	subs	r2, r2, r0
   b5a6e:	f001 fa51 	bl	b6f14 <memcpy>
    __backup_sram_signature = signature;
   b5a72:	4b05      	ldr	r3, [pc, #20]	; (b5a88 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5a74:	4a05      	ldr	r2, [pc, #20]	; (b5a8c <_Z33system_initialize_user_backup_ramv+0x28>)
   b5a76:	601a      	str	r2, [r3, #0]
}
   b5a78:	bd08      	pop	{r3, pc}
   b5a7a:	bf00      	nop
   b5a7c:	2003f400 	.word	0x2003f400
   b5a80:	2003f404 	.word	0x2003f404
   b5a84:	000b7664 	.word	0x000b7664
   b5a88:	2003f400 	.word	0x2003f400
   b5a8c:	9a271c1e 	.word	0x9a271c1e

000b5a90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5a90:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5a92:	2300      	movs	r3, #0
   b5a94:	9300      	str	r3, [sp, #0]
   b5a96:	461a      	mov	r2, r3
   b5a98:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5a9c:	f7ff fb94 	bl	b51c8 <system_ctrl_set_result>
}
   b5aa0:	b003      	add	sp, #12
   b5aa2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5aa8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5aa8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5aaa:	8843      	ldrh	r3, [r0, #2]
   b5aac:	2b0a      	cmp	r3, #10
   b5aae:	d008      	beq.n	b5ac2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5ab0:	2b50      	cmp	r3, #80	; 0x50
   b5ab2:	d10b      	bne.n	b5acc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5ab4:	4b09      	ldr	r3, [pc, #36]	; (b5adc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5ab6:	681b      	ldr	r3, [r3, #0]
   b5ab8:	b14b      	cbz	r3, b5ace <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5aba:	b003      	add	sp, #12
   b5abc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5ac0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5ac2:	f7ff ffe5 	bl	b5a90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5ac6:	b003      	add	sp, #12
   b5ac8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5acc:	2300      	movs	r3, #0
   b5ace:	9300      	str	r3, [sp, #0]
   b5ad0:	461a      	mov	r2, r3
   b5ad2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5ad6:	f7ff fb77 	bl	b51c8 <system_ctrl_set_result>
}
   b5ada:	e7f4      	b.n	b5ac6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5adc:	2003e6f0 	.word	0x2003e6f0

000b5ae0 <module_user_init_hook>:
{
   b5ae0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5ae2:	4812      	ldr	r0, [pc, #72]	; (b5b2c <module_user_init_hook+0x4c>)
   b5ae4:	2100      	movs	r1, #0
   b5ae6:	f7ff fc21 	bl	b532c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5aea:	4b11      	ldr	r3, [pc, #68]	; (b5b30 <module_user_init_hook+0x50>)
   b5aec:	681a      	ldr	r2, [r3, #0]
   b5aee:	4b11      	ldr	r3, [pc, #68]	; (b5b34 <module_user_init_hook+0x54>)
   b5af0:	429a      	cmp	r2, r3
   b5af2:	4b11      	ldr	r3, [pc, #68]	; (b5b38 <module_user_init_hook+0x58>)
   b5af4:	bf0c      	ite	eq
   b5af6:	2201      	moveq	r2, #1
   b5af8:	2200      	movne	r2, #0
   b5afa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5afc:	d001      	beq.n	b5b02 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5afe:	f7ff ffb1 	bl	b5a64 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5b02:	f7ff f9cf 	bl	b4ea4 <HAL_RNG_GetRandomNumber>
   b5b06:	4604      	mov	r4, r0
    srand(seed);
   b5b08:	f001 fa1a 	bl	b6f40 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5b0c:	4b0b      	ldr	r3, [pc, #44]	; (b5b3c <module_user_init_hook+0x5c>)
   b5b0e:	b113      	cbz	r3, b5b16 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5b10:	4620      	mov	r0, r4
   b5b12:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5b16:	2100      	movs	r1, #0
   b5b18:	4808      	ldr	r0, [pc, #32]	; (b5b3c <module_user_init_hook+0x5c>)
   b5b1a:	f7ff fbcf 	bl	b52bc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5b22:	4807      	ldr	r0, [pc, #28]	; (b5b40 <module_user_init_hook+0x60>)
   b5b24:	2100      	movs	r1, #0
   b5b26:	f7ff bb45 	b.w	b51b4 <system_ctrl_set_app_request_handler>
   b5b2a:	bf00      	nop
   b5b2c:	000b5a0d 	.word	0x000b5a0d
   b5b30:	2003f400 	.word	0x2003f400
   b5b34:	9a271c1e 	.word	0x9a271c1e
   b5b38:	2003e6ec 	.word	0x2003e6ec
   b5b3c:	00000000 	.word	0x00000000
   b5b40:	000b5aa9 	.word	0x000b5aa9

000b5b44 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b5b44:	4770      	bx	lr

000b5b46 <_ZN9IPAddressD0Ev>:
   b5b46:	b510      	push	{r4, lr}
   b5b48:	2118      	movs	r1, #24
   b5b4a:	4604      	mov	r4, r0
   b5b4c:	f7fe ff25 	bl	b499a <_ZdlPvj>
   b5b50:	4620      	mov	r0, r4
   b5b52:	bd10      	pop	{r4, pc}

000b5b54 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5b54:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5b56:	7d03      	ldrb	r3, [r0, #20]
   b5b58:	2b06      	cmp	r3, #6
{
   b5b5a:	b08d      	sub	sp, #52	; 0x34
   b5b5c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5b5e:	f100 0704 	add.w	r7, r0, #4
   b5b62:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5b66:	d012      	beq.n	b5b8e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5b68:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5b6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5b70:	220a      	movs	r2, #10
   b5b72:	4630      	mov	r0, r6
   b5b74:	f7ff fd01 	bl	b557a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5b78:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5b7a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5b7c:	d019      	beq.n	b5bb2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5b7e:	2c00      	cmp	r4, #0
   b5b80:	d0f4      	beq.n	b5b6c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5b82:	212e      	movs	r1, #46	; 0x2e
   b5b84:	4630      	mov	r0, r6
   b5b86:	f7ff fcdf 	bl	b5548 <_ZN5Print5printEc>
   b5b8a:	4404      	add	r4, r0
   b5b8c:	e7ee      	b.n	b5b6c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5b8e:	232f      	movs	r3, #47	; 0x2f
   b5b90:	466a      	mov	r2, sp
   b5b92:	4639      	mov	r1, r7
   b5b94:	200a      	movs	r0, #10
		buf[0] = 0;
   b5b96:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5b9a:	f7ff f9b3 	bl	b4f04 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5b9e:	4668      	mov	r0, sp
   b5ba0:	f7fe feb4 	bl	b490c <strlen>
   b5ba4:	6833      	ldr	r3, [r6, #0]
   b5ba6:	4602      	mov	r2, r0
   b5ba8:	68db      	ldr	r3, [r3, #12]
   b5baa:	4669      	mov	r1, sp
   b5bac:	4630      	mov	r0, r6
   b5bae:	4798      	blx	r3
   b5bb0:	4604      	mov	r4, r0
    }
    return n;
}
   b5bb2:	4620      	mov	r0, r4
   b5bb4:	b00d      	add	sp, #52	; 0x34
   b5bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5bb8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5bb8:	b510      	push	{r4, lr}
   b5bba:	4b05      	ldr	r3, [pc, #20]	; (b5bd0 <_ZN9IPAddressC1Ev+0x18>)
   b5bbc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5bbe:	2211      	movs	r2, #17
   b5bc0:	f840 3b04 	str.w	r3, [r0], #4
   b5bc4:	2100      	movs	r1, #0
   b5bc6:	f001 f9b3 	bl	b6f30 <memset>
}
   b5bca:	4620      	mov	r0, r4
   b5bcc:	bd10      	pop	{r4, pc}
   b5bce:	bf00      	nop
   b5bd0:	000b7260 	.word	0x000b7260

000b5bd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5bd4:	4603      	mov	r3, r0
   b5bd6:	4a07      	ldr	r2, [pc, #28]	; (b5bf4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5bd8:	b510      	push	{r4, lr}
   b5bda:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5bde:	f101 0210 	add.w	r2, r1, #16
   b5be2:	f851 4b04 	ldr.w	r4, [r1], #4
   b5be6:	f843 4b04 	str.w	r4, [r3], #4
   b5bea:	4291      	cmp	r1, r2
   b5bec:	d1f9      	bne.n	b5be2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5bee:	780a      	ldrb	r2, [r1, #0]
   b5bf0:	701a      	strb	r2, [r3, #0]
}
   b5bf2:	bd10      	pop	{r4, pc}
   b5bf4:	000b7260 	.word	0x000b7260

000b5bf8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5bf8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b5bfa:	2b04      	cmp	r3, #4
   b5bfc:	d104      	bne.n	b5c08 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b5bfe:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5c00:	3800      	subs	r0, #0
   b5c02:	bf18      	it	ne
   b5c04:	2001      	movne	r0, #1
   b5c06:	4770      	bx	lr
    } else if (version() == 6) {
   b5c08:	2b06      	cmp	r3, #6
   b5c0a:	d107      	bne.n	b5c1c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5c0c:	6843      	ldr	r3, [r0, #4]
   b5c0e:	b93b      	cbnz	r3, b5c20 <_ZNK9IPAddresscvbEv+0x28>
   b5c10:	6883      	ldr	r3, [r0, #8]
   b5c12:	b92b      	cbnz	r3, b5c20 <_ZNK9IPAddresscvbEv+0x28>
   b5c14:	68c3      	ldr	r3, [r0, #12]
   b5c16:	b91b      	cbnz	r3, b5c20 <_ZNK9IPAddresscvbEv+0x28>
   b5c18:	6900      	ldr	r0, [r0, #16]
   b5c1a:	e7f1      	b.n	b5c00 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b5c1c:	2000      	movs	r0, #0
   b5c1e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5c20:	2001      	movs	r0, #1
}
   b5c22:	4770      	bx	lr

000b5c24 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5c24:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5c26:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5c2a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5c2e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5c32:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5c36:	2304      	movs	r3, #4
   b5c38:	6041      	str	r1, [r0, #4]
   b5c3a:	7503      	strb	r3, [r0, #20]
}
   b5c3c:	bd10      	pop	{r4, pc}
	...

000b5c40 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5c40:	b507      	push	{r0, r1, r2, lr}
   b5c42:	4b06      	ldr	r3, [pc, #24]	; (b5c5c <_ZN9IPAddressC1EPKh+0x1c>)
   b5c44:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5c46:	78cb      	ldrb	r3, [r1, #3]
   b5c48:	9300      	str	r3, [sp, #0]
   b5c4a:	788b      	ldrb	r3, [r1, #2]
   b5c4c:	784a      	ldrb	r2, [r1, #1]
   b5c4e:	7809      	ldrb	r1, [r1, #0]
   b5c50:	f7ff ffe8 	bl	b5c24 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5c54:	b003      	add	sp, #12
   b5c56:	f85d fb04 	ldr.w	pc, [sp], #4
   b5c5a:	bf00      	nop
   b5c5c:	000b7260 	.word	0x000b7260

000b5c60 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5c60:	7441      	strb	r1, [r0, #17]
}
   b5c62:	4770      	bx	lr

000b5c64 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5c64:	4770      	bx	lr

000b5c66 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5c66:	4770      	bx	lr

000b5c68 <_ZN9USBSerial4readEv>:
{
   b5c68:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5c6a:	2100      	movs	r1, #0
   b5c6c:	7c00      	ldrb	r0, [r0, #16]
   b5c6e:	f7ff fa61 	bl	b5134 <HAL_USB_USART_Receive_Data>
}
   b5c72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5c76:	bd08      	pop	{r3, pc}

000b5c78 <_ZN9USBSerial4peekEv>:
{
   b5c78:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5c7a:	2101      	movs	r1, #1
   b5c7c:	7c00      	ldrb	r0, [r0, #16]
   b5c7e:	f7ff fa59 	bl	b5134 <HAL_USB_USART_Receive_Data>
}
   b5c82:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5c86:	bd08      	pop	{r3, pc}

000b5c88 <_ZN9USBSerial17availableForWriteEv>:
{
   b5c88:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5c8a:	7c00      	ldrb	r0, [r0, #16]
   b5c8c:	f7ff fa4a 	bl	b5124 <HAL_USB_USART_Available_Data_For_Write>
}
   b5c90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5c94:	bd08      	pop	{r3, pc}

000b5c96 <_ZN9USBSerial9availableEv>:
{
   b5c96:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5c98:	7c00      	ldrb	r0, [r0, #16]
   b5c9a:	f7ff fa3b 	bl	b5114 <HAL_USB_USART_Available_Data>
}
   b5c9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ca2:	bd08      	pop	{r3, pc}

000b5ca4 <_ZN9USBSerial5writeEh>:
{
   b5ca4:	b513      	push	{r0, r1, r4, lr}
   b5ca6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5ca8:	7c00      	ldrb	r0, [r0, #16]
{
   b5caa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5cac:	f7ff fa3a 	bl	b5124 <HAL_USB_USART_Available_Data_For_Write>
   b5cb0:	2800      	cmp	r0, #0
   b5cb2:	9901      	ldr	r1, [sp, #4]
   b5cb4:	dc01      	bgt.n	b5cba <_ZN9USBSerial5writeEh+0x16>
   b5cb6:	7c60      	ldrb	r0, [r4, #17]
   b5cb8:	b120      	cbz	r0, b5cc4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5cba:	7c20      	ldrb	r0, [r4, #16]
   b5cbc:	f7ff fa42 	bl	b5144 <HAL_USB_USART_Send_Data>
   b5cc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5cc4:	b002      	add	sp, #8
   b5cc6:	bd10      	pop	{r4, pc}

000b5cc8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5cc8:	7c00      	ldrb	r0, [r0, #16]
   b5cca:	f7ff ba43 	b.w	b5154 <HAL_USB_USART_Flush_Data>

000b5cce <_ZN9USBSerialD0Ev>:
   b5cce:	b510      	push	{r4, lr}
   b5cd0:	2114      	movs	r1, #20
   b5cd2:	4604      	mov	r4, r0
   b5cd4:	f7fe fe61 	bl	b499a <_ZdlPvj>
   b5cd8:	4620      	mov	r0, r4
   b5cda:	bd10      	pop	{r4, pc}

000b5cdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5cdc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5ce2:	4604      	mov	r4, r0
   b5ce4:	4608      	mov	r0, r1
   b5ce6:	2100      	movs	r1, #0
   b5ce8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5cec:	4b04      	ldr	r3, [pc, #16]	; (b5d00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5cee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5cf0:	2301      	movs	r3, #1
  _serial = serial;
   b5cf2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5cf4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5cf6:	4611      	mov	r1, r2
   b5cf8:	f7ff f9fc 	bl	b50f4 <HAL_USB_USART_Init>
}
   b5cfc:	4620      	mov	r0, r4
   b5cfe:	bd10      	pop	{r4, pc}
   b5d00:	000b7274 	.word	0x000b7274

000b5d04 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5d04:	7c00      	ldrb	r0, [r0, #16]
   b5d06:	2200      	movs	r2, #0
   b5d08:	f7ff b9fc 	b.w	b5104 <HAL_USB_USART_Begin>

000b5d0c <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b5d0c:	7c00      	ldrb	r0, [r0, #16]
   b5d0e:	f7ff ba29 	b.w	b5164 <HAL_USB_USART_Is_Connected>

000b5d12 <_Z19acquireSerialBufferv>:
{
   b5d12:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5d14:	2214      	movs	r2, #20
{
   b5d16:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5d18:	2100      	movs	r1, #0
   b5d1a:	f001 f909 	bl	b6f30 <memset>
}
   b5d1e:	4620      	mov	r0, r4
   b5d20:	bd10      	pop	{r4, pc}
	...

000b5d24 <_Z16_fetch_usbserialv>:
{
   b5d24:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5d26:	4c0f      	ldr	r4, [pc, #60]	; (b5d64 <_Z16_fetch_usbserialv+0x40>)
{
   b5d28:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5d2a:	a803      	add	r0, sp, #12
   b5d2c:	f7ff fff1 	bl	b5d12 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5d30:	7821      	ldrb	r1, [r4, #0]
   b5d32:	f3bf 8f5b 	dmb	ish
   b5d36:	f011 0101 	ands.w	r1, r1, #1
   b5d3a:	d10f      	bne.n	b5d5c <_Z16_fetch_usbserialv+0x38>
   b5d3c:	4620      	mov	r0, r4
   b5d3e:	9101      	str	r1, [sp, #4]
   b5d40:	f7fe fe3a 	bl	b49b8 <__cxa_guard_acquire>
   b5d44:	9901      	ldr	r1, [sp, #4]
   b5d46:	b148      	cbz	r0, b5d5c <_Z16_fetch_usbserialv+0x38>
   b5d48:	aa03      	add	r2, sp, #12
   b5d4a:	4807      	ldr	r0, [pc, #28]	; (b5d68 <_Z16_fetch_usbserialv+0x44>)
   b5d4c:	f7ff ffc6 	bl	b5cdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5d50:	4620      	mov	r0, r4
   b5d52:	f7fe fe36 	bl	b49c2 <__cxa_guard_release>
   b5d56:	4805      	ldr	r0, [pc, #20]	; (b5d6c <_Z16_fetch_usbserialv+0x48>)
   b5d58:	f001 f8d6 	bl	b6f08 <atexit>
	return _usbserial;
}
   b5d5c:	4802      	ldr	r0, [pc, #8]	; (b5d68 <_Z16_fetch_usbserialv+0x44>)
   b5d5e:	b008      	add	sp, #32
   b5d60:	bd10      	pop	{r4, pc}
   b5d62:	bf00      	nop
   b5d64:	2003e6f4 	.word	0x2003e6f4
   b5d68:	2003e6f8 	.word	0x2003e6f8
   b5d6c:	000b5c65 	.word	0x000b5c65

000b5d70 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5d70:	4770      	bx	lr

000b5d72 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5d72:	7441      	strb	r1, [r0, #17]
}
   b5d74:	4770      	bx	lr

000b5d76 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5d76:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5d78:	7c00      	ldrb	r0, [r0, #16]
   b5d7a:	f7ff f90b 	bl	b4f94 <hal_usart_available_data_for_write>
}
   b5d7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5d82:	bd08      	pop	{r3, pc}

000b5d84 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5d84:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5d86:	7c00      	ldrb	r0, [r0, #16]
   b5d88:	f7ff f8dc 	bl	b4f44 <hal_usart_available>
}
   b5d8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5d90:	bd08      	pop	{r3, pc}

000b5d92 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5d92:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5d94:	7c00      	ldrb	r0, [r0, #16]
   b5d96:	f7ff f8e5 	bl	b4f64 <hal_usart_peek>
}
   b5d9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5d9e:	bd08      	pop	{r3, pc}

000b5da0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5da0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5da2:	7c00      	ldrb	r0, [r0, #16]
   b5da4:	f7ff f8d6 	bl	b4f54 <hal_usart_read>
}
   b5da8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5dac:	bd08      	pop	{r3, pc}

000b5dae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5dae:	7c00      	ldrb	r0, [r0, #16]
   b5db0:	f7ff b8e0 	b.w	b4f74 <hal_usart_flush>

000b5db4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5db6:	7c45      	ldrb	r5, [r0, #17]
{
   b5db8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5dba:	b12d      	cbz	r5, b5dc8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5dbc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5dbe:	b003      	add	sp, #12
   b5dc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5dc4:	f7ff b8b6 	b.w	b4f34 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5dc8:	7c00      	ldrb	r0, [r0, #16]
   b5dca:	9101      	str	r1, [sp, #4]
   b5dcc:	f7ff f8e2 	bl	b4f94 <hal_usart_available_data_for_write>
   b5dd0:	2800      	cmp	r0, #0
   b5dd2:	9901      	ldr	r1, [sp, #4]
   b5dd4:	dcf2      	bgt.n	b5dbc <_ZN11USARTSerial5writeEh+0x8>
}
   b5dd6:	4628      	mov	r0, r5
   b5dd8:	b003      	add	sp, #12
   b5dda:	bd30      	pop	{r4, r5, pc}

000b5ddc <_ZN11USARTSerialD0Ev>:
   b5ddc:	b510      	push	{r4, lr}
   b5dde:	2114      	movs	r1, #20
   b5de0:	4604      	mov	r4, r0
   b5de2:	f7fe fdda 	bl	b499a <_ZdlPvj>
   b5de6:	4620      	mov	r0, r4
   b5de8:	bd10      	pop	{r4, pc}
	...

000b5dec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5dec:	b510      	push	{r4, lr}
   b5dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5df2:	4604      	mov	r4, r0
   b5df4:	4608      	mov	r0, r1
   b5df6:	4611      	mov	r1, r2
   b5df8:	2200      	movs	r2, #0
   b5dfa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5dfe:	4b04      	ldr	r3, [pc, #16]	; (b5e10 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5e00:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5e02:	2301      	movs	r3, #1
  _serial = serial;
   b5e04:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5e06:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5e08:	f7ff f8cc 	bl	b4fa4 <hal_usart_init_ex>
}
   b5e0c:	4620      	mov	r0, r4
   b5e0e:	bd10      	pop	{r4, pc}
   b5e10:	000b72a4 	.word	0x000b72a4

000b5e14 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5e14:	4770      	bx	lr

000b5e16 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e18:	4606      	mov	r6, r0
   b5e1a:	4615      	mov	r5, r2
   b5e1c:	460c      	mov	r4, r1
   b5e1e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5e20:	42bc      	cmp	r4, r7
   b5e22:	d006      	beq.n	b5e32 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5e24:	6833      	ldr	r3, [r6, #0]
   b5e26:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5e2a:	689b      	ldr	r3, [r3, #8]
   b5e2c:	4630      	mov	r0, r6
   b5e2e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5e30:	e7f6      	b.n	b5e20 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5e32:	4628      	mov	r0, r5
   b5e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e36 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5e36:	7c00      	ldrb	r0, [r0, #16]
   b5e38:	2200      	movs	r2, #0
   b5e3a:	f7ff b8bb 	b.w	b4fb4 <hal_i2c_write>

000b5e3e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5e3e:	7c00      	ldrb	r0, [r0, #16]
   b5e40:	2100      	movs	r1, #0
   b5e42:	f7ff b8bf 	b.w	b4fc4 <hal_i2c_available>

000b5e46 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5e46:	7c00      	ldrb	r0, [r0, #16]
   b5e48:	2100      	movs	r1, #0
   b5e4a:	f7ff b8c3 	b.w	b4fd4 <hal_i2c_read>

000b5e4e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5e4e:	7c00      	ldrb	r0, [r0, #16]
   b5e50:	2100      	movs	r1, #0
   b5e52:	f7ff b8c7 	b.w	b4fe4 <hal_i2c_peek>

000b5e56 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5e56:	7c00      	ldrb	r0, [r0, #16]
   b5e58:	2100      	movs	r1, #0
   b5e5a:	f7ff b8cb 	b.w	b4ff4 <hal_i2c_flush>

000b5e5e <_ZN7TwoWireD0Ev>:
   b5e5e:	b510      	push	{r4, lr}
   b5e60:	2114      	movs	r1, #20
   b5e62:	4604      	mov	r4, r0
   b5e64:	f7fe fd99 	bl	b499a <_ZdlPvj>
   b5e68:	4620      	mov	r0, r4
   b5e6a:	bd10      	pop	{r4, pc}

000b5e6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5e6c:	b510      	push	{r4, lr}
   b5e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5e72:	4604      	mov	r4, r0
   b5e74:	4608      	mov	r0, r1
   b5e76:	2100      	movs	r1, #0
   b5e78:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5e7c:	4b03      	ldr	r3, [pc, #12]	; (b5e8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b5e7e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5e80:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5e82:	4611      	mov	r1, r2
   b5e84:	f7ff f8c6 	bl	b5014 <hal_i2c_init>
}
   b5e88:	4620      	mov	r0, r4
   b5e8a:	bd10      	pop	{r4, pc}
   b5e8c:	000b72d4 	.word	0x000b72d4

000b5e90 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5e90:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5e92:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5e94:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5e98:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5e9a:	2201      	movs	r2, #1
   b5e9c:	f04f 33ff 	mov.w	r3, #4294967295
   b5ea0:	f10d 0107 	add.w	r1, sp, #7
   b5ea4:	47a0      	blx	r4
}
   b5ea6:	b002      	add	sp, #8
   b5ea8:	bd10      	pop	{r4, pc}

000b5eaa <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b5eaa:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5eac:	6803      	ldr	r3, [r0, #0]
   b5eae:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5eb0:	f04f 33ff 	mov.w	r3, #4294967295
   b5eb4:	46a4      	mov	ip, r4
}
   b5eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5eba:	4760      	bx	ip

000b5ebc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5ebc:	b513      	push	{r0, r1, r4, lr}
   b5ebe:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b5ec0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5ec2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b5ec6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5ec8:	f10d 0107 	add.w	r1, sp, #7
   b5ecc:	2201      	movs	r2, #1
   b5ece:	47a0      	blx	r4
}
   b5ed0:	b002      	add	sp, #8
   b5ed2:	bd10      	pop	{r4, pc}

000b5ed4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b5ed4:	b510      	push	{r4, lr}
   b5ed6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5ed8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5edc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5ee0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b5ee2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5ee4:	d008      	beq.n	b5ef8 <_ZN9TCPClient4readEv+0x24>
   b5ee6:	6963      	ldr	r3, [r4, #20]
   b5ee8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5eec:	1c51      	adds	r1, r2, #1
   b5eee:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b5ef2:	4413      	add	r3, r2
   b5ef4:	7918      	ldrb	r0, [r3, #4]
}
   b5ef6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5ef8:	6803      	ldr	r3, [r0, #0]
   b5efa:	691b      	ldr	r3, [r3, #16]
   b5efc:	4798      	blx	r3
   b5efe:	2800      	cmp	r0, #0
   b5f00:	d1f1      	bne.n	b5ee6 <_ZN9TCPClient4readEv+0x12>
   b5f02:	f04f 30ff 	mov.w	r0, #4294967295
   b5f06:	e7f6      	b.n	b5ef6 <_ZN9TCPClient4readEv+0x22>

000b5f08 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5f08:	4770      	bx	lr

000b5f0a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b5f0a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5f0c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b5f0e:	43c0      	mvns	r0, r0
   b5f10:	0fc0      	lsrs	r0, r0, #31
   b5f12:	4770      	bx	lr

000b5f14 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5f14:	4770      	bx	lr
	...

000b5f18 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5f18:	4b06      	ldr	r3, [pc, #24]	; (b5f34 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5f1a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5f1c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5f1e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5f22:	d005      	beq.n	b5f30 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5f24:	4608      	mov	r0, r1
   b5f26:	f000 fc71 	bl	b680c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5f2a:	2800      	cmp	r0, #0
   b5f2c:	bf08      	it	eq
   b5f2e:	2400      	moveq	r4, #0
      }
   b5f30:	4620      	mov	r0, r4
   b5f32:	bd10      	pop	{r4, pc}
   b5f34:	000b7198 	.word	0x000b7198

000b5f38 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5f38:	b510      	push	{r4, lr}
   b5f3a:	21ac      	movs	r1, #172	; 0xac
   b5f3c:	4604      	mov	r4, r0
   b5f3e:	f7fe fd2c 	bl	b499a <_ZdlPvj>
   b5f42:	4620      	mov	r0, r4
   b5f44:	bd10      	pop	{r4, pc}

000b5f46 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5f46:	21ac      	movs	r1, #172	; 0xac
   b5f48:	f7fe bd27 	b.w	b499a <_ZdlPvj>

000b5f4c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5f50:	f04f 0800 	mov.w	r8, #0
   b5f54:	b086      	sub	sp, #24
   b5f56:	461c      	mov	r4, r3
   b5f58:	f8c0 8004 	str.w	r8, [r0, #4]
   b5f5c:	4605      	mov	r5, r0
   b5f5e:	460e      	mov	r6, r1
   b5f60:	4617      	mov	r7, r2
    struct timeval tv = {};
   b5f62:	4641      	mov	r1, r8
   b5f64:	2210      	movs	r2, #16
   b5f66:	a802      	add	r0, sp, #8
   b5f68:	f000 ffe2 	bl	b6f30 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5f6c:	1c63      	adds	r3, r4, #1
   b5f6e:	d009      	beq.n	b5f84 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5f74:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5f78:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5f7c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5f80:	435c      	muls	r4, r3
   b5f82:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5f84:	6968      	ldr	r0, [r5, #20]
   b5f86:	2310      	movs	r3, #16
   b5f88:	9300      	str	r3, [sp, #0]
   b5f8a:	6800      	ldr	r0, [r0, #0]
   b5f8c:	ab02      	add	r3, sp, #8
   b5f8e:	f241 0205 	movw	r2, #4101	; 0x1005
   b5f92:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5f96:	f7ff f85d 	bl	b5054 <sock_setsockopt>
    if (ret < 0) {
   b5f9a:	2800      	cmp	r0, #0
   b5f9c:	da07      	bge.n	b5fae <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5f9e:	f7ff f9b5 	bl	b530c <__errno>
   b5fa2:	6803      	ldr	r3, [r0, #0]
   b5fa4:	606b      	str	r3, [r5, #4]
        return 0;
   b5fa6:	2000      	movs	r0, #0
}
   b5fa8:	b006      	add	sp, #24
   b5faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b5fae:	6968      	ldr	r0, [r5, #20]
   b5fb0:	2300      	movs	r3, #0
   b5fb2:	6800      	ldr	r0, [r0, #0]
   b5fb4:	463a      	mov	r2, r7
   b5fb6:	4631      	mov	r1, r6
   b5fb8:	f7ff f874 	bl	b50a4 <sock_send>
    if (ret < 0) {
   b5fbc:	1e03      	subs	r3, r0, #0
   b5fbe:	dbee      	blt.n	b5f9e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b5fc0:	4618      	mov	r0, r3
   b5fc2:	e7f1      	b.n	b5fa8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5fc4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5fc4:	b530      	push	{r4, r5, lr}
   b5fc6:	b087      	sub	sp, #28
   b5fc8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5fca:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5fcc:	4668      	mov	r0, sp
   b5fce:	f7ff fe37 	bl	b5c40 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5fd4:	3404      	adds	r4, #4
   b5fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5fd8:	682b      	ldr	r3, [r5, #0]
   b5fda:	7023      	strb	r3, [r4, #0]
    }
   b5fdc:	b007      	add	sp, #28
   b5fde:	bd30      	pop	{r4, r5, pc}

000b5fe0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5fe0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b5fe2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5fe4:	4b05      	ldr	r3, [pc, #20]	; (b5ffc <_ZN9TCPClient8remoteIPEv+0x1c>)
   b5fe6:	4604      	mov	r4, r0
   b5fe8:	358c      	adds	r5, #140	; 0x8c
   b5fea:	f844 3b04 	str.w	r3, [r4], #4
   b5fee:	4606      	mov	r6, r0
   b5ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ff4:	682b      	ldr	r3, [r5, #0]
   b5ff6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5ff8:	4630      	mov	r0, r6
   b5ffa:	bd70      	pop	{r4, r5, r6, pc}
   b5ffc:	000b7260 	.word	0x000b7260

000b6000 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6004:	4698      	mov	r8, r3
    stop();
   b6006:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6008:	b093      	sub	sp, #76	; 0x4c
   b600a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b600c:	2400      	movs	r4, #0
    stop();
   b600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6010:	4606      	mov	r6, r0
   b6012:	4617      	mov	r7, r2
    stop();
   b6014:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6016:	4628      	mov	r0, r5
   b6018:	466b      	mov	r3, sp
   b601a:	4622      	mov	r2, r4
   b601c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b601e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6020:	f7fe ff08 	bl	b4e34 <netdb_getaddrinfo>
   b6024:	4605      	mov	r5, r0
   b6026:	2800      	cmp	r0, #0
   b6028:	d163      	bne.n	b60f2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b602a:	9b00      	ldr	r3, [sp, #0]
   b602c:	2b00      	cmp	r3, #0
   b602e:	d04b      	beq.n	b60c8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6030:	695b      	ldr	r3, [r3, #20]
   b6032:	2b00      	cmp	r3, #0
   b6034:	d048      	beq.n	b60c8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6036:	a806      	add	r0, sp, #24
   b6038:	f7ff fdbe 	bl	b5bb8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b603c:	9b00      	ldr	r3, [sp, #0]
   b603e:	695c      	ldr	r4, [r3, #20]
    if (saddr->sa_family == AF_INET) {
   b6040:	7863      	ldrb	r3, [r4, #1]
   b6042:	2b02      	cmp	r3, #2
   b6044:	d104      	bne.n	b6050 <_ZN9TCPClient7connectEPKctm+0x50>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6046:	1d21      	adds	r1, r4, #4
            addr = (const uint8_t*)(&ptr[3]);
   b6048:	a806      	add	r0, sp, #24
   b604a:	f7ff ffbb 	bl	b5fc4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b604e:	e026      	b.n	b609e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6050:	2b0a      	cmp	r3, #10
   b6052:	d124      	bne.n	b609e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6054:	2211      	movs	r2, #17
   b6056:	4629      	mov	r1, r5
   b6058:	a801      	add	r0, sp, #4
   b605a:	f000 ff69 	bl	b6f30 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b605e:	68a3      	ldr	r3, [r4, #8]
   b6060:	2b00      	cmp	r3, #0
   b6062:	d038      	beq.n	b60d6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6064:	f104 0308 	add.w	r3, r4, #8
   b6068:	f10d 0c04 	add.w	ip, sp, #4
   b606c:	3418      	adds	r4, #24
   b606e:	6818      	ldr	r0, [r3, #0]
   b6070:	6859      	ldr	r1, [r3, #4]
   b6072:	4662      	mov	r2, ip
   b6074:	c203      	stmia	r2!, {r0, r1}
   b6076:	3308      	adds	r3, #8
   b6078:	42a3      	cmp	r3, r4
   b607a:	4694      	mov	ip, r2
   b607c:	d1f7      	bne.n	b606e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b607e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6080:	a901      	add	r1, sp, #4
   b6082:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6084:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6088:	f7ff fda4 	bl	b5bd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b608c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6090:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6094:	ac07      	add	r4, sp, #28
   b6096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6098:	f8dc 3000 	ldr.w	r3, [ip]
   b609c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b609e:	a806      	add	r0, sp, #24
   b60a0:	f7ff fdaa 	bl	b5bf8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b60a4:	b180      	cbz	r0, b60c8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b60a6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b60a8:	ad07      	add	r5, sp, #28
   b60aa:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b60ae:	4b12      	ldr	r3, [pc, #72]	; (b60f8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b60b0:	930c      	str	r3, [sp, #48]	; 0x30
   b60b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b60b4:	ac0d      	add	r4, sp, #52	; 0x34
   b60b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b60b8:	682b      	ldr	r3, [r5, #0]
   b60ba:	7023      	strb	r3, [r4, #0]
   b60bc:	463a      	mov	r2, r7
   b60be:	4643      	mov	r3, r8
   b60c0:	a90c      	add	r1, sp, #48	; 0x30
   b60c2:	4630      	mov	r0, r6
   b60c4:	47c8      	blx	r9
   b60c6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b60c8:	9800      	ldr	r0, [sp, #0]
   b60ca:	f7fe feab 	bl	b4e24 <netdb_freeaddrinfo>
}
   b60ce:	4628      	mov	r0, r5
   b60d0:	b013      	add	sp, #76	; 0x4c
   b60d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b60d6:	68e3      	ldr	r3, [r4, #12]
   b60d8:	2b00      	cmp	r3, #0
   b60da:	d1c3      	bne.n	b6064 <_ZN9TCPClient7connectEPKctm+0x64>
   b60dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b60e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b60e4:	f7fe ff16 	bl	b4f14 <inet_htonl>
   b60e8:	4581      	cmp	r9, r0
   b60ea:	d1bb      	bne.n	b6064 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b60ec:	f104 0114 	add.w	r1, r4, #20
   b60f0:	e7aa      	b.n	b6048 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b60f2:	4625      	mov	r5, r4
   b60f4:	e7e8      	b.n	b60c8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b60f6:	bf00      	nop
   b60f8:	000b7260 	.word	0x000b7260

000b60fc <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b60fc:	b538      	push	{r3, r4, r5, lr}
   b60fe:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6100:	681a      	ldr	r2, [r3, #0]
   b6102:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6104:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6106:	da10      	bge.n	b612a <_ZN9TCPClient9connectedEv+0x2e>
   b6108:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b610c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6110:	429a      	cmp	r2, r3
   b6112:	d10a      	bne.n	b612a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6114:	6803      	ldr	r3, [r0, #0]
   b6116:	691b      	ldr	r3, [r3, #16]
   b6118:	4798      	blx	r3
        if (!rv) {
   b611a:	4604      	mov	r4, r0
   b611c:	b928      	cbnz	r0, b612a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b611e:	682b      	ldr	r3, [r5, #0]
   b6120:	4628      	mov	r0, r5
   b6122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6124:	4798      	blx	r3
        rv = available();
   b6126:	4620      	mov	r0, r4
}
   b6128:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b612a:	2001      	movs	r0, #1
   b612c:	e7fc      	b.n	b6128 <_ZN9TCPClient9connectedEv+0x2c>

000b612e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b612e:	b510      	push	{r4, lr}
   b6130:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6132:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6136:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b613a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b613c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b613e:	d005      	beq.n	b614c <_ZN9TCPClient4peekEv+0x1e>
   b6140:	6963      	ldr	r3, [r4, #20]
   b6142:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6146:	4413      	add	r3, r2
   b6148:	7918      	ldrb	r0, [r3, #4]
}
   b614a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b614c:	6803      	ldr	r3, [r0, #0]
   b614e:	691b      	ldr	r3, [r3, #16]
   b6150:	4798      	blx	r3
   b6152:	2800      	cmp	r0, #0
   b6154:	d1f4      	bne.n	b6140 <_ZN9TCPClient4peekEv+0x12>
   b6156:	f04f 30ff 	mov.w	r0, #4294967295
   b615a:	e7f6      	b.n	b614a <_ZN9TCPClient4peekEv+0x1c>

000b615c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b615e:	6943      	ldr	r3, [r0, #20]
   b6160:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6162:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6166:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b616a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b616c:	4605      	mov	r5, r0
   b616e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6170:	d016      	beq.n	b61a0 <_ZN9TCPClient4readEPhj+0x44>
   b6172:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6174:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6178:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b617c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b617e:	42bc      	cmp	r4, r7
   b6180:	bf28      	it	cs
   b6182:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6184:	3304      	adds	r3, #4
   b6186:	4622      	mov	r2, r4
   b6188:	4419      	add	r1, r3
   b618a:	4630      	mov	r0, r6
   b618c:	f000 fec2 	bl	b6f14 <memcpy>
   b6190:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b6192:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b6196:	4423      	add	r3, r4
   b6198:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b619c:	4620      	mov	r0, r4
   b619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b61a0:	6803      	ldr	r3, [r0, #0]
   b61a2:	691b      	ldr	r3, [r3, #16]
   b61a4:	4798      	blx	r3
   b61a6:	2800      	cmp	r0, #0
   b61a8:	d1e3      	bne.n	b6172 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b61aa:	f04f 34ff 	mov.w	r4, #4294967295
   b61ae:	e7f5      	b.n	b619c <_ZN9TCPClient4readEPhj+0x40>

000b61b0 <_ZN9TCPClient12flush_bufferEv>:
   b61b0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b61b2:	2300      	movs	r3, #0
   b61b4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b61b8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b61ba:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b61be:	4770      	bx	lr

000b61c0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b61c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b61c4:	461f      	mov	r7, r3
    stop();
   b61c6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b61c8:	460c      	mov	r4, r1
    stop();
   b61ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b61cc:	b08a      	sub	sp, #40	; 0x28
   b61ce:	4605      	mov	r5, r0
   b61d0:	4616      	mov	r6, r2
    stop();
   b61d2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b61d4:	7d23      	ldrb	r3, [r4, #20]
   b61d6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b61da:	2b04      	cmp	r3, #4
   b61dc:	bf0c      	ite	eq
   b61de:	2002      	moveq	r0, #2
   b61e0:	200a      	movne	r0, #10
   b61e2:	2206      	movs	r2, #6
   b61e4:	2101      	movs	r1, #1
   b61e6:	f7fe ff65 	bl	b50b4 <sock_socket>
   b61ea:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b61ee:	696b      	ldr	r3, [r5, #20]
   b61f0:	681b      	ldr	r3, [r3, #0]
   b61f2:	2b00      	cmp	r3, #0
   b61f4:	da08      	bge.n	b6208 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b61f6:	682b      	ldr	r3, [r5, #0]
   b61f8:	4628      	mov	r0, r5
   b61fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b61fc:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b61fe:	4798      	blx	r3
}
   b6200:	4620      	mov	r0, r4
   b6202:	b00a      	add	sp, #40	; 0x28
   b6204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b6208:	4628      	mov	r0, r5
   b620a:	f7ff ffd1 	bl	b61b0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b620e:	b1b7      	cbz	r7, b623e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b6210:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6212:	a903      	add	r1, sp, #12
   b6214:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b6216:	9303      	str	r3, [sp, #12]
   b6218:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b621c:	f7fe fe3a 	bl	b4e94 <if_index_to_name>
   b6220:	2800      	cmp	r0, #0
   b6222:	d1e8      	bne.n	b61f6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b6224:	6968      	ldr	r0, [r5, #20]
   b6226:	2306      	movs	r3, #6
   b6228:	9300      	str	r3, [sp, #0]
   b622a:	6800      	ldr	r0, [r0, #0]
   b622c:	ab03      	add	r3, sp, #12
   b622e:	f241 020b 	movw	r2, #4107	; 0x100b
   b6232:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6236:	f7fe ff0d 	bl	b5054 <sock_setsockopt>
   b623a:	2800      	cmp	r0, #0
   b623c:	d1db      	bne.n	b61f6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b623e:	221c      	movs	r2, #28
   b6240:	2100      	movs	r1, #0
   b6242:	a803      	add	r0, sp, #12
   b6244:	f000 fe74 	bl	b6f30 <memset>
    if (ip.version() == 4) {
   b6248:	7d23      	ldrb	r3, [r4, #20]
   b624a:	2b04      	cmp	r3, #4
   b624c:	d11d      	bne.n	b628a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b624e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b6252:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6254:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6258:	f7fe fe64 	bl	b4f24 <inet_htons>
   b625c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6260:	6860      	ldr	r0, [r4, #4]
   b6262:	f7fe fe57 	bl	b4f14 <inet_htonl>
   b6266:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6268:	696b      	ldr	r3, [r5, #20]
   b626a:	221c      	movs	r2, #28
   b626c:	6818      	ldr	r0, [r3, #0]
   b626e:	a903      	add	r1, sp, #12
   b6270:	f7fe ff00 	bl	b5074 <sock_connect>
   b6274:	2800      	cmp	r0, #0
   b6276:	d1be      	bne.n	b61f6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6278:	3404      	adds	r4, #4
   b627a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b627c:	696d      	ldr	r5, [r5, #20]
   b627e:	358c      	adds	r5, #140	; 0x8c
   b6280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6282:	6823      	ldr	r3, [r4, #0]
   b6284:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b6286:	2401      	movs	r4, #1
   b6288:	e7ba      	b.n	b6200 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b628a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b628e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6290:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b6294:	f7fe fe46 	bl	b4f24 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6298:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b629a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b629e:	1d23      	adds	r3, r4, #4
   b62a0:	f104 0714 	add.w	r7, r4, #20
   b62a4:	6818      	ldr	r0, [r3, #0]
   b62a6:	6859      	ldr	r1, [r3, #4]
   b62a8:	4632      	mov	r2, r6
   b62aa:	c203      	stmia	r2!, {r0, r1}
   b62ac:	3308      	adds	r3, #8
   b62ae:	42bb      	cmp	r3, r7
   b62b0:	4616      	mov	r6, r2
   b62b2:	d1f7      	bne.n	b62a4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b62b4:	e7d8      	b.n	b6268 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b62b8 <_ZN9TCPClient9availableEv>:
{
   b62b8:	b530      	push	{r4, r5, lr}
   b62ba:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b62bc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b62c0:	b08b      	sub	sp, #44	; 0x2c
   b62c2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b62c4:	b12b      	cbz	r3, b62d2 <_ZN9TCPClient9availableEv+0x1a>
   b62c6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b62ca:	429a      	cmp	r2, r3
   b62cc:	d101      	bne.n	b62d2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b62ce:	f7ff ff6f 	bl	b61b0 <_ZN9TCPClient12flush_bufferEv>
   b62d2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b62d4:	6808      	ldr	r0, [r1, #0]
   b62d6:	2800      	cmp	r0, #0
   b62d8:	db18      	blt.n	b630c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b62da:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b62de:	2d7f      	cmp	r5, #127	; 0x7f
   b62e0:	d814      	bhi.n	b630c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b62e2:	3104      	adds	r1, #4
   b62e4:	2308      	movs	r3, #8
   b62e6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b62ea:	4429      	add	r1, r5
   b62ec:	f7fe fed2 	bl	b5094 <sock_recv>
            if (ret > 0) {
   b62f0:	2800      	cmp	r0, #0
   b62f2:	dd13      	ble.n	b631c <_ZN9TCPClient9availableEv+0x64>
   b62f4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b62f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b62fa:	b90a      	cbnz	r2, b6300 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b62fc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6300:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b6302:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6306:	4410      	add	r0, r2
   b6308:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b630c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b630e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b6312:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b6316:	1ac0      	subs	r0, r0, r3
   b6318:	b00b      	add	sp, #44	; 0x2c
   b631a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b631c:	f7fe fff6 	bl	b530c <__errno>
   b6320:	6803      	ldr	r3, [r0, #0]
   b6322:	2b0b      	cmp	r3, #11
   b6324:	d0f2      	beq.n	b630c <_ZN9TCPClient9availableEv+0x54>
   b6326:	f7fe fff1 	bl	b530c <__errno>
   b632a:	6803      	ldr	r3, [r0, #0]
   b632c:	2b0b      	cmp	r3, #11
   b632e:	d0ed      	beq.n	b630c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6330:	2320      	movs	r3, #32
   b6332:	2500      	movs	r5, #0
   b6334:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6338:	f7fe ffe8 	bl	b530c <__errno>
   b633c:	6803      	ldr	r3, [r0, #0]
   b633e:	9301      	str	r3, [sp, #4]
   b6340:	4b08      	ldr	r3, [pc, #32]	; (b6364 <_ZN9TCPClient9availableEv+0xac>)
   b6342:	4909      	ldr	r1, [pc, #36]	; (b6368 <_ZN9TCPClient9availableEv+0xb0>)
   b6344:	9300      	str	r3, [sp, #0]
   b6346:	aa02      	add	r2, sp, #8
   b6348:	462b      	mov	r3, r5
   b634a:	2032      	movs	r0, #50	; 0x32
   b634c:	f7fe ff1a 	bl	b5184 <log_message>
                    sock_close(d_->sock);
   b6350:	6963      	ldr	r3, [r4, #20]
   b6352:	6818      	ldr	r0, [r3, #0]
   b6354:	f7fe fe86 	bl	b5064 <sock_close>
   b6358:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b635a:	f04f 32ff 	mov.w	r2, #4294967295
   b635e:	601a      	str	r2, [r3, #0]
   b6360:	e7d4      	b.n	b630c <_ZN9TCPClient9availableEv+0x54>
   b6362:	bf00      	nop
   b6364:	000b72fb 	.word	0x000b72fb
   b6368:	000b72f4 	.word	0x000b72f4

000b636c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b636c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b636e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6370:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6372:	6818      	ldr	r0, [r3, #0]
   b6374:	2800      	cmp	r0, #0
   b6376:	db01      	blt.n	b637c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6378:	f7fe fe74 	bl	b5064 <sock_close>
   b637c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b637e:	f04f 32ff 	mov.w	r2, #4294967295
   b6382:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6384:	6960      	ldr	r0, [r4, #20]
   b6386:	2211      	movs	r2, #17
   b6388:	2100      	movs	r1, #0
   b638a:	308c      	adds	r0, #140	; 0x8c
   b638c:	f000 fdd0 	bl	b6f30 <memset>
    flush_buffer();
   b6390:	4620      	mov	r0, r4
}
   b6392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6396:	f7ff bf0b 	b.w	b61b0 <_ZN9TCPClient12flush_bufferEv>

000b639a <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   b639a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b639c:	6818      	ldr	r0, [r3, #0]
}
   b639e:	43c0      	mvns	r0, r0
   b63a0:	0fc0      	lsrs	r0, r0, #31
   b63a2:	4770      	bx	lr

000b63a4 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b63a4:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b63a6:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b63a8:	4604      	mov	r4, r0
          total(0) {
   b63aa:	6001      	str	r1, [r0, #0]
   b63ac:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b63b0:	3088      	adds	r0, #136	; 0x88
   b63b2:	f7ff fc01 	bl	b5bb8 <_ZN9IPAddressC1Ev>
}
   b63b6:	4620      	mov	r0, r4
   b63b8:	bd10      	pop	{r4, pc}
	...

000b63bc <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b63bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b63be:	2300      	movs	r3, #0
   b63c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b63c4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b63c8:	4a0e      	ldr	r2, [pc, #56]	; (b6404 <_ZN9TCPClientC1Ei+0x48>)
   b63ca:	6103      	str	r3, [r0, #16]
   b63cc:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b63ce:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b63d0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b63d2:	20ac      	movs	r0, #172	; 0xac
   b63d4:	9101      	str	r1, [sp, #4]
   b63d6:	f7fe fadc 	bl	b4992 <_Znwj>
	  auto __pi = ::new (__mem)
   b63da:	1e05      	subs	r5, r0, #0
   b63dc:	f105 060c 	add.w	r6, r5, #12
   b63e0:	d008      	beq.n	b63f4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b63e2:	2301      	movs	r3, #1
   b63e4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b63e8:	4b07      	ldr	r3, [pc, #28]	; (b6408 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b63ea:	9901      	ldr	r1, [sp, #4]
   b63ec:	602b      	str	r3, [r5, #0]
   b63ee:	4630      	mov	r0, r6
   b63f0:	f7ff ffd8 	bl	b63a4 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b63f4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b63f6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b63fa:	f7ff fed9 	bl	b61b0 <_ZN9TCPClient12flush_bufferEv>
}
   b63fe:	b002      	add	sp, #8
   b6400:	bd70      	pop	{r4, r5, r6, pc}
   b6402:	bf00      	nop
   b6404:	000b7330 	.word	0x000b7330
   b6408:	000b7314 	.word	0x000b7314

000b640c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b640c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b640e:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b6412:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6414:	f7ff ffd2 	bl	b63bc <_ZN9TCPClientC1Ei>
}
   b6418:	4620      	mov	r0, r4
   b641a:	bd10      	pop	{r4, pc}

000b641c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b641c:	b510      	push	{r4, lr}
   b641e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6420:	6800      	ldr	r0, [r0, #0]
   b6422:	2800      	cmp	r0, #0
   b6424:	db01      	blt.n	b642a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6426:	f7fe fe1d 	bl	b5064 <sock_close>
    }
}
   b642a:	4620      	mov	r0, r4
   b642c:	bd10      	pop	{r4, pc}

000b642e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b642e:	300c      	adds	r0, #12
   b6430:	f7ff bff4 	b.w	b641c <_ZN9TCPClient4DataD1Ev>

000b6434 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6434:	2200      	movs	r2, #0
   b6436:	6840      	ldr	r0, [r0, #4]
   b6438:	4611      	mov	r1, r2
   b643a:	f7fe beef 	b.w	b521c <network_ready>

000b643e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b643e:	2200      	movs	r2, #0
   b6440:	6840      	ldr	r0, [r0, #4]
   b6442:	4611      	mov	r1, r2
   b6444:	f7fe bf0a 	b.w	b525c <network_listening>

000b6448 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6448:	2200      	movs	r2, #0
   b644a:	6840      	ldr	r0, [r0, #4]
   b644c:	4611      	mov	r1, r2
   b644e:	f7fe bf15 	b.w	b527c <network_get_listen_timeout>

000b6452 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6452:	6840      	ldr	r0, [r0, #4]
   b6454:	2200      	movs	r2, #0
   b6456:	f7fe bf09 	b.w	b526c <network_set_listen_timeout>

000b645a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b645a:	6840      	ldr	r0, [r0, #4]
   b645c:	2200      	movs	r2, #0
   b645e:	f081 0101 	eor.w	r1, r1, #1
   b6462:	f7fe bef3 	b.w	b524c <network_listen>

000b6466 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6466:	2300      	movs	r3, #0
   b6468:	6840      	ldr	r0, [r0, #4]
   b646a:	461a      	mov	r2, r3
   b646c:	4619      	mov	r1, r3
   b646e:	f7fe bee5 	b.w	b523c <network_off>

000b6472 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6472:	2300      	movs	r3, #0
   b6474:	6840      	ldr	r0, [r0, #4]
   b6476:	461a      	mov	r2, r3
   b6478:	4619      	mov	r1, r3
   b647a:	f7fe bed7 	b.w	b522c <network_on>

000b647e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b647e:	2200      	movs	r2, #0
   b6480:	6840      	ldr	r0, [r0, #4]
   b6482:	4611      	mov	r1, r2
   b6484:	f7fe beba 	b.w	b51fc <network_connecting>

000b6488 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6488:	6840      	ldr	r0, [r0, #4]
   b648a:	2200      	movs	r2, #0
   b648c:	2102      	movs	r1, #2
   b648e:	f7fe bebd 	b.w	b520c <network_disconnect>

000b6492 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6492:	2300      	movs	r3, #0
   b6494:	6840      	ldr	r0, [r0, #4]
   b6496:	461a      	mov	r2, r3
   b6498:	f7fe bea8 	b.w	b51ec <network_connect>

000b649c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b649c:	4b02      	ldr	r3, [pc, #8]	; (b64a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b649e:	2204      	movs	r2, #4
   b64a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b64a2:	4a02      	ldr	r2, [pc, #8]	; (b64ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b64a4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b64a6:	4770      	bx	lr
   b64a8:	2003e70c 	.word	0x2003e70c
   b64ac:	000b737c 	.word	0x000b737c

000b64b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b64b0:	2300      	movs	r3, #0
   b64b2:	6840      	ldr	r0, [r0, #4]
   b64b4:	461a      	mov	r2, r3
   b64b6:	f7fe be99 	b.w	b51ec <network_connect>

000b64ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b64ba:	6840      	ldr	r0, [r0, #4]
   b64bc:	2200      	movs	r2, #0
   b64be:	2102      	movs	r1, #2
   b64c0:	f7fe bea4 	b.w	b520c <network_disconnect>

000b64c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b64c4:	2200      	movs	r2, #0
   b64c6:	6840      	ldr	r0, [r0, #4]
   b64c8:	4611      	mov	r1, r2
   b64ca:	f7fe be97 	b.w	b51fc <network_connecting>

000b64ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b64ce:	2200      	movs	r2, #0
   b64d0:	6840      	ldr	r0, [r0, #4]
   b64d2:	4611      	mov	r1, r2
   b64d4:	f7fe bea2 	b.w	b521c <network_ready>

000b64d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b64d8:	2300      	movs	r3, #0
   b64da:	6840      	ldr	r0, [r0, #4]
   b64dc:	461a      	mov	r2, r3
   b64de:	4619      	mov	r1, r3
   b64e0:	f7fe bea4 	b.w	b522c <network_on>

000b64e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b64e4:	2300      	movs	r3, #0
   b64e6:	6840      	ldr	r0, [r0, #4]
   b64e8:	461a      	mov	r2, r3
   b64ea:	4619      	mov	r1, r3
   b64ec:	f7fe bea6 	b.w	b523c <network_off>

000b64f0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b64f0:	6840      	ldr	r0, [r0, #4]
   b64f2:	2100      	movs	r1, #0
   b64f4:	f7fe beca 	b.w	b528c <network_is_on>

000b64f8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b64f8:	6840      	ldr	r0, [r0, #4]
   b64fa:	2100      	movs	r1, #0
   b64fc:	f7fe bece 	b.w	b529c <network_is_off>

000b6500 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6500:	6840      	ldr	r0, [r0, #4]
   b6502:	2200      	movs	r2, #0
   b6504:	f081 0101 	eor.w	r1, r1, #1
   b6508:	f7fe bea0 	b.w	b524c <network_listen>

000b650c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b650c:	6840      	ldr	r0, [r0, #4]
   b650e:	2200      	movs	r2, #0
   b6510:	f7fe beac 	b.w	b526c <network_set_listen_timeout>

000b6514 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6514:	2200      	movs	r2, #0
   b6516:	6840      	ldr	r0, [r0, #4]
   b6518:	4611      	mov	r1, r2
   b651a:	f7fe beaf 	b.w	b527c <network_get_listen_timeout>

000b651e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b651e:	2200      	movs	r2, #0
   b6520:	6840      	ldr	r0, [r0, #4]
   b6522:	4611      	mov	r1, r2
   b6524:	f7fe be9a 	b.w	b525c <network_listening>

000b6528 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b652c:	b095      	sub	sp, #84	; 0x54
   b652e:	4614      	mov	r4, r2
   b6530:	460d      	mov	r5, r1
   b6532:	4607      	mov	r7, r0
    IPAddress addr;
   b6534:	f7ff fb40 	bl	b5bb8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6538:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b653a:	221c      	movs	r2, #28
   b653c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b653e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6540:	f000 fcf6 	bl	b6f30 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6544:	2340      	movs	r3, #64	; 0x40
   b6546:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6548:	4620      	mov	r0, r4
   b654a:	466b      	mov	r3, sp
   b654c:	aa0c      	add	r2, sp, #48	; 0x30
   b654e:	2100      	movs	r1, #0
   b6550:	f7fe fc70 	bl	b4e34 <netdb_getaddrinfo>
    if (!r) {
   b6554:	4604      	mov	r4, r0
   b6556:	2800      	cmp	r0, #0
   b6558:	d14b      	bne.n	b65f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b655a:	4602      	mov	r2, r0
   b655c:	2101      	movs	r1, #1
   b655e:	6868      	ldr	r0, [r5, #4]
   b6560:	f7fe fe5c 	bl	b521c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6564:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6566:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6568:	4622      	mov	r2, r4
   b656a:	6868      	ldr	r0, [r5, #4]
   b656c:	f7fe fe56 	bl	b521c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6570:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6572:	4681      	mov	r9, r0
        bool ok = false;
   b6574:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6576:	2e00      	cmp	r6, #0
   b6578:	d03b      	beq.n	b65f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b657a:	2900      	cmp	r1, #0
   b657c:	d139      	bne.n	b65f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b657e:	6873      	ldr	r3, [r6, #4]
   b6580:	2b02      	cmp	r3, #2
   b6582:	d003      	beq.n	b658c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6584:	2b0a      	cmp	r3, #10
   b6586:	d011      	beq.n	b65ac <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6588:	69f6      	ldr	r6, [r6, #28]
   b658a:	e7f4      	b.n	b6576 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b658c:	f1b8 0f00 	cmp.w	r8, #0
   b6590:	d0fa      	beq.n	b6588 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6592:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6594:	a806      	add	r0, sp, #24
   b6596:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6598:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b659a:	f7ff fb51 	bl	b5c40 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b659e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b65a0:	1d3c      	adds	r4, r7, #4
   b65a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b65a4:	682b      	ldr	r3, [r5, #0]
   b65a6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b65a8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b65aa:	e7ed      	b.n	b6588 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b65ac:	f1b9 0f00 	cmp.w	r9, #0
   b65b0:	d0ea      	beq.n	b6588 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b65b2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b65b4:	2210      	movs	r2, #16
   b65b6:	a801      	add	r0, sp, #4
   b65b8:	f000 fcba 	bl	b6f30 <memset>
                    a.v = 6;
   b65bc:	2306      	movs	r3, #6
   b65be:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b65c2:	ad01      	add	r5, sp, #4
   b65c4:	f104 0308 	add.w	r3, r4, #8
   b65c8:	3418      	adds	r4, #24
   b65ca:	6818      	ldr	r0, [r3, #0]
   b65cc:	6859      	ldr	r1, [r3, #4]
   b65ce:	462a      	mov	r2, r5
   b65d0:	c203      	stmia	r2!, {r0, r1}
   b65d2:	3308      	adds	r3, #8
   b65d4:	42a3      	cmp	r3, r4
   b65d6:	4615      	mov	r5, r2
   b65d8:	d1f7      	bne.n	b65ca <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b65da:	a901      	add	r1, sp, #4
   b65dc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b65de:	ad07      	add	r5, sp, #28
   b65e0:	f7ff faf8 	bl	b5bd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b65e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b65e6:	1d3c      	adds	r4, r7, #4
   b65e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b65ea:	682b      	ldr	r3, [r5, #0]
   b65ec:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b65ee:	4649      	mov	r1, r9
   b65f0:	e7ca      	b.n	b6588 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b65f2:	9800      	ldr	r0, [sp, #0]
   b65f4:	f7fe fc16 	bl	b4e24 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b65f8:	4638      	mov	r0, r7
   b65fa:	b015      	add	sp, #84	; 0x54
   b65fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6600 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6600:	4b02      	ldr	r3, [pc, #8]	; (b660c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6602:	4a03      	ldr	r2, [pc, #12]	; (b6610 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6604:	601a      	str	r2, [r3, #0]
   b6606:	2200      	movs	r2, #0
   b6608:	605a      	str	r2, [r3, #4]

} // spark
   b660a:	4770      	bx	lr
   b660c:	2003e714 	.word	0x2003e714
   b6610:	000b73b8 	.word	0x000b73b8

000b6614 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6614:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6616:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6618:	d902      	bls.n	b6620 <pinAvailable+0xc>
    return false;
   b661a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b661c:	b002      	add	sp, #8
   b661e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6620:	f1a0 030b 	sub.w	r3, r0, #11
   b6624:	2b02      	cmp	r3, #2
   b6626:	d81a      	bhi.n	b665e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6628:	4c17      	ldr	r4, [pc, #92]	; (b6688 <pinAvailable+0x74>)
   b662a:	7821      	ldrb	r1, [r4, #0]
   b662c:	f3bf 8f5b 	dmb	ish
   b6630:	f011 0101 	ands.w	r1, r1, #1
   b6634:	d10b      	bne.n	b664e <pinAvailable+0x3a>
   b6636:	4620      	mov	r0, r4
   b6638:	9101      	str	r1, [sp, #4]
   b663a:	f7fe f9bd 	bl	b49b8 <__cxa_guard_acquire>
   b663e:	9901      	ldr	r1, [sp, #4]
   b6640:	b128      	cbz	r0, b664e <pinAvailable+0x3a>
   b6642:	4812      	ldr	r0, [pc, #72]	; (b668c <pinAvailable+0x78>)
   b6644:	f7fe feb8 	bl	b53b8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6648:	4620      	mov	r0, r4
   b664a:	f7fe f9ba 	bl	b49c2 <__cxa_guard_release>
   b664e:	4b0f      	ldr	r3, [pc, #60]	; (b668c <pinAvailable+0x78>)
   b6650:	7818      	ldrb	r0, [r3, #0]
   b6652:	f7fe fd47 	bl	b50e4 <hal_spi_is_enabled>
   b6656:	2800      	cmp	r0, #0
   b6658:	d1df      	bne.n	b661a <pinAvailable+0x6>
  return true; // 'pin' is available
   b665a:	2001      	movs	r0, #1
   b665c:	e7de      	b.n	b661c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b665e:	2801      	cmp	r0, #1
   b6660:	d809      	bhi.n	b6676 <pinAvailable+0x62>
   b6662:	f000 f8ad 	bl	b67c0 <_Z19__fetch_global_Wirev>
   b6666:	2100      	movs	r1, #0
   b6668:	7c00      	ldrb	r0, [r0, #16]
   b666a:	f7fe fccb 	bl	b5004 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b666e:	f080 0001 	eor.w	r0, r0, #1
   b6672:	b2c0      	uxtb	r0, r0
   b6674:	e7d2      	b.n	b661c <pinAvailable+0x8>
   b6676:	3809      	subs	r0, #9
   b6678:	2801      	cmp	r0, #1
   b667a:	d8ee      	bhi.n	b665a <pinAvailable+0x46>
   b667c:	f000 f864 	bl	b6748 <_Z22__fetch_global_Serial1v>
   b6680:	7c00      	ldrb	r0, [r0, #16]
   b6682:	f7fe fc7f 	bl	b4f84 <hal_usart_is_enabled>
   b6686:	e7f2      	b.n	b666e <pinAvailable+0x5a>
   b6688:	2003e71c 	.word	0x2003e71c
   b668c:	2003e720 	.word	0x2003e720

000b6690 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6690:	2823      	cmp	r0, #35	; 0x23
{
   b6692:	b538      	push	{r3, r4, r5, lr}
   b6694:	4604      	mov	r4, r0
   b6696:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6698:	d80a      	bhi.n	b66b0 <pinMode+0x20>
   b669a:	29ff      	cmp	r1, #255	; 0xff
   b669c:	d008      	beq.n	b66b0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b669e:	f7ff ffb9 	bl	b6614 <pinAvailable>
   b66a2:	b128      	cbz	r0, b66b0 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b66a4:	4629      	mov	r1, r5
   b66a6:	4620      	mov	r0, r4
}
   b66a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b66ac:	f7fe bbd2 	b.w	b4e54 <hal_gpio_mode>
}
   b66b0:	bd38      	pop	{r3, r4, r5, pc}

000b66b2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b66b2:	b538      	push	{r3, r4, r5, lr}
   b66b4:	4604      	mov	r4, r0
   b66b6:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b66b8:	f7fe fbd4 	bl	b4e64 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b66bc:	28ff      	cmp	r0, #255	; 0xff
   b66be:	d010      	beq.n	b66e2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b66c0:	2806      	cmp	r0, #6
   b66c2:	d804      	bhi.n	b66ce <digitalWrite+0x1c>
   b66c4:	234d      	movs	r3, #77	; 0x4d
   b66c6:	fa23 f000 	lsr.w	r0, r3, r0
   b66ca:	07c3      	lsls	r3, r0, #31
   b66cc:	d409      	bmi.n	b66e2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b66ce:	4620      	mov	r0, r4
   b66d0:	f7ff ffa0 	bl	b6614 <pinAvailable>
   b66d4:	b128      	cbz	r0, b66e2 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b66d6:	4629      	mov	r1, r5
   b66d8:	4620      	mov	r0, r4
}
   b66da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b66de:	f7fe bbc9 	b.w	b4e74 <hal_gpio_write>
}
   b66e2:	bd38      	pop	{r3, r4, r5, pc}

000b66e4 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if PLATFORM_ID != PLATFORM_P2
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b66e4:	280d      	cmp	r0, #13
{
   b66e6:	b510      	push	{r4, lr}
   b66e8:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b66ea:	bf9c      	itt	ls
   b66ec:	340e      	addls	r4, #14
   b66ee:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b66f0:	4620      	mov	r0, r4
   b66f2:	f7ff ff8f 	bl	b6614 <pinAvailable>
   b66f6:	b150      	cbz	r0, b670e <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b66f8:	2103      	movs	r1, #3
   b66fa:	4620      	mov	r0, r4
   b66fc:	f7fe fba2 	bl	b4e44 <hal_pin_validate_function>
   b6700:	2803      	cmp	r0, #3
   b6702:	d104      	bne.n	b670e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b6704:	4620      	mov	r0, r4
}
   b6706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b670a:	f7fe bbbb 	b.w	b4e84 <hal_adc_read>
}
   b670e:	2000      	movs	r0, #0
   b6710:	bd10      	pop	{r4, pc}

000b6712 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6712:	4770      	bx	lr

000b6714 <_Z20acquireSerial1Bufferv>:
{
   b6714:	b538      	push	{r3, r4, r5, lr}
   b6716:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6718:	2514      	movs	r5, #20
   b671a:	462a      	mov	r2, r5
   b671c:	2100      	movs	r1, #0
   b671e:	f000 fc07 	bl	b6f30 <memset>
   b6722:	8025      	strh	r5, [r4, #0]
   b6724:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6726:	4907      	ldr	r1, [pc, #28]	; (b6744 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6728:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b672a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b672c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b672e:	f000 f86b 	bl	b6808 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6732:	4904      	ldr	r1, [pc, #16]	; (b6744 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6734:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6736:	4628      	mov	r0, r5
   b6738:	f000 f866 	bl	b6808 <_ZnajRKSt9nothrow_t>
    };
   b673c:	60e0      	str	r0, [r4, #12]
}
   b673e:	4620      	mov	r0, r4
   b6740:	bd38      	pop	{r3, r4, r5, pc}
   b6742:	bf00      	nop
   b6744:	000b73ec 	.word	0x000b73ec

000b6748 <_Z22__fetch_global_Serial1v>:
{
   b6748:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b674a:	4d0e      	ldr	r5, [pc, #56]	; (b6784 <_Z22__fetch_global_Serial1v+0x3c>)
   b674c:	7829      	ldrb	r1, [r5, #0]
   b674e:	f3bf 8f5b 	dmb	ish
   b6752:	f011 0401 	ands.w	r4, r1, #1
{
   b6756:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6758:	d111      	bne.n	b677e <_Z22__fetch_global_Serial1v+0x36>
   b675a:	4628      	mov	r0, r5
   b675c:	f7fe f92c 	bl	b49b8 <__cxa_guard_acquire>
   b6760:	b168      	cbz	r0, b677e <_Z22__fetch_global_Serial1v+0x36>
   b6762:	a801      	add	r0, sp, #4
   b6764:	f7ff ffd6 	bl	b6714 <_Z20acquireSerial1Bufferv>
   b6768:	aa01      	add	r2, sp, #4
   b676a:	4621      	mov	r1, r4
   b676c:	4806      	ldr	r0, [pc, #24]	; (b6788 <_Z22__fetch_global_Serial1v+0x40>)
   b676e:	f7ff fb3d 	bl	b5dec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6772:	4628      	mov	r0, r5
   b6774:	f7fe f925 	bl	b49c2 <__cxa_guard_release>
   b6778:	4804      	ldr	r0, [pc, #16]	; (b678c <_Z22__fetch_global_Serial1v+0x44>)
   b677a:	f000 fbc5 	bl	b6f08 <atexit>
    return serial1;
}
   b677e:	4802      	ldr	r0, [pc, #8]	; (b6788 <_Z22__fetch_global_Serial1v+0x40>)
   b6780:	b007      	add	sp, #28
   b6782:	bd30      	pop	{r4, r5, pc}
   b6784:	2003e728 	.word	0x2003e728
   b6788:	2003e72c 	.word	0x2003e72c
   b678c:	000b6713 	.word	0x000b6713

000b6790 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6790:	4770      	bx	lr
	...

000b6794 <_Z17acquireWireBufferv>:
{
   b6794:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6796:	2520      	movs	r5, #32
   b6798:	2314      	movs	r3, #20
{
   b679a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b679c:	6003      	str	r3, [r0, #0]
   b679e:	6085      	str	r5, [r0, #8]
   b67a0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b67a2:	4906      	ldr	r1, [pc, #24]	; (b67bc <_Z17acquireWireBufferv+0x28>)
   b67a4:	4628      	mov	r0, r5
   b67a6:	f000 f82f 	bl	b6808 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b67aa:	4904      	ldr	r1, [pc, #16]	; (b67bc <_Z17acquireWireBufferv+0x28>)
	};
   b67ac:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b67ae:	4628      	mov	r0, r5
   b67b0:	f000 f82a 	bl	b6808 <_ZnajRKSt9nothrow_t>
	};
   b67b4:	60e0      	str	r0, [r4, #12]
}
   b67b6:	4620      	mov	r0, r4
   b67b8:	bd38      	pop	{r3, r4, r5, pc}
   b67ba:	bf00      	nop
   b67bc:	000b73ec 	.word	0x000b73ec

000b67c0 <_Z19__fetch_global_Wirev>:
{
   b67c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b67c2:	4d0e      	ldr	r5, [pc, #56]	; (b67fc <_Z19__fetch_global_Wirev+0x3c>)
   b67c4:	7829      	ldrb	r1, [r5, #0]
   b67c6:	f3bf 8f5b 	dmb	ish
   b67ca:	f011 0401 	ands.w	r4, r1, #1
{
   b67ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b67d0:	d111      	bne.n	b67f6 <_Z19__fetch_global_Wirev+0x36>
   b67d2:	4628      	mov	r0, r5
   b67d4:	f7fe f8f0 	bl	b49b8 <__cxa_guard_acquire>
   b67d8:	b168      	cbz	r0, b67f6 <_Z19__fetch_global_Wirev+0x36>
   b67da:	a801      	add	r0, sp, #4
   b67dc:	f7ff ffda 	bl	b6794 <_Z17acquireWireBufferv>
   b67e0:	aa01      	add	r2, sp, #4
   b67e2:	4621      	mov	r1, r4
   b67e4:	4806      	ldr	r0, [pc, #24]	; (b6800 <_Z19__fetch_global_Wirev+0x40>)
   b67e6:	f7ff fb41 	bl	b5e6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b67ea:	4628      	mov	r0, r5
   b67ec:	f7fe f8e9 	bl	b49c2 <__cxa_guard_release>
   b67f0:	4804      	ldr	r0, [pc, #16]	; (b6804 <_Z19__fetch_global_Wirev+0x44>)
   b67f2:	f000 fb89 	bl	b6f08 <atexit>
	return wire;
}
   b67f6:	4802      	ldr	r0, [pc, #8]	; (b6800 <_Z19__fetch_global_Wirev+0x40>)
   b67f8:	b007      	add	sp, #28
   b67fa:	bd30      	pop	{r4, r5, pc}
   b67fc:	2003e744 	.word	0x2003e744
   b6800:	2003e748 	.word	0x2003e748
   b6804:	000b6791 	.word	0x000b6791

000b6808 <_ZnajRKSt9nothrow_t>:
   b6808:	f7fe b8c5 	b.w	b4996 <_Znaj>

000b680c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b680c:	4901      	ldr	r1, [pc, #4]	; (b6814 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b680e:	f000 b8f9 	b.w	b6a04 <_ZNKSt9type_infoeqERKS_>
   b6812:	bf00      	nop
   b6814:	000b7408 	.word	0x000b7408

000b6818 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6818:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b681a:	2400      	movs	r4, #0
   b681c:	2310      	movs	r3, #16
   b681e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b6822:	6803      	ldr	r3, [r0, #0]
   b6824:	4615      	mov	r5, r2
   b6826:	699e      	ldr	r6, [r3, #24]
   b6828:	6812      	ldr	r2, [r2, #0]
   b682a:	466b      	mov	r3, sp
   b682c:	e9cd 4400 	strd	r4, r4, [sp]
   b6830:	47b0      	blx	r6
   b6832:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6836:	f003 0306 	and.w	r3, r3, #6
   b683a:	2b06      	cmp	r3, #6
   b683c:	bf03      	ittte	eq
   b683e:	9b00      	ldreq	r3, [sp, #0]
   b6840:	602b      	streq	r3, [r5, #0]
   b6842:	2001      	moveq	r0, #1
   b6844:	4620      	movne	r0, r4
   b6846:	b004      	add	sp, #16
   b6848:	bd70      	pop	{r4, r5, r6, pc}

000b684a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b684a:	9800      	ldr	r0, [sp, #0]
   b684c:	4290      	cmp	r0, r2
   b684e:	bf14      	ite	ne
   b6850:	2001      	movne	r0, #1
   b6852:	2006      	moveq	r0, #6
   b6854:	4770      	bx	lr
	...

000b6858 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6858:	b510      	push	{r4, lr}
   b685a:	4b03      	ldr	r3, [pc, #12]	; (b6868 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b685c:	6003      	str	r3, [r0, #0]
   b685e:	4604      	mov	r4, r0
   b6860:	f000 f8cd 	bl	b69fe <_ZNSt9type_infoD1Ev>
   b6864:	4620      	mov	r0, r4
   b6866:	bd10      	pop	{r4, pc}
   b6868:	000b7448 	.word	0x000b7448

000b686c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b686c:	b510      	push	{r4, lr}
   b686e:	4604      	mov	r4, r0
   b6870:	f7ff fff2 	bl	b6858 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6874:	4620      	mov	r0, r4
   b6876:	2108      	movs	r1, #8
   b6878:	f7fe f88f 	bl	b499a <_ZdlPvj>
   b687c:	4620      	mov	r0, r4
   b687e:	bd10      	pop	{r4, pc}

000b6880 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6884:	461f      	mov	r7, r3
   b6886:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b688a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b688e:	4598      	cmp	r8, r3
   b6890:	4606      	mov	r6, r0
   b6892:	4615      	mov	r5, r2
   b6894:	d107      	bne.n	b68a6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6896:	9907      	ldr	r1, [sp, #28]
   b6898:	f000 f8b4 	bl	b6a04 <_ZNKSt9type_infoeqERKS_>
   b689c:	b118      	cbz	r0, b68a6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b689e:	7165      	strb	r5, [r4, #5]
   b68a0:	2000      	movs	r0, #0
   b68a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b68a6:	4639      	mov	r1, r7
   b68a8:	4630      	mov	r0, r6
   b68aa:	f000 f8ab 	bl	b6a04 <_ZNKSt9type_infoeqERKS_>
   b68ae:	2800      	cmp	r0, #0
   b68b0:	d0f6      	beq.n	b68a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b68b2:	2301      	movs	r3, #1
   b68b4:	f8c4 8000 	str.w	r8, [r4]
   b68b8:	7125      	strb	r5, [r4, #4]
   b68ba:	71a3      	strb	r3, [r4, #6]
   b68bc:	e7f0      	b.n	b68a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b68be <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b68be:	b538      	push	{r3, r4, r5, lr}
   b68c0:	4615      	mov	r5, r2
   b68c2:	461c      	mov	r4, r3
   b68c4:	f000 f89e 	bl	b6a04 <_ZNKSt9type_infoeqERKS_>
   b68c8:	b120      	cbz	r0, b68d4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b68ca:	2308      	movs	r3, #8
   b68cc:	60e3      	str	r3, [r4, #12]
   b68ce:	2306      	movs	r3, #6
   b68d0:	6025      	str	r5, [r4, #0]
   b68d2:	7123      	strb	r3, [r4, #4]
   b68d4:	bd38      	pop	{r3, r4, r5, pc}

000b68d6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b68d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b68d8:	4605      	mov	r5, r0
   b68da:	460c      	mov	r4, r1
   b68dc:	9201      	str	r2, [sp, #4]
   b68de:	461e      	mov	r6, r3
   b68e0:	f000 f890 	bl	b6a04 <_ZNKSt9type_infoeqERKS_>
   b68e4:	b950      	cbnz	r0, b68fc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b68e6:	2e03      	cmp	r6, #3
   b68e8:	d808      	bhi.n	b68fc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b68ea:	6823      	ldr	r3, [r4, #0]
   b68ec:	9a01      	ldr	r2, [sp, #4]
   b68ee:	695b      	ldr	r3, [r3, #20]
   b68f0:	4629      	mov	r1, r5
   b68f2:	4620      	mov	r0, r4
   b68f4:	b002      	add	sp, #8
   b68f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b68fa:	4718      	bx	r3
   b68fc:	b002      	add	sp, #8
   b68fe:	bd70      	pop	{r4, r5, r6, pc}

000b6900 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6900:	b510      	push	{r4, lr}
   b6902:	4b03      	ldr	r3, [pc, #12]	; (b6910 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6904:	6003      	str	r3, [r0, #0]
   b6906:	4604      	mov	r4, r0
   b6908:	f7ff ffa6 	bl	b6858 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b690c:	4620      	mov	r0, r4
   b690e:	bd10      	pop	{r4, pc}
   b6910:	000b74a8 	.word	0x000b74a8

000b6914 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6914:	b510      	push	{r4, lr}
   b6916:	4604      	mov	r4, r0
   b6918:	f7ff fff2 	bl	b6900 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b691c:	4620      	mov	r0, r4
   b691e:	210c      	movs	r1, #12
   b6920:	f7fe f83b 	bl	b499a <_ZdlPvj>
   b6924:	4620      	mov	r0, r4
   b6926:	bd10      	pop	{r4, pc}

000b6928 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b692a:	9f08      	ldr	r7, [sp, #32]
   b692c:	4297      	cmp	r7, r2
   b692e:	4605      	mov	r5, r0
   b6930:	460e      	mov	r6, r1
   b6932:	4614      	mov	r4, r2
   b6934:	d00a      	beq.n	b694c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6936:	68a8      	ldr	r0, [r5, #8]
   b6938:	6802      	ldr	r2, [r0, #0]
   b693a:	9708      	str	r7, [sp, #32]
   b693c:	6a15      	ldr	r5, [r2, #32]
   b693e:	4631      	mov	r1, r6
   b6940:	4622      	mov	r2, r4
   b6942:	46ac      	mov	ip, r5
   b6944:	b003      	add	sp, #12
   b6946:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b694a:	4760      	bx	ip
   b694c:	4619      	mov	r1, r3
   b694e:	9301      	str	r3, [sp, #4]
   b6950:	f000 f858 	bl	b6a04 <_ZNKSt9type_infoeqERKS_>
   b6954:	9b01      	ldr	r3, [sp, #4]
   b6956:	2800      	cmp	r0, #0
   b6958:	d0ed      	beq.n	b6936 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b695a:	2006      	movs	r0, #6
   b695c:	b003      	add	sp, #12
   b695e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6960 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6960:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6964:	460d      	mov	r5, r1
   b6966:	4619      	mov	r1, r3
   b6968:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b696c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6970:	4681      	mov	r9, r0
   b6972:	4617      	mov	r7, r2
   b6974:	4698      	mov	r8, r3
   b6976:	f000 f845 	bl	b6a04 <_ZNKSt9type_infoeqERKS_>
   b697a:	b190      	cbz	r0, b69a2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b697c:	2d00      	cmp	r5, #0
   b697e:	6034      	str	r4, [r6, #0]
   b6980:	7137      	strb	r7, [r6, #4]
   b6982:	db09      	blt.n	b6998 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6984:	1961      	adds	r1, r4, r5
   b6986:	458a      	cmp	sl, r1
   b6988:	bf0c      	ite	eq
   b698a:	2106      	moveq	r1, #6
   b698c:	2101      	movne	r1, #1
   b698e:	71b1      	strb	r1, [r6, #6]
   b6990:	2000      	movs	r0, #0
   b6992:	b001      	add	sp, #4
   b6994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6998:	3502      	adds	r5, #2
   b699a:	d1f9      	bne.n	b6990 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b699c:	2301      	movs	r3, #1
   b699e:	71b3      	strb	r3, [r6, #6]
   b69a0:	e7f6      	b.n	b6990 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b69a2:	4554      	cmp	r4, sl
   b69a4:	d106      	bne.n	b69b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b69a6:	4659      	mov	r1, fp
   b69a8:	4648      	mov	r0, r9
   b69aa:	f000 f82b 	bl	b6a04 <_ZNKSt9type_infoeqERKS_>
   b69ae:	b108      	cbz	r0, b69b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b69b0:	7177      	strb	r7, [r6, #5]
   b69b2:	e7ed      	b.n	b6990 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b69b4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b69b8:	6803      	ldr	r3, [r0, #0]
   b69ba:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b69be:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b69c2:	69dc      	ldr	r4, [r3, #28]
   b69c4:	463a      	mov	r2, r7
   b69c6:	4643      	mov	r3, r8
   b69c8:	4629      	mov	r1, r5
   b69ca:	46a4      	mov	ip, r4
   b69cc:	b001      	add	sp, #4
   b69ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b69d2:	4760      	bx	ip

000b69d4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b69d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b69d8:	4607      	mov	r7, r0
   b69da:	460c      	mov	r4, r1
   b69dc:	4615      	mov	r5, r2
   b69de:	461e      	mov	r6, r3
   b69e0:	f7ff ff6d 	bl	b68be <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b69e4:	b948      	cbnz	r0, b69fa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b69e6:	68b8      	ldr	r0, [r7, #8]
   b69e8:	6803      	ldr	r3, [r0, #0]
   b69ea:	699f      	ldr	r7, [r3, #24]
   b69ec:	462a      	mov	r2, r5
   b69ee:	4633      	mov	r3, r6
   b69f0:	4621      	mov	r1, r4
   b69f2:	46bc      	mov	ip, r7
   b69f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b69f8:	4760      	bx	ip
   b69fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b69fe <_ZNSt9type_infoD1Ev>:
   b69fe:	4770      	bx	lr

000b6a00 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6a00:	2000      	movs	r0, #0
   b6a02:	4770      	bx	lr

000b6a04 <_ZNKSt9type_infoeqERKS_>:
   b6a04:	4281      	cmp	r1, r0
   b6a06:	b508      	push	{r3, lr}
   b6a08:	d00e      	beq.n	b6a28 <_ZNKSt9type_infoeqERKS_+0x24>
   b6a0a:	6840      	ldr	r0, [r0, #4]
   b6a0c:	7803      	ldrb	r3, [r0, #0]
   b6a0e:	2b2a      	cmp	r3, #42	; 0x2a
   b6a10:	d00c      	beq.n	b6a2c <_ZNKSt9type_infoeqERKS_+0x28>
   b6a12:	6849      	ldr	r1, [r1, #4]
   b6a14:	780b      	ldrb	r3, [r1, #0]
   b6a16:	2b2a      	cmp	r3, #42	; 0x2a
   b6a18:	bf08      	it	eq
   b6a1a:	3101      	addeq	r1, #1
   b6a1c:	f7fd ff6c 	bl	b48f8 <strcmp>
   b6a20:	fab0 f080 	clz	r0, r0
   b6a24:	0940      	lsrs	r0, r0, #5
   b6a26:	bd08      	pop	{r3, pc}
   b6a28:	2001      	movs	r0, #1
   b6a2a:	e7fc      	b.n	b6a26 <_ZNKSt9type_infoeqERKS_+0x22>
   b6a2c:	2000      	movs	r0, #0
   b6a2e:	e7fa      	b.n	b6a26 <_ZNKSt9type_infoeqERKS_+0x22>

000b6a30 <log>:
   b6a30:	b538      	push	{r3, r4, r5, lr}
   b6a32:	ed2d 8b02 	vpush	{d8}
   b6a36:	ec55 4b10 	vmov	r4, r5, d0
   b6a3a:	f000 f841 	bl	b6ac0 <__ieee754_log>
   b6a3e:	4b1e      	ldr	r3, [pc, #120]	; (b6ab8 <log+0x88>)
   b6a40:	eeb0 8a40 	vmov.f32	s16, s0
   b6a44:	eef0 8a60 	vmov.f32	s17, s1
   b6a48:	f993 3000 	ldrsb.w	r3, [r3]
   b6a4c:	3301      	adds	r3, #1
   b6a4e:	d01a      	beq.n	b6a86 <log+0x56>
   b6a50:	4622      	mov	r2, r4
   b6a52:	462b      	mov	r3, r5
   b6a54:	4620      	mov	r0, r4
   b6a56:	4629      	mov	r1, r5
   b6a58:	f7fd ff38 	bl	b48cc <__aeabi_dcmpun>
   b6a5c:	b998      	cbnz	r0, b6a86 <log+0x56>
   b6a5e:	2200      	movs	r2, #0
   b6a60:	2300      	movs	r3, #0
   b6a62:	4620      	mov	r0, r4
   b6a64:	4629      	mov	r1, r5
   b6a66:	f7fd ff27 	bl	b48b8 <__aeabi_dcmpgt>
   b6a6a:	b960      	cbnz	r0, b6a86 <log+0x56>
   b6a6c:	2200      	movs	r2, #0
   b6a6e:	2300      	movs	r3, #0
   b6a70:	4620      	mov	r0, r4
   b6a72:	4629      	mov	r1, r5
   b6a74:	f7fd fef8 	bl	b4868 <__aeabi_dcmpeq>
   b6a78:	b160      	cbz	r0, b6a94 <log+0x64>
   b6a7a:	f7fe fc47 	bl	b530c <__errno>
   b6a7e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; b6ab0 <log+0x80>
   b6a82:	2322      	movs	r3, #34	; 0x22
   b6a84:	6003      	str	r3, [r0, #0]
   b6a86:	eeb0 0a48 	vmov.f32	s0, s16
   b6a8a:	eef0 0a68 	vmov.f32	s1, s17
   b6a8e:	ecbd 8b02 	vpop	{d8}
   b6a92:	bd38      	pop	{r3, r4, r5, pc}
   b6a94:	f7fe fc3a 	bl	b530c <__errno>
   b6a98:	ecbd 8b02 	vpop	{d8}
   b6a9c:	4603      	mov	r3, r0
   b6a9e:	2221      	movs	r2, #33	; 0x21
   b6aa0:	601a      	str	r2, [r3, #0]
   b6aa2:	4806      	ldr	r0, [pc, #24]	; (b6abc <log+0x8c>)
   b6aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6aa8:	f000 ba26 	b.w	b6ef8 <nan>
   b6aac:	f3af 8000 	nop.w
   b6ab0:	00000000 	.word	0x00000000
   b6ab4:	fff00000 	.word	0xfff00000
   b6ab8:	2003e5b4 	.word	0x2003e5b4
   b6abc:	000b74e4 	.word	0x000b74e4

000b6ac0 <__ieee754_log>:
   b6ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ac4:	ec51 0b10 	vmov	r0, r1, d0
   b6ac8:	ed2d 8b02 	vpush	{d8}
   b6acc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6ad0:	b085      	sub	sp, #20
   b6ad2:	460f      	mov	r7, r1
   b6ad4:	da58      	bge.n	b6b88 <__ieee754_log+0xc8>
   b6ad6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b6ada:	4303      	orrs	r3, r0
   b6adc:	ee10 2a10 	vmov	r2, s0
   b6ae0:	f000 80fc 	beq.w	b6cdc <__ieee754_log+0x21c>
   b6ae4:	2900      	cmp	r1, #0
   b6ae6:	f2c0 813c 	blt.w	b6d62 <__ieee754_log+0x2a2>
   b6aea:	4be1      	ldr	r3, [pc, #900]	; (b6e70 <__ieee754_log+0x3b0>)
   b6aec:	2200      	movs	r2, #0
   b6aee:	f7fd fc53 	bl	b4398 <__aeabi_dmul>
   b6af2:	4be0      	ldr	r3, [pc, #896]	; (b6e74 <__ieee754_log+0x3b4>)
   b6af4:	460f      	mov	r7, r1
   b6af6:	429f      	cmp	r7, r3
   b6af8:	f06f 0235 	mvn.w	r2, #53	; 0x35
   b6afc:	dc49      	bgt.n	b6b92 <__ieee754_log+0xd2>
   b6afe:	153e      	asrs	r6, r7, #20
   b6b00:	f3c7 0713 	ubfx	r7, r7, #0, #20
   b6b04:	f507 2315 	add.w	r3, r7, #610304	; 0x95000
   b6b08:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   b6b0c:	f603 7364 	addw	r3, r3, #3940	; 0xf64
   b6b10:	4416      	add	r6, r2
   b6b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
   b6b16:	eb06 5613 	add.w	r6, r6, r3, lsr #20
   b6b1a:	f083 537f 	eor.w	r3, r3, #1069547520	; 0x3fc00000
   b6b1e:	f483 1340 	eor.w	r3, r3, #3145728	; 0x300000
   b6b22:	ea43 0107 	orr.w	r1, r3, r7
   b6b26:	2200      	movs	r2, #0
   b6b28:	4bd3      	ldr	r3, [pc, #844]	; (b6e78 <__ieee754_log+0x3b8>)
   b6b2a:	f7fd fa7d 	bl	b4028 <__aeabi_dsub>
   b6b2e:	1cbb      	adds	r3, r7, #2
   b6b30:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b6b34:	2b02      	cmp	r3, #2
   b6b36:	4682      	mov	sl, r0
   b6b38:	468b      	mov	fp, r1
   b6b3a:	dc35      	bgt.n	b6ba8 <__ieee754_log+0xe8>
   b6b3c:	2200      	movs	r2, #0
   b6b3e:	2300      	movs	r3, #0
   b6b40:	f7fd fe92 	bl	b4868 <__aeabi_dcmpeq>
   b6b44:	2800      	cmp	r0, #0
   b6b46:	f000 80d6 	beq.w	b6cf6 <__ieee754_log+0x236>
   b6b4a:	2e00      	cmp	r6, #0
   b6b4c:	f000 8160 	beq.w	b6e10 <__ieee754_log+0x350>
   b6b50:	4630      	mov	r0, r6
   b6b52:	f7fd fbb7 	bl	b42c4 <__aeabi_i2d>
   b6b56:	a3b0      	add	r3, pc, #704	; (adr r3, b6e18 <__ieee754_log+0x358>)
   b6b58:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b5c:	4606      	mov	r6, r0
   b6b5e:	460f      	mov	r7, r1
   b6b60:	f7fd fc1a 	bl	b4398 <__aeabi_dmul>
   b6b64:	a3ae      	add	r3, pc, #696	; (adr r3, b6e20 <__ieee754_log+0x360>)
   b6b66:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b6a:	4604      	mov	r4, r0
   b6b6c:	460d      	mov	r5, r1
   b6b6e:	4630      	mov	r0, r6
   b6b70:	4639      	mov	r1, r7
   b6b72:	f7fd fc11 	bl	b4398 <__aeabi_dmul>
   b6b76:	4602      	mov	r2, r0
   b6b78:	460b      	mov	r3, r1
   b6b7a:	4620      	mov	r0, r4
   b6b7c:	4629      	mov	r1, r5
   b6b7e:	f7fd fa55 	bl	b402c <__adddf3>
   b6b82:	ec41 0b10 	vmov	d0, r0, r1
   b6b86:	e00a      	b.n	b6b9e <__ieee754_log+0xde>
   b6b88:	4bba      	ldr	r3, [pc, #744]	; (b6e74 <__ieee754_log+0x3b4>)
   b6b8a:	429f      	cmp	r7, r3
   b6b8c:	f04f 0200 	mov.w	r2, #0
   b6b90:	ddb5      	ble.n	b6afe <__ieee754_log+0x3e>
   b6b92:	4602      	mov	r2, r0
   b6b94:	460b      	mov	r3, r1
   b6b96:	f7fd fa49 	bl	b402c <__adddf3>
   b6b9a:	ec41 0b10 	vmov	d0, r0, r1
   b6b9e:	b005      	add	sp, #20
   b6ba0:	ecbd 8b02 	vpop	{d8}
   b6ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6ba8:	f5a7 23c2 	sub.w	r3, r7, #397312	; 0x61000
   b6bac:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
   b6bb0:	9301      	str	r3, [sp, #4]
   b6bb2:	2200      	movs	r2, #0
   b6bb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b6bb8:	f7fd fa38 	bl	b402c <__adddf3>
   b6bbc:	4602      	mov	r2, r0
   b6bbe:	460b      	mov	r3, r1
   b6bc0:	4650      	mov	r0, sl
   b6bc2:	4659      	mov	r1, fp
   b6bc4:	f7fd fd12 	bl	b45ec <__aeabi_ddiv>
   b6bc8:	ec41 0b18 	vmov	d8, r0, r1
   b6bcc:	4630      	mov	r0, r6
   b6bce:	f7fd fb79 	bl	b42c4 <__aeabi_i2d>
   b6bd2:	ec53 2b18 	vmov	r2, r3, d8
   b6bd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b6bda:	ec51 0b18 	vmov	r0, r1, d8
   b6bde:	f7fd fbdb 	bl	b4398 <__aeabi_dmul>
   b6be2:	4602      	mov	r2, r0
   b6be4:	460b      	mov	r3, r1
   b6be6:	4680      	mov	r8, r0
   b6be8:	4689      	mov	r9, r1
   b6bea:	f7fd fbd5 	bl	b4398 <__aeabi_dmul>
   b6bee:	a38e      	add	r3, pc, #568	; (adr r3, b6e28 <__ieee754_log+0x368>)
   b6bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6bf4:	4604      	mov	r4, r0
   b6bf6:	460d      	mov	r5, r1
   b6bf8:	f7fd fbce 	bl	b4398 <__aeabi_dmul>
   b6bfc:	a38c      	add	r3, pc, #560	; (adr r3, b6e30 <__ieee754_log+0x370>)
   b6bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6c02:	f7fd fa13 	bl	b402c <__adddf3>
   b6c06:	4622      	mov	r2, r4
   b6c08:	462b      	mov	r3, r5
   b6c0a:	f7fd fbc5 	bl	b4398 <__aeabi_dmul>
   b6c0e:	a38a      	add	r3, pc, #552	; (adr r3, b6e38 <__ieee754_log+0x378>)
   b6c10:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6c14:	f7fd fa0a 	bl	b402c <__adddf3>
   b6c18:	4622      	mov	r2, r4
   b6c1a:	462b      	mov	r3, r5
   b6c1c:	f7fd fbbc 	bl	b4398 <__aeabi_dmul>
   b6c20:	a387      	add	r3, pc, #540	; (adr r3, b6e40 <__ieee754_log+0x380>)
   b6c22:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6c26:	f7fd fa01 	bl	b402c <__adddf3>
   b6c2a:	4642      	mov	r2, r8
   b6c2c:	464b      	mov	r3, r9
   b6c2e:	f7fd fbb3 	bl	b4398 <__aeabi_dmul>
   b6c32:	a385      	add	r3, pc, #532	; (adr r3, b6e48 <__ieee754_log+0x388>)
   b6c34:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6c38:	4680      	mov	r8, r0
   b6c3a:	4689      	mov	r9, r1
   b6c3c:	4620      	mov	r0, r4
   b6c3e:	4629      	mov	r1, r5
   b6c40:	f7fd fbaa 	bl	b4398 <__aeabi_dmul>
   b6c44:	a382      	add	r3, pc, #520	; (adr r3, b6e50 <__ieee754_log+0x390>)
   b6c46:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6c4a:	f7fd f9ef 	bl	b402c <__adddf3>
   b6c4e:	4622      	mov	r2, r4
   b6c50:	462b      	mov	r3, r5
   b6c52:	f7fd fba1 	bl	b4398 <__aeabi_dmul>
   b6c56:	a380      	add	r3, pc, #512	; (adr r3, b6e58 <__ieee754_log+0x398>)
   b6c58:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6c5c:	f7fd f9e6 	bl	b402c <__adddf3>
   b6c60:	4622      	mov	r2, r4
   b6c62:	462b      	mov	r3, r5
   b6c64:	f7fd fb98 	bl	b4398 <__aeabi_dmul>
   b6c68:	460b      	mov	r3, r1
   b6c6a:	4602      	mov	r2, r0
   b6c6c:	4649      	mov	r1, r9
   b6c6e:	4640      	mov	r0, r8
   b6c70:	f7fd f9dc 	bl	b402c <__adddf3>
   b6c74:	f5c7 27d7 	rsb	r7, r7, #440320	; 0x6b800
   b6c78:	9b01      	ldr	r3, [sp, #4]
   b6c7a:	3751      	adds	r7, #81	; 0x51
   b6c7c:	431f      	orrs	r7, r3
   b6c7e:	2f00      	cmp	r7, #0
   b6c80:	4680      	mov	r8, r0
   b6c82:	4689      	mov	r9, r1
   b6c84:	dd5f      	ble.n	b6d46 <__ieee754_log+0x286>
   b6c86:	4b7d      	ldr	r3, [pc, #500]	; (b6e7c <__ieee754_log+0x3bc>)
   b6c88:	2200      	movs	r2, #0
   b6c8a:	4650      	mov	r0, sl
   b6c8c:	4659      	mov	r1, fp
   b6c8e:	f7fd fb83 	bl	b4398 <__aeabi_dmul>
   b6c92:	4652      	mov	r2, sl
   b6c94:	465b      	mov	r3, fp
   b6c96:	f7fd fb7f 	bl	b4398 <__aeabi_dmul>
   b6c9a:	4604      	mov	r4, r0
   b6c9c:	460d      	mov	r5, r1
   b6c9e:	2e00      	cmp	r6, #0
   b6ca0:	d169      	bne.n	b6d76 <__ieee754_log+0x2b6>
   b6ca2:	4622      	mov	r2, r4
   b6ca4:	462b      	mov	r3, r5
   b6ca6:	4640      	mov	r0, r8
   b6ca8:	4649      	mov	r1, r9
   b6caa:	f7fd f9bf 	bl	b402c <__adddf3>
   b6cae:	ec53 2b18 	vmov	r2, r3, d8
   b6cb2:	f7fd fb71 	bl	b4398 <__aeabi_dmul>
   b6cb6:	4602      	mov	r2, r0
   b6cb8:	460b      	mov	r3, r1
   b6cba:	4620      	mov	r0, r4
   b6cbc:	4629      	mov	r1, r5
   b6cbe:	f7fd f9b3 	bl	b4028 <__aeabi_dsub>
   b6cc2:	4602      	mov	r2, r0
   b6cc4:	460b      	mov	r3, r1
   b6cc6:	4650      	mov	r0, sl
   b6cc8:	4659      	mov	r1, fp
   b6cca:	f7fd f9ad 	bl	b4028 <__aeabi_dsub>
   b6cce:	ec41 0b10 	vmov	d0, r0, r1
   b6cd2:	b005      	add	sp, #20
   b6cd4:	ecbd 8b02 	vpop	{d8}
   b6cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6cdc:	2200      	movs	r2, #0
   b6cde:	2300      	movs	r3, #0
   b6ce0:	4967      	ldr	r1, [pc, #412]	; (b6e80 <__ieee754_log+0x3c0>)
   b6ce2:	2000      	movs	r0, #0
   b6ce4:	f7fd fc82 	bl	b45ec <__aeabi_ddiv>
   b6ce8:	ec41 0b10 	vmov	d0, r0, r1
   b6cec:	b005      	add	sp, #20
   b6cee:	ecbd 8b02 	vpop	{d8}
   b6cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6cf6:	a35a      	add	r3, pc, #360	; (adr r3, b6e60 <__ieee754_log+0x3a0>)
   b6cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6cfc:	4650      	mov	r0, sl
   b6cfe:	4659      	mov	r1, fp
   b6d00:	f7fd fb4a 	bl	b4398 <__aeabi_dmul>
   b6d04:	4602      	mov	r2, r0
   b6d06:	460b      	mov	r3, r1
   b6d08:	2000      	movs	r0, #0
   b6d0a:	495c      	ldr	r1, [pc, #368]	; (b6e7c <__ieee754_log+0x3bc>)
   b6d0c:	f7fd f98c 	bl	b4028 <__aeabi_dsub>
   b6d10:	4652      	mov	r2, sl
   b6d12:	4604      	mov	r4, r0
   b6d14:	460d      	mov	r5, r1
   b6d16:	465b      	mov	r3, fp
   b6d18:	4650      	mov	r0, sl
   b6d1a:	4659      	mov	r1, fp
   b6d1c:	f7fd fb3c 	bl	b4398 <__aeabi_dmul>
   b6d20:	4602      	mov	r2, r0
   b6d22:	460b      	mov	r3, r1
   b6d24:	4620      	mov	r0, r4
   b6d26:	4629      	mov	r1, r5
   b6d28:	f7fd fb36 	bl	b4398 <__aeabi_dmul>
   b6d2c:	4604      	mov	r4, r0
   b6d2e:	460d      	mov	r5, r1
   b6d30:	2e00      	cmp	r6, #0
   b6d32:	d159      	bne.n	b6de8 <__ieee754_log+0x328>
   b6d34:	4602      	mov	r2, r0
   b6d36:	460b      	mov	r3, r1
   b6d38:	4650      	mov	r0, sl
   b6d3a:	4659      	mov	r1, fp
   b6d3c:	f7fd f974 	bl	b4028 <__aeabi_dsub>
   b6d40:	ec41 0b10 	vmov	d0, r0, r1
   b6d44:	e72b      	b.n	b6b9e <__ieee754_log+0xde>
   b6d46:	2e00      	cmp	r6, #0
   b6d48:	f040 809c 	bne.w	b6e84 <__ieee754_log+0x3c4>
   b6d4c:	4602      	mov	r2, r0
   b6d4e:	460b      	mov	r3, r1
   b6d50:	4650      	mov	r0, sl
   b6d52:	4659      	mov	r1, fp
   b6d54:	f7fd f968 	bl	b4028 <__aeabi_dsub>
   b6d58:	ec53 2b18 	vmov	r2, r3, d8
   b6d5c:	f7fd fb1c 	bl	b4398 <__aeabi_dmul>
   b6d60:	e7af      	b.n	b6cc2 <__ieee754_log+0x202>
   b6d62:	460b      	mov	r3, r1
   b6d64:	f7fd f960 	bl	b4028 <__aeabi_dsub>
   b6d68:	2200      	movs	r2, #0
   b6d6a:	2300      	movs	r3, #0
   b6d6c:	f7fd fc3e 	bl	b45ec <__aeabi_ddiv>
   b6d70:	ec41 0b10 	vmov	d0, r0, r1
   b6d74:	e713      	b.n	b6b9e <__ieee754_log+0xde>
   b6d76:	a328      	add	r3, pc, #160	; (adr r3, b6e18 <__ieee754_log+0x358>)
   b6d78:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b6d80:	f7fd fb0a 	bl	b4398 <__aeabi_dmul>
   b6d84:	4622      	mov	r2, r4
   b6d86:	462b      	mov	r3, r5
   b6d88:	4606      	mov	r6, r0
   b6d8a:	460f      	mov	r7, r1
   b6d8c:	4640      	mov	r0, r8
   b6d8e:	4649      	mov	r1, r9
   b6d90:	f7fd f94c 	bl	b402c <__adddf3>
   b6d94:	ec53 2b18 	vmov	r2, r3, d8
   b6d98:	f7fd fafe 	bl	b4398 <__aeabi_dmul>
   b6d9c:	a320      	add	r3, pc, #128	; (adr r3, b6e20 <__ieee754_log+0x360>)
   b6d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6da2:	4680      	mov	r8, r0
   b6da4:	4689      	mov	r9, r1
   b6da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b6daa:	f7fd faf5 	bl	b4398 <__aeabi_dmul>
   b6dae:	4602      	mov	r2, r0
   b6db0:	460b      	mov	r3, r1
   b6db2:	4640      	mov	r0, r8
   b6db4:	4649      	mov	r1, r9
   b6db6:	f7fd f939 	bl	b402c <__adddf3>
   b6dba:	4602      	mov	r2, r0
   b6dbc:	460b      	mov	r3, r1
   b6dbe:	4620      	mov	r0, r4
   b6dc0:	4629      	mov	r1, r5
   b6dc2:	f7fd f931 	bl	b4028 <__aeabi_dsub>
   b6dc6:	4652      	mov	r2, sl
   b6dc8:	465b      	mov	r3, fp
   b6dca:	f7fd f92d 	bl	b4028 <__aeabi_dsub>
   b6dce:	4602      	mov	r2, r0
   b6dd0:	460b      	mov	r3, r1
   b6dd2:	4630      	mov	r0, r6
   b6dd4:	4639      	mov	r1, r7
   b6dd6:	f7fd f927 	bl	b4028 <__aeabi_dsub>
   b6dda:	ec41 0b10 	vmov	d0, r0, r1
   b6dde:	b005      	add	sp, #20
   b6de0:	ecbd 8b02 	vpop	{d8}
   b6de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6de8:	4630      	mov	r0, r6
   b6dea:	f7fd fa6b 	bl	b42c4 <__aeabi_i2d>
   b6dee:	a30a      	add	r3, pc, #40	; (adr r3, b6e18 <__ieee754_log+0x358>)
   b6df0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6df4:	4680      	mov	r8, r0
   b6df6:	4689      	mov	r9, r1
   b6df8:	f7fd face 	bl	b4398 <__aeabi_dmul>
   b6dfc:	a308      	add	r3, pc, #32	; (adr r3, b6e20 <__ieee754_log+0x360>)
   b6dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6e02:	4606      	mov	r6, r0
   b6e04:	460f      	mov	r7, r1
   b6e06:	4640      	mov	r0, r8
   b6e08:	4649      	mov	r1, r9
   b6e0a:	f7fd fac5 	bl	b4398 <__aeabi_dmul>
   b6e0e:	e7d4      	b.n	b6dba <__ieee754_log+0x2fa>
   b6e10:	ed9f 0b15 	vldr	d0, [pc, #84]	; b6e68 <__ieee754_log+0x3a8>
   b6e14:	e6c3      	b.n	b6b9e <__ieee754_log+0xde>
   b6e16:	bf00      	nop
   b6e18:	fee00000 	.word	0xfee00000
   b6e1c:	3fe62e42 	.word	0x3fe62e42
   b6e20:	35793c76 	.word	0x35793c76
   b6e24:	3dea39ef 	.word	0x3dea39ef
   b6e28:	df3e5244 	.word	0xdf3e5244
   b6e2c:	3fc2f112 	.word	0x3fc2f112
   b6e30:	96cb03de 	.word	0x96cb03de
   b6e34:	3fc74664 	.word	0x3fc74664
   b6e38:	94229359 	.word	0x94229359
   b6e3c:	3fd24924 	.word	0x3fd24924
   b6e40:	55555593 	.word	0x55555593
   b6e44:	3fe55555 	.word	0x3fe55555
   b6e48:	d078c69f 	.word	0xd078c69f
   b6e4c:	3fc39a09 	.word	0x3fc39a09
   b6e50:	1d8e78af 	.word	0x1d8e78af
   b6e54:	3fcc71c5 	.word	0x3fcc71c5
   b6e58:	9997fa04 	.word	0x9997fa04
   b6e5c:	3fd99999 	.word	0x3fd99999
   b6e60:	55555555 	.word	0x55555555
   b6e64:	3fd55555 	.word	0x3fd55555
	...
   b6e70:	43500000 	.word	0x43500000
   b6e74:	7fefffff 	.word	0x7fefffff
   b6e78:	3ff00000 	.word	0x3ff00000
   b6e7c:	3fe00000 	.word	0x3fe00000
   b6e80:	c3500000 	.word	0xc3500000
   b6e84:	a318      	add	r3, pc, #96	; (adr r3, b6ee8 <__ieee754_log+0x428>)
   b6e86:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6e8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b6e8e:	f7fd fa83 	bl	b4398 <__aeabi_dmul>
   b6e92:	4642      	mov	r2, r8
   b6e94:	464b      	mov	r3, r9
   b6e96:	4604      	mov	r4, r0
   b6e98:	460d      	mov	r5, r1
   b6e9a:	4650      	mov	r0, sl
   b6e9c:	4659      	mov	r1, fp
   b6e9e:	f7fd f8c3 	bl	b4028 <__aeabi_dsub>
   b6ea2:	ec53 2b18 	vmov	r2, r3, d8
   b6ea6:	f7fd fa77 	bl	b4398 <__aeabi_dmul>
   b6eaa:	a311      	add	r3, pc, #68	; (adr r3, b6ef0 <__ieee754_log+0x430>)
   b6eac:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6eb0:	4606      	mov	r6, r0
   b6eb2:	460f      	mov	r7, r1
   b6eb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b6eb8:	f7fd fa6e 	bl	b4398 <__aeabi_dmul>
   b6ebc:	4602      	mov	r2, r0
   b6ebe:	460b      	mov	r3, r1
   b6ec0:	4630      	mov	r0, r6
   b6ec2:	4639      	mov	r1, r7
   b6ec4:	f7fd f8b0 	bl	b4028 <__aeabi_dsub>
   b6ec8:	4652      	mov	r2, sl
   b6eca:	465b      	mov	r3, fp
   b6ecc:	f7fd f8ac 	bl	b4028 <__aeabi_dsub>
   b6ed0:	4602      	mov	r2, r0
   b6ed2:	460b      	mov	r3, r1
   b6ed4:	4620      	mov	r0, r4
   b6ed6:	4629      	mov	r1, r5
   b6ed8:	f7fd f8a6 	bl	b4028 <__aeabi_dsub>
   b6edc:	ec41 0b10 	vmov	d0, r0, r1
   b6ee0:	e65d      	b.n	b6b9e <__ieee754_log+0xde>
   b6ee2:	bf00      	nop
   b6ee4:	f3af 8000 	nop.w
   b6ee8:	fee00000 	.word	0xfee00000
   b6eec:	3fe62e42 	.word	0x3fe62e42
   b6ef0:	35793c76 	.word	0x35793c76
   b6ef4:	3dea39ef 	.word	0x3dea39ef

000b6ef8 <nan>:
   b6ef8:	ed9f 0b01 	vldr	d0, [pc, #4]	; b6f00 <nan+0x8>
   b6efc:	4770      	bx	lr
   b6efe:	bf00      	nop
   b6f00:	00000000 	.word	0x00000000
   b6f04:	7ff80000 	.word	0x7ff80000

000b6f08 <atexit>:
   b6f08:	2300      	movs	r3, #0
   b6f0a:	4601      	mov	r1, r0
   b6f0c:	461a      	mov	r2, r3
   b6f0e:	4618      	mov	r0, r3
   b6f10:	f000 b84c 	b.w	b6fac <__register_exitproc>

000b6f14 <memcpy>:
   b6f14:	440a      	add	r2, r1
   b6f16:	4291      	cmp	r1, r2
   b6f18:	f100 33ff 	add.w	r3, r0, #4294967295
   b6f1c:	d100      	bne.n	b6f20 <memcpy+0xc>
   b6f1e:	4770      	bx	lr
   b6f20:	b510      	push	{r4, lr}
   b6f22:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6f26:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6f2a:	4291      	cmp	r1, r2
   b6f2c:	d1f9      	bne.n	b6f22 <memcpy+0xe>
   b6f2e:	bd10      	pop	{r4, pc}

000b6f30 <memset>:
   b6f30:	4402      	add	r2, r0
   b6f32:	4603      	mov	r3, r0
   b6f34:	4293      	cmp	r3, r2
   b6f36:	d100      	bne.n	b6f3a <memset+0xa>
   b6f38:	4770      	bx	lr
   b6f3a:	f803 1b01 	strb.w	r1, [r3], #1
   b6f3e:	e7f9      	b.n	b6f34 <memset+0x4>

000b6f40 <srand>:
   b6f40:	b538      	push	{r3, r4, r5, lr}
   b6f42:	4b10      	ldr	r3, [pc, #64]	; (b6f84 <srand+0x44>)
   b6f44:	681d      	ldr	r5, [r3, #0]
   b6f46:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6f48:	4604      	mov	r4, r0
   b6f4a:	b9b3      	cbnz	r3, b6f7a <srand+0x3a>
   b6f4c:	2018      	movs	r0, #24
   b6f4e:	f7fe f9bd 	bl	b52cc <malloc>
   b6f52:	4602      	mov	r2, r0
   b6f54:	63a8      	str	r0, [r5, #56]	; 0x38
   b6f56:	b920      	cbnz	r0, b6f62 <srand+0x22>
   b6f58:	4b0b      	ldr	r3, [pc, #44]	; (b6f88 <srand+0x48>)
   b6f5a:	480c      	ldr	r0, [pc, #48]	; (b6f8c <srand+0x4c>)
   b6f5c:	2142      	movs	r1, #66	; 0x42
   b6f5e:	f7fe f9dd 	bl	b531c <__assert_func>
   b6f62:	490b      	ldr	r1, [pc, #44]	; (b6f90 <srand+0x50>)
   b6f64:	4b0b      	ldr	r3, [pc, #44]	; (b6f94 <srand+0x54>)
   b6f66:	e9c0 1300 	strd	r1, r3, [r0]
   b6f6a:	4b0b      	ldr	r3, [pc, #44]	; (b6f98 <srand+0x58>)
   b6f6c:	6083      	str	r3, [r0, #8]
   b6f6e:	230b      	movs	r3, #11
   b6f70:	8183      	strh	r3, [r0, #12]
   b6f72:	2100      	movs	r1, #0
   b6f74:	2001      	movs	r0, #1
   b6f76:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6f7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6f7c:	2200      	movs	r2, #0
   b6f7e:	611c      	str	r4, [r3, #16]
   b6f80:	615a      	str	r2, [r3, #20]
   b6f82:	bd38      	pop	{r3, r4, r5, pc}
   b6f84:	2003e5b8 	.word	0x2003e5b8
   b6f88:	000b74e5 	.word	0x000b74e5
   b6f8c:	000b74fc 	.word	0x000b74fc
   b6f90:	abcd330e 	.word	0xabcd330e
   b6f94:	e66d1234 	.word	0xe66d1234
   b6f98:	0005deec 	.word	0x0005deec

000b6f9c <strcpy>:
   b6f9c:	4603      	mov	r3, r0
   b6f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6fa2:	f803 2b01 	strb.w	r2, [r3], #1
   b6fa6:	2a00      	cmp	r2, #0
   b6fa8:	d1f9      	bne.n	b6f9e <strcpy+0x2>
   b6faa:	4770      	bx	lr

000b6fac <__register_exitproc>:
   b6fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6fb0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b706c <__register_exitproc+0xc0>
   b6fb4:	4606      	mov	r6, r0
   b6fb6:	f8d8 0000 	ldr.w	r0, [r8]
   b6fba:	461f      	mov	r7, r3
   b6fbc:	460d      	mov	r5, r1
   b6fbe:	4691      	mov	r9, r2
   b6fc0:	f000 f856 	bl	b7070 <__retarget_lock_acquire_recursive>
   b6fc4:	4b25      	ldr	r3, [pc, #148]	; (b705c <__register_exitproc+0xb0>)
   b6fc6:	681c      	ldr	r4, [r3, #0]
   b6fc8:	b934      	cbnz	r4, b6fd8 <__register_exitproc+0x2c>
   b6fca:	4c25      	ldr	r4, [pc, #148]	; (b7060 <__register_exitproc+0xb4>)
   b6fcc:	601c      	str	r4, [r3, #0]
   b6fce:	4b25      	ldr	r3, [pc, #148]	; (b7064 <__register_exitproc+0xb8>)
   b6fd0:	b113      	cbz	r3, b6fd8 <__register_exitproc+0x2c>
   b6fd2:	681b      	ldr	r3, [r3, #0]
   b6fd4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6fd8:	6863      	ldr	r3, [r4, #4]
   b6fda:	2b1f      	cmp	r3, #31
   b6fdc:	dd07      	ble.n	b6fee <__register_exitproc+0x42>
   b6fde:	f8d8 0000 	ldr.w	r0, [r8]
   b6fe2:	f000 f847 	bl	b7074 <__retarget_lock_release_recursive>
   b6fe6:	f04f 30ff 	mov.w	r0, #4294967295
   b6fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6fee:	b34e      	cbz	r6, b7044 <__register_exitproc+0x98>
   b6ff0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6ff4:	b988      	cbnz	r0, b701a <__register_exitproc+0x6e>
   b6ff6:	4b1c      	ldr	r3, [pc, #112]	; (b7068 <__register_exitproc+0xbc>)
   b6ff8:	b923      	cbnz	r3, b7004 <__register_exitproc+0x58>
   b6ffa:	f8d8 0000 	ldr.w	r0, [r8]
   b6ffe:	f000 f838 	bl	b7072 <__retarget_lock_release>
   b7002:	e7f0      	b.n	b6fe6 <__register_exitproc+0x3a>
   b7004:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7008:	f7fe f960 	bl	b52cc <malloc>
   b700c:	2800      	cmp	r0, #0
   b700e:	d0f4      	beq.n	b6ffa <__register_exitproc+0x4e>
   b7010:	2300      	movs	r3, #0
   b7012:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7016:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b701a:	6863      	ldr	r3, [r4, #4]
   b701c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7020:	2201      	movs	r2, #1
   b7022:	409a      	lsls	r2, r3
   b7024:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7028:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b702c:	4313      	orrs	r3, r2
   b702e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7032:	2e02      	cmp	r6, #2
   b7034:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7038:	bf02      	ittt	eq
   b703a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b703e:	4313      	orreq	r3, r2
   b7040:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7044:	6863      	ldr	r3, [r4, #4]
   b7046:	f8d8 0000 	ldr.w	r0, [r8]
   b704a:	1c5a      	adds	r2, r3, #1
   b704c:	3302      	adds	r3, #2
   b704e:	6062      	str	r2, [r4, #4]
   b7050:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7054:	f000 f80e 	bl	b7074 <__retarget_lock_release_recursive>
   b7058:	2000      	movs	r0, #0
   b705a:	e7c6      	b.n	b6fea <__register_exitproc+0x3e>
   b705c:	2003e7e8 	.word	0x2003e7e8
   b7060:	2003e75c 	.word	0x2003e75c
   b7064:	00000000 	.word	0x00000000
   b7068:	000b52cd 	.word	0x000b52cd
   b706c:	2003e61c 	.word	0x2003e61c

000b7070 <__retarget_lock_acquire_recursive>:
   b7070:	4770      	bx	lr

000b7072 <__retarget_lock_release>:
   b7072:	4770      	bx	lr

000b7074 <__retarget_lock_release_recursive>:
   b7074:	4770      	bx	lr

000b7076 <link_code_end>:
	...

000b7078 <link_const_data_start>:
	...

000b7088 <dynalib_user>:
   b7088:	491d 000b 4959 000b 4981 000b 4985 000b     .I..YI...I...I..
   b7098:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b70a8:	7620 7269 7574 6c61 6300 6e6f 656e 7463      virtual.connect
   b70b8:	6465 6c00 636f 6c61 5049 253d 0073 7573     ed.localIP=%s.su
   b70c8:	6e62 7465 614d 6b73 253d 0073 6167 6574     bnetMask=%s.gate
   b70d8:	6177 4979 3d50 7325 5400 6d65 6570 6172     wayIP=%s.Tempera
   b70e8:	7574 6572 203a 3425 312e c266 43b0 000a     ture: %4.1f..C..
   b70f8:	6f6c 6163 496c 3d50 7325 000a 4354 2050     localIP=%s..TCP 
   b7108:	7962 6574 2073 6572 6563 7669 6465 203a     bytes received: 
   b7118:	6925 000a 4354 5350 7265 6576 3a72 773a     %i..TCPServer::w
   b7128:	6972 6574 2928 6620 6961 656c 2064 6528     rite() failed (e
   b7138:	7272 726f 3d20 2520 2964 0000               rror = %d)..

000b7144 <_ZTVN5spark13EthernetClassE>:
	...
   b714c:	539b 000b 5391 000b 5387 000b 537d 000b     .S...S...S..}S..
   b715c:	5371 000b 5365 000b 64f1 000b 64f9 000b     qS..eS...d...d..
   b716c:	5359 000b 5351 000b 5347 000b 533d 000b     YS..QS..GS..=S..
   b717c:	6529 000b                                   )e..

000b7180 <_ZTV21StringPrintableHelper>:
	...
   b7188:	53f1 000b 53f3 000b 54ab 000b 547d 000b     .S...S...T..}T..

000b7198 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b71a0:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b71b0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b71c0 <_ZTV6Stream>:
	...
   b71d0:	49a1 000b 54f9 000b 49a1 000b 49a1 000b     .I...T...I...I..
   b71e0:	49a1 000b 49a1 000b                         .I...I..

000b71e8 <_ZTV15TCPServerClient>:
	...
   b71f0:	5779 000b 578d 000b 5e91 000b 5eab 000b     yW...W...^...^..
   b7200:	62b9 000b 5ed5 000b 612f 000b 5f09 000b     .b...^../a..._..
   b7210:	61c1 000b 6001 000b 615d 000b 636d 000b     .a...`..]a..mc..
   b7220:	60fd 000b 5f0b 000b 5ebd 000b 5f4d 000b     .`..._...^..M_..
   b7230:	56b7 000b                                   .V..

000b7234 <_ZTV9TCPServer>:
	...
   b723c:	580d 000b 582d 000b 565b 000b 5673 000b     .X..-X..[V..sV..
   b724c:	5841 000b 5643 000b 5685 000b               AX..CV...V..

000b7258 <_ZTV9IPAddress>:
	...
   b7260:	5b55 000b 5b45 000b 5b47 000b               U[..E[..G[..

000b726c <_ZTV9USBSerial>:
	...
   b7274:	5c67 000b 5ccf 000b 5ca5 000b 54f9 000b     g\...\...\...T..
   b7284:	5c97 000b 5c69 000b 5c79 000b 5cc9 000b     .\..i\..y\...\..
   b7294:	5c89 000b 5c61 000b                         .\..a\..

000b729c <_ZTV11USARTSerial>:
	...
   b72a4:	5d71 000b 5ddd 000b 5db5 000b 54f9 000b     q]...]...]...T..
   b72b4:	5d85 000b 5da1 000b 5d93 000b 5daf 000b     .]...]...]...]..
   b72c4:	5d73 000b 5d77 000b                         s]..w]..

000b72cc <_ZTV7TwoWire>:
	...
   b72d4:	5e15 000b 5e5f 000b 5e37 000b 5e17 000b     .^.._^..7^...^..
   b72e4:	5e3f 000b 5e47 000b 5e4f 000b 5e57 000b     ?^..G^..O^..W^..
   b72f4:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b7304:	2072 203d 6425 0000                         r = %d..

000b730c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7314:	5f15 000b 5f39 000b 642f 000b 5f47 000b     ._..9_../d..G_..
   b7324:	5f19 000b                                   ._..

000b7328 <_ZTV9TCPClient>:
	...
   b7330:	4a19 000b 4a31 000b 5e91 000b 5eab 000b     .J..1J...^...^..
   b7340:	62b9 000b 5ed5 000b 612f 000b 5f09 000b     .b...^../a..._..
   b7350:	61c1 000b 6001 000b 615d 000b 636d 000b     .a...`..]a..mc..
   b7360:	60fd 000b 5f0b 000b 5ebd 000b 5f4d 000b     .`..._...^..M_..
   b7370:	5fe1 000b                                   ._..

000b7374 <_ZTVN5spark9WiFiClassE>:
	...
   b737c:	6493 000b 6489 000b 647f 000b 6435 000b     .d...d...d..5d..
   b738c:	6473 000b 6467 000b 64f1 000b 64f9 000b     sd..gd...d...d..
   b739c:	645b 000b 6453 000b 6449 000b 643f 000b     [d..Sd..Id..?d..
   b73ac:	6529 000b                                   )e..

000b73b0 <_ZTVN5spark12NetworkClassE>:
	...
   b73b8:	64b1 000b 64bb 000b 64c5 000b 64cf 000b     .d...d...d...d..
   b73c8:	64d9 000b 64e5 000b 64f1 000b 64f9 000b     .d...d...d...d..
   b73d8:	6501 000b 650d 000b 6515 000b 651f 000b     .e...e...e...e..
   b73e8:	6529 000b                                   )e..

000b73ec <_ZSt7nothrow>:
	...

000b73ed <_ZTSSt19_Sp_make_shared_tag>:
   b73ed:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b73fd:	6572 5f64 6174 0067 0000                     red_tag....

000b7408 <_ZTISt19_Sp_make_shared_tag>:
   b7408:	7448 000b 73ed 000b                         Ht...s..

000b7410 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7410:	74a8 000b 741c 000b 74cc 000b               .t...t...t..

000b741c <_ZTSN10__cxxabiv117__class_type_infoE>:
   b741c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b742c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b743c:	0045 0000                                   E...

000b7440 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7440:	0000 0000 7410 000b 6859 000b 686d 000b     .....t..Yh..mh..
   b7450:	6a01 000b 6a01 000b 68d7 000b 6819 000b     .j...j...h...h..
   b7460:	68bf 000b 6881 000b 684b 000b               .h...h..Kh..

000b746c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b746c:	74a8 000b 7478 000b 7410 000b               .t..xt...t..

000b7478 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7478:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7488:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7498:	666e 456f 0000 0000                         nfoE....

000b74a0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b74a0:	0000 0000 746c 000b 6901 000b 6915 000b     ....lt...i...i..
   b74b0:	6a01 000b 6a01 000b 68d7 000b 6819 000b     .j...j...h...h..
   b74c0:	69d5 000b 6961 000b 6929 000b               .i..ai..)i..

000b74cc <_ZTISt9type_info>:
   b74cc:	7448 000b 74d4 000b                         Ht...t..

000b74d4 <_ZTSSt9type_info>:
   b74d4:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   b74e4:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b74f4:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b7504:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b7514:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b7524:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b7534:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b7544:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b7554:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b7564:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b7574:	646e 632e                                    nd.c.

000b7579 <link_const_data_end>:
   b7579:	00          	.byte	0x00
	...

000b757c <link_constructors_location>:
   b757c:	000b4de1 	.word	0x000b4de1
   b7580:	000b53a5 	.word	0x000b53a5
   b7584:	000b53cd 	.word	0x000b53cd
   b7588:	000b54e9 	.word	0x000b54e9
   b758c:	000b5619 	.word	0x000b5619
   b7590:	000b5629 	.word	0x000b5629
   b7594:	000b5a01 	.word	0x000b5a01
   b7598:	000b649d 	.word	0x000b649d
   b759c:	000b6601 	.word	0x000b6601
